; ../LE1/lib/mass/mass.SRC generated from: ../LE1/lib/mass/mass.c
; COMPILER INVOKED BY:
;        C:\KEIL\C51\BIN\C51.exe ../LE1/lib/mass/mass.c INCDIR(../LE1/include) BROWSE DEBUG CD SB OMF2 WL(0) PREPRINT SRC

$NOMOD51

NAME	___LE1_LIB_MASS_MASS

TB80	BIT	098H.3
SPISSTAT	DATA	0BEH
T2I0	BIT	0C8H.0
CCH1	DATA	0C3H
P0	DATA	080H
T2I1	BIT	0C8H.1
CCPDATO	DATA	0DFH
CCH2	DATA	0C5H
P1	DATA	090H
CCH3	DATA	0C7H
P2	DATA	0A0H
SM20	BIT	098H.5
P3	DATA	0B0H
AC	BIT	0D0H.6
CCL1	DATA	0C2H
CCL2	DATA	0C4H
BD	BIT	0D8H.7
RFSPI	BIT	0B8H.0
EA	BIT	0A8H.7
T2	DATA	0CCH
CCL3	DATA	0C6H
SPISRDSZ	DATA	0B7H
T2R0	BIT	0C8H.3
T2R1	BIT	0C8H.4
IEN0	DATA	0A8H
IEN1	DATA	0B8H
WUCON	DATA	0A5H
DPH1	DATA	085H
COMPCON	DATA	0DBH
CLKCTRL	DATA	0A3H
DPL1	DATA	084H
I2FR	BIT	0C8H.5
WUPIN	BIT	0B8H.3
I3FR	BIT	0C8H.6
SPIMDAT	DATA	0FFH
EXF2	BIT	0C0H.7
REN0	BIT	098H.4
T2CM	BIT	0C8H.2
RF	BIT	0B8H.1
WUIRQ	BIT	0B8H.5
SPIRDAT	DATA	0E7H
CCEN	DATA	0C1H
W2CON0	DATA	0E2H
SPISDAT	DATA	0BFH
CY	BIT	0D0H.7
W2CON1	DATA	0E1H
FDCR	DATA	0FBH
RFCE	BIT	0E8H.0
CRCH	DATA	0CBH
SP	DATA	081H
OV	BIT	0D0H.2
CRCL	DATA	0CAH
CLKLFCTRL	DATA	0ADH
RSTREAS	DATA	0B1H
T2PS	BIT	0C8H.7
FPCR	DATA	0F9H
MISC	BIT	0B8H.4
PWMDC0	DATA	0A1H
RTC2CMP0	DATA	0B4H
PWMDC1	DATA	0A2H
RTC2CMP1	DATA	0B5H
P00	BIT	080H.0
S0RELH	DATA	0BAH
P10	BIT	090H.0
P01	BIT	080H.1
PCON	DATA	087H
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
SPIF	BIT	0C0H.2
RDIS	BIT	0F8H.2
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
S0RELL	DATA	0AAH
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
W2SADR	DATA	0D9H
TMOD	DATA	089H
TCON	DATA	088H
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
CC1	DATA	0C2H
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
CC2	DATA	0C4H
P36	BIT	0B0H.6
P27	BIT	0A0H.7
CC3	DATA	0C6H
P37	BIT	0B0H.7
RFCKEN	BIT	0E8H.2
WPEN	BIT	0F8H.0
CCPDATIA	DATA	0DDH
CCPDATIB	DATA	0DEH
IE0	BIT	088H.1
RDYN	BIT	0F8H.4
IE1	BIT	088H.3
WUOPC0	DATA	0CFH
B	DATA	0F0H
MD0	DATA	0E9H
WUOPC1	DATA	0CEH
MEMCON	DATA	0A7H
MD1	DATA	0EAH
RNGDAT	DATA	0D7H
MD2	DATA	0EBH
MD3	DATA	0ECH
MD4	DATA	0EDH
WDSV	DATA	0AFH
MD5	DATA	0EEH
ACC	DATA	0E0H
POFCON	DATA	0DCH
ES0	BIT	0A8H.4
ET0	BIT	0A8H.1
IP0	DATA	0A9H
ET1	BIT	0A8H.3
TF0	BIT	088H.5
IP1	DATA	0B9H
ET2	BIT	0A8H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
RFSPIF	BIT	0C0H.0
TF2	BIT	0C0H.6
SPIMCON0	DATA	0FCH
RNGCTL	DATA	0D6H
TH0	DATA	08CH
EX0	BIT	0A8H.0
TI0	BIT	098H.1
IT0	BIT	088H.0
SPIMCON1	DATA	0FDH
TH1	DATA	08DH
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
OPMCON	DATA	0AEH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
SPIRCON0	DATA	0E4H
TL1	DATA	08BH
SPIRCON1	DATA	0E5H
TL2	DATA	0CCH
SPISCON0	DATA	0BCH
SPISCON1	DATA	0BDH
RS0	BIT	0D0H.3
TR0	BIT	088H.4
RS1	BIT	0D0H.4
PWMCON	DATA	0B2H
TR1	BIT	088H.6
CRC	DATA	0CAH
INTEXP	DATA	0A6H
WUPINF	BIT	0C0H.3
FCR	DATA	0FAH
ADCCON1	DATA	0D3H
ADCCON2	DATA	0D2H
DPH	DATA	083H
ADCCON3	DATA	0D1H
RFF	BIT	0C0H.1
P0DIR	DATA	093H
DPL	DATA	082H
P0CON	DATA	09EH
S0BUF	DATA	099H
P1DIR	DATA	094H
P1CON	DATA	09FH
P2DIR	DATA	095H
EXEN2	BIT	0B8H.7
W2DAT	DATA	0DAH
P2CON	DATA	097H
P3DIR	DATA	096H
PWRDWN	DATA	0A4H
S0CON	DATA	098H
P3CON	DATA	08FH
RTC2CPT00	DATA	0B6H
ADCON	DATA	0D8H
RTC2CPT10	DATA	0ACH
RTC2CPT01	DATA	0ABH
T2CON	DATA	0C8H
DPS	DATA	092H
WEN	BIT	0F8H.5
FSR	DATA	0F8H
ADCDATH	DATA	0D4H
MPAGE	DATA	0C9H
SPI	BIT	0B8H.2
RDEND	BIT	0F8H.1
ADCDATL	DATA	0D5H
INFEN	BIT	0F8H.3
MCDIS	BIT	0F8H.7
WUF	BIT	0C0H.5
MISCF	BIT	0C0H.4
ARCON	DATA	0EFH
F0	BIT	0D0H.5
STP	BIT	0F8H.6
SPIMSTAT	DATA	0FEH
RFCON	DATA	0E8H
PSW	DATA	0D0H
RB80	BIT	098H.2
IRCON	DATA	0C0H
RFCSN	BIT	0E8H.1
SPIRSTAT	DATA	0E6H
RTC2CON	DATA	0B3H
?PR?get_data?___LE1_LIB_MASS_MASS        SEGMENT CODE 
?PR?set_data?___LE1_LIB_MASS_MASS        SEGMENT CODE 
?PR?get_ram?___LE1_LIB_MASS_MASS         SEGMENT CODE 
?PR?ret_char?___LE1_LIB_MASS_MASS        SEGMENT CODE 
?PR?ret_int?___LE1_LIB_MASS_MASS         SEGMENT CODE 
?PR?ret_long?___LE1_LIB_MASS_MASS        SEGMENT CODE 
?PR?ret_ptr?___LE1_LIB_MASS_MASS         SEGMENT CODE 
?PR?ret_func?___LE1_LIB_MASS_MASS        SEGMENT CODE 
?DT?ret_func?___LE1_LIB_MASS_MASS        SEGMENT DATA OVERLAYABLE
?PR?set_rfaddr?___LE1_LIB_MASS_MASS      SEGMENT CODE 
?PR?ret_bitmap?___LE1_LIB_MASS_MASS      SEGMENT CODE 
?DT?ret_bitmap?___LE1_LIB_MASS_MASS      SEGMENT DATA OVERLAYABLE
?PR?set_bitmap?___LE1_LIB_MASS_MASS      SEGMENT CODE 
?PR?put_addr?___LE1_LIB_MASS_MASS        SEGMENT CODE 
	EXTRN	XDATA (bm0)
	EXTRN	DATA (rf_ack_idx)
	EXTRN	DATA (return_flag)
	EXTRN	DATA (rf_rx_addr)
	EXTRN	CODE (_epl_mdelay)
	EXTRN	CODE (_epl_uart_putchar)
	EXTRN	XDATA (result_buf)
	EXTRN	DATA (id)
	EXTRN	DATA (rf_rx_addr2)
	EXTRN	CODE (_hal_nrf_set_address)
	EXTRN	XDATA (group_id)
	EXTRN	CODE (_?epl_uart_putint)
	EXTRN	XDATA (rf_buf)
	PUBLIC	put_addr
	PUBLIC	set_bitmap
	PUBLIC	ret_bitmap
	PUBLIC	set_rfaddr
	PUBLIC	ret_func
	PUBLIC	ret_ptr
	PUBLIC	ret_long
	PUBLIC	ret_int
	PUBLIC	ret_char
	PUBLIC	get_ram
	PUBLIC	set_data
	PUBLIC	get_data

	RSEG  ?DT?ret_bitmap?___LE1_LIB_MASS_MASS
?ret_bitmap?BYTE:
          j?944:   DS   1

	RSEG  ?DT?ret_func?___LE1_LIB_MASS_MASS
?ret_func?BYTE:
          i?740:   DS   2
	ORG  2
          j?741:   DS   1
; #include <Nordic/reg24le1.h>
; #include <EPL/epl_uart.h>
; #include <HAL/hal_nrf.h>
; #include <EPL/epl_utils.h>
; #include <mass/mass.h>
; 
; extern unsigned char id;
; extern unsigned char xdata group_id;
; extern unsigned int xdata pkt_seq;
; extern unsigned char rf_ack_idx;
; extern volatile unsigned char return_flag;
; extern struct radio_buffer xdata rf_buf;
; extern unsigned char xdata result_buf[RF_BUF_LEN];
; extern unsigned char rf_rx_addr[5];
; extern unsigned char rf_rx_addr2[5];
; extern unsigned char xdata bm0[BITMAP_LEN];
; 
; //Cindy  - test OK 20091011
; void get_data()

	RSEG  ?PR?get_data?___LE1_LIB_MASS_MASS
get_data:
	USING	0
			; SOURCE LINE # 19
; {
			; SOURCE LINE # 20
; 	#pragma asm
; 		; Pop ret address to ret directly back to while loop
	  ; Pop ret address to ret directly back to while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 28
	CLR  	A
	MOV  	MEMCON,A
; 
; 	#pragma asm
; 		MOV  	DPTR,#rf_buf+05H
	  MOV  	DPTR,#rf_buf+05H
; 	
	  
; 		WHILE_LOOP:
	  WHILE_LOOP:
; 			MOV		A, R2
	  MOV		A, R2
; 			JZ		END_GET_DATA
	  JZ		END_GET_DATA
; 			DEC		R2
	  DEC		R2
; 
	  
; 			MOV		A, @R0
	  MOV		A, @R0
; 			MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 			INC		R0
	  INC		R0
; 			INC 	DPTR
	  INC 	DPTR
; 			SJMP	WHILE_LOOP
	  SJMP	WHILE_LOOP
; 
	  
; 		END_GET_DATA:
	  END_GET_DATA:
; 	#pragma endasm
; 
; #ifdef DEBUG	
; 	epl_uart_putint(1); 
			; SOURCE LINE # 48
	MOV  	R6,#00H
	MOV  	R7,#01H
	LJMP 	_?epl_uart_putint
; END OF get_data

; #endif
; 
; }
; 
; //Cindy  - test OK 20091011
; void set_data()

	RSEG  ?PR?set_data?___LE1_LIB_MASS_MASS
set_data:
	USING	0
			; SOURCE LINE # 54
; {
			; SOURCE LINE # 55
; 	#pragma asm
; 
	  
; 		; Pop ret address to ret directly back to main while loop
	  ; Pop ret address to ret directly back to main while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 64
	CLR  	A
	MOV  	MEMCON,A
;     
; 	#pragma asm
; 
	  
; 		MOV  	DPTR,#rf_buf+0FH
	  MOV  	DPTR,#rf_buf+0FH
; 	WHILE_LOOP?3:
	  WHILE_LOOP?3:
; 		MOV		A, R2
	  MOV		A, R2
; 		JZ		END_SET_DATA
	  JZ		END_SET_DATA
; 		DEC		R2
	  DEC		R2
; 		; Copy data from rf_buf
	  ; Copy data from rf_buf
; 		MOVX	A, @DPTR
	  MOVX	A, @DPTR
; 		//MOV A,#01H
	  
; 		; Write into designated location in IDATA
	  ; Write into designated location in IDATA
; 		MOV		@R0, A
	  MOV		@R0, A
; 
	  
; 		INC		R0
	  INC		R0
; 		INC		DPTR
	  INC		DPTR
; 		SJMP	WHILE_LOOP?3
	  SJMP	WHILE_LOOP?3
; 	END_SET_DATA:
	  END_SET_DATA:
; 
	  
; 	#pragma endasm
; 
; #ifdef DEBUG	
; 	epl_uart_putint(2);	
			; SOURCE LINE # 87
	MOV  	R6,#00H
	MOV  	R7,#02H
	LJMP 	_?epl_uart_putint
; END OF set_data

; #endif
; }
; 
; //---------------Cindy - 暫時不會用到的func--------------------------//
; //要get flash program memory的值
; void get_ram()

	RSEG  ?PR?get_ram?___LE1_LIB_MASS_MASS
get_ram:
	USING	0
			; SOURCE LINE # 93
; {
			; SOURCE LINE # 94
; 	#pragma asm
; 		; Pop ret address to ret directly back to main while loop
	  ; Pop ret address to ret directly back to main while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 102
	CLR  	A
	MOV  	MEMCON,A
; 
; 	#pragma asm	
; 		
	  
; 		//Cindy - R0 stores len, DPTR stores ram_addr
	  
; 		; Write into address starting from rf_buf.buffer[4]
	  ; Write into address starting from rf_buf.buffer[4]
; 		MOV		R1, #LOW(rf_buf+05H)
	  MOV		R1, #LOW(rf_buf+05H)
; 		; while(len--)
	  ; while(len--)
; 	WHILE_LOOP?2:
	  WHILE_LOOP?2:
; 		MOV		A, R0
	  MOV		A, R0
; 		JZ		END_GET_RAM
	  JZ		END_GET_RAM
; 		DEC		R0
	  DEC		R0
; 
	  
; 		MOVX	A, @DPTR
	  MOVX	A, @DPTR
; 		MOVX	@R1, A
	  MOVX	@R1, A
; 
	  
; 		INC		DPTR
	  INC		DPTR
; 		INC		R1
	  INC		R1
; 		SJMP	WHILE_LOOP?2
	  SJMP	WHILE_LOOP?2
; 	END_GET_RAM:
	  END_GET_RAM:
; 
	  
; 	#pragma endasm
; 
; }
			; SOURCE LINE # 125
	RET  	
; END OF get_ram

; //---------------------------------------------------------------------//
; 
; //Cindy  - test OK 20091011
; void ret_char()

	RSEG  ?PR?ret_char?___LE1_LIB_MASS_MASS
ret_char:
	USING	0
			; SOURCE LINE # 129
; {
			; SOURCE LINE # 130
; 	#pragma asm
; 		; Pop ret address to ret directly back to main while loop
	  ; Pop ret address to ret directly back to main while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 138
	CLR  	A
	MOV  	MEMCON,A
;      
; 	#pragma asm
; 		MOV  	R5,rf_ack_idx
	  MOV  	R5,rf_ack_idx
; 		MOV  	A,R5
	  MOV  	A,R5
; 		RLC  	A
	  RLC  	A
; 		SUBB 	A,ACC
	  SUBB 	A,ACC
; 		MOV  	R6,A
	  MOV  	R6,A
; 		MOV  	A,#LOW (rf_buf+01H)
	  MOV  	A,#LOW (rf_buf+01H)
; 		ADD  	A,R5
	  ADD  	A,R5
; 		MOV  	DPL,A
	  MOV  	DPL,A
; 		MOV  	A,#HIGH (rf_buf+01H)
	  MOV  	A,#HIGH (rf_buf+01H)
; 		ADDC 	A,R6
	  ADDC 	A,R6
; 		MOV  	DPH,A
	  MOV  	DPH,A
; 		
	  
; 		MOV  	A, R7
	  MOV  	A, R7
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		
	  
; 		; rf_ack_idx++;
	  ; rf_ack_idx++;
; 		INC		rf_ack_idx
	  INC		rf_ack_idx
; 	#pragma endasm
; 	
; #ifdef DEBUG	
; 	epl_uart_putint(4);
			; SOURCE LINE # 161
	MOV  	R6,#00H
	MOV  	R7,#04H
	LJMP 	_?epl_uart_putint
; END OF ret_char

; #endif
; }
; 
; //Cindy  - test OK 20091011
; void ret_int()

	RSEG  ?PR?ret_int?___LE1_LIB_MASS_MASS
ret_int:
	USING	0
			; SOURCE LINE # 166
; {
			; SOURCE LINE # 167
; 	#pragma asm
; 		; Pop ret address to ret directly back to main while loop
	  ; Pop ret address to ret directly back to main while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 175
	CLR  	A
	MOV  	MEMCON,A
;     
; 	#pragma asm
; 		MOV  	R5,rf_ack_idx
	  MOV  	R5,rf_ack_idx
; 		MOV  	A,R5
	  MOV  	A,R5
; 		RLC  	A
	  RLC  	A
; 		SUBB 	A,ACC
	  SUBB 	A,ACC
; 		MOV  	R4,A
	  MOV  	R4,A
; 		MOV  	A,#LOW (rf_buf+01H)
	  MOV  	A,#LOW (rf_buf+01H)
; 		ADD  	A,R5
	  ADD  	A,R5
; 		MOV  	DPL,A
	  MOV  	DPL,A
; 		MOV  	A,#HIGH (rf_buf+01H)
	  MOV  	A,#HIGH (rf_buf+01H)
; 		ADDC 	A,R4
	  ADDC 	A,R4
; 		MOV  	DPH,A
	  MOV  	DPH,A
; 		
	  
; 		MOV  	A, R6
	  MOV  	A, R6
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		INC		DPTR
	  INC		DPTR
; 		MOV  	A, R7
	  MOV  	A, R7
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 
	  
; 		; rf_ack_idx += 2;
	  ; rf_ack_idx += 2;
; 		INC		rf_ack_idx
	  INC		rf_ack_idx
; 		INC		rf_ack_idx
	  INC		rf_ack_idx
; 	#pragma endasm
; 
; #ifdef DEBUG	
; 	epl_uart_putint(5);
			; SOURCE LINE # 202
	MOV  	R6,#00H
	MOV  	R7,#05H
	LJMP 	_?epl_uart_putint
; END OF ret_int

; #endif
; }
; 
; //Cindy  - test OK 20091011
; void ret_long()

	RSEG  ?PR?ret_long?___LE1_LIB_MASS_MASS
ret_long:
	USING	0
			; SOURCE LINE # 207
; {
			; SOURCE LINE # 208
; 	#pragma asm
; 		; Pop ret address to ret directly back to main while loop
	  ; Pop ret address to ret directly back to main while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 216
	CLR  	A
	MOV  	MEMCON,A
;     
; 	#pragma asm
; 	
	  
; 		MOV  	R3,rf_ack_idx
	  MOV  	R3,rf_ack_idx
; 		MOV  	A,R3
	  MOV  	A,R3
; 		RLC  	A
	  RLC  	A
; 		SUBB 	A,ACC
	  SUBB 	A,ACC
; 		MOV  	R2,A
	  MOV  	R2,A
; 		MOV  	A,#LOW (rf_buf+01H)
	  MOV  	A,#LOW (rf_buf+01H)
; 		ADD  	A,R3
	  ADD  	A,R3
; 		MOV  	DPL,A
	  MOV  	DPL,A
; 		MOV  	A,#HIGH (rf_buf+01H)
	  MOV  	A,#HIGH (rf_buf+01H)
; 		ADDC 	A,R2
	  ADDC 	A,R2
; 		MOV  	DPH,A
	  MOV  	DPH,A
; 		
	  
; 		MOV  	A, R4
	  MOV  	A, R4
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		INC		DPTR
	  INC		DPTR
; 		MOV  	A, R5
	  MOV  	A, R5
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		INC		DPTR
	  INC		DPTR
; 		MOV  	A, R6
	  MOV  	A, R6
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		INC		DPTR
	  INC		DPTR
; 		MOV  	A, R7
	  MOV  	A, R7
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 
	  
; 		; rf_ack_idx += 4;
	  ; rf_ack_idx += 4;
; 		MOV  	A,#04H
	  MOV  	A,#04H
; 		ADD  	A,rf_ack_idx
	  ADD  	A,rf_ack_idx
; 		MOV  	rf_ack_idx,A
	  MOV  	rf_ack_idx,A
; 	#pragma endasm
; 
; #ifdef DEBUG	
; 	epl_uart_putint(6);
			; SOURCE LINE # 251
	MOV  	R6,#00H
	MOV  	R7,#06H
	LJMP 	_?epl_uart_putint
; END OF ret_long

; #endif
; }
; 
; //Cindy  - test OK 20091011
; void ret_ptr()

	RSEG  ?PR?ret_ptr?___LE1_LIB_MASS_MASS
ret_ptr:
	USING	0
			; SOURCE LINE # 256
; {
			; SOURCE LINE # 257
; 	#pragma asm
; 		; Pop ret address to ret directly back to main while loop
	  ; Pop ret address to ret directly back to main while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 265
	CLR  	A
	MOV  	MEMCON,A
;     
; 	#pragma asm
; 		MOV  	R5,rf_ack_idx
	  MOV  	R5,rf_ack_idx
; 		MOV  	A,R5
	  MOV  	A,R5
; 		RLC  	A
	  RLC  	A
; 		SUBB 	A,ACC
	  SUBB 	A,ACC
; 		MOV  	R6,A
	  MOV  	R6,A
; 		MOV  	A,#LOW (rf_buf+01H)
	  MOV  	A,#LOW (rf_buf+01H)
; 		ADD  	A,R5
	  ADD  	A,R5
; 		MOV  	DPL,A
	  MOV  	DPL,A
; 		MOV  	A,#HIGH (rf_buf+01H)
	  MOV  	A,#HIGH (rf_buf+01H)
; 		ADDC 	A,R6
	  ADDC 	A,R6
; 		MOV  	DPH,A
	  MOV  	DPH,A
; 		
	  
; 		MOV  	A, R1
	  MOV  	A, R1
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		INC		DPTR
	  INC		DPTR
; 		MOV  	A, R2
	  MOV  	A, R2
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 		INC		DPTR
	  INC		DPTR
; 		MOV  	A, R3
	  MOV  	A, R3
; 		MOVX 	@DPTR,A
	  MOVX 	@DPTR,A
; 
	  
; 		; rf_ack_idx += 3;
	  ; rf_ack_idx += 3;
; 		MOV  	A,#03H
	  MOV  	A,#03H
; 		ADD  	A,rf_ack_idx
	  ADD  	A,rf_ack_idx
; 		MOV  	rf_ack_idx,A
	  MOV  	rf_ack_idx,A
; 	#pragma endasm
; 
; #ifdef DEBUG	
; 	epl_uart_putint(7);
			; SOURCE LINE # 296
	MOV  	R6,#00H
	MOV  	R7,#07H
	LJMP 	_?epl_uart_putint
; END OF ret_ptr

; #endif
; }
; 
; //Cindy  - 
; void ret_func()

	RSEG  ?PR?ret_func?___LE1_LIB_MASS_MASS
ret_func:
	USING	0
			; SOURCE LINE # 301
; {
			; SOURCE LINE # 302
;     unsigned int i; 
;     unsigned char j;
;      
;     #pragma asm
; 		; Pop ret address to ret directly back to while loop
	  ; Pop ret address to ret directly back to while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 313
	CLR  	A
	MOV  	MEMCON,A
;      
; #ifdef DEBUG
;     epl_uart_putchar('f');     
			; SOURCE LINE # 316
	MOV  	R7,#066H
	LCALL	_epl_uart_putchar
; #endif                       
;     //Return Function result to host //
;     result_buf[0] = rf_buf.buffer[7];
			; SOURCE LINE # 319
	MOV  	DPTR,#rf_buf+08H
	MOVX 	A,@DPTR
	MOV  	DPTR,#result_buf
	MOVX 	@DPTR,A
;     result_buf[1] = group_id;
			; SOURCE LINE # 320
	MOV  	DPTR,#group_id
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#result_buf+01H
	MOVX 	@DPTR,A
;                  
;     // Delay to avoid collision //
;     if(rf_buf.buffer[8]){             
			; SOURCE LINE # 323
	MOV  	DPTR,#rf_buf+09H
	MOVX 	A,@DPTR
	JZ   	?C0008
;         // Delay to avoid collision //
;         /*for(i = 0;i < group_id * 100 ;i++){
;               for(j = 0;j < 140;j++)
;                     ;
;         }*/
;         epl_mdelay(group_id*10);
			; SOURCE LINE # 329
	MOV  	A,R7
	MOV  	B,#0AH
	MUL  	AB
	MOV  	R7,A
	MOV  	R6,B
	LCALL	_epl_mdelay
;     }
			; SOURCE LINE # 330
?C0008:
; 
;     return_flag = 1;
			; SOURCE LINE # 332
	MOV  	return_flag,#01H
; }
			; SOURCE LINE # 333
	RET  	
; END OF ret_func

; 
; //Cindy  - 
; void set_rfaddr()

	RSEG  ?PR?set_rfaddr?___LE1_LIB_MASS_MASS
set_rfaddr:
	USING	0
			; SOURCE LINE # 336
; {
			; SOURCE LINE # 337
;     unsigned char i;
;      
; 	#pragma asm
; 		; Pop ret address to ret directly back to while loop
	  ; Pop ret address to ret directly back to while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 347
	CLR  	A
	MOV  	MEMCON,A
; 	
; #ifdef DEBUG	
; 	epl_uart_putchar('c'); 
			; SOURCE LINE # 350
	MOV  	R7,#063H
	LCALL	_epl_uart_putchar
; #endif
; 
;     //Reset pkt sequence number
;     //pkt_seq = 0;
; 
;     // Change group rf addr //
;     rf_rx_addr2[0] = rf_buf.buffer[7];
			; SOURCE LINE # 357
	MOV  	DPTR,#rf_buf+08H
	MOVX 	A,@DPTR
	MOV  	rf_rx_addr2,A
;     rf_rx_addr2[1] = rf_buf.buffer[8];
			; SOURCE LINE # 358
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	rf_rx_addr2+01H,A
;     
;     hal_nrf_set_address(HAL_NRF_PIPE0, rf_rx_addr2);    
			; SOURCE LINE # 360
	MOV  	R3,#00H
	MOV  	R2,#HIGH (rf_rx_addr2)
	MOV  	R1,#LOW (rf_rx_addr2)
	CLR  	A
	MOV  	R7,A
	LCALL	_hal_nrf_set_address
;     
;     // Initialize bitmap //
;     for(i = 0; i < rf_buf.buffer[10]; i++){
			; SOURCE LINE # 363
;---- Variable 'i?842' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
?C0010:
	MOV  	DPTR,#rf_buf+0BH
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	A,R7
	CLR  	C
	SUBB 	A,R6
	JNC  	?C0011
;           bm0[i] = 0;
			; SOURCE LINE # 364
	MOV  	A,#LOW (bm0)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (bm0)
	MOV  	DPH,A
	CLR  	A
	MOVX 	@DPTR,A
;     }                           
			; SOURCE LINE # 365
	INC  	R7
	SJMP 	?C0010
?C0011:
;     
;     // Initialize group id //
;     group_id = rf_buf.buffer[11];
			; SOURCE LINE # 368
	MOV  	DPTR,#rf_buf+0CH
	MOVX 	A,@DPTR
	MOV  	DPTR,#group_id
	MOVX 	@DPTR,A
; 
; }
			; SOURCE LINE # 370
	RET  	
; END OF set_rfaddr

; 
; //Cindy  - 
; void ret_bitmap()

	RSEG  ?PR?ret_bitmap?___LE1_LIB_MASS_MASS
ret_bitmap:
	USING	0
			; SOURCE LINE # 373
; {
			; SOURCE LINE # 374
;     unsigned int i; 
;     unsigned char j, delay;
;      
; 	#pragma asm
; 		; Pop ret address to ret directly back to while loop
	  ; Pop ret address to ret directly back to while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 385
	CLR  	A
	MOV  	MEMCON,A
; 	
; #ifdef DEBUG	
; 	epl_uart_putchar('r'); 
			; SOURCE LINE # 388
	MOV  	R7,#072H
	LCALL	_epl_uart_putchar
; #endif
; 
;      delay = rf_buf.buffer[9];
			; SOURCE LINE # 391
	MOV  	DPTR,#rf_buf+0AH
	MOVX 	A,@DPTR
	MOV  	R7,A
;---- Variable 'delay?945' assigned to Register 'R7' ----
; 
;     //Return Bitmap to host //
;      rf_buf.buffer[0] = rf_buf.buffer[7];
			; SOURCE LINE # 394
	MOV  	DPTR,#rf_buf+08H
	MOVX 	A,@DPTR
	MOV  	DPTR,#rf_buf+01H
	MOVX 	@DPTR,A
;      rf_buf.buffer[1] = group_id;
			; SOURCE LINE # 395
	MOV  	DPTR,#group_id
	MOVX 	A,@DPTR
	MOV  	DPTR,#rf_buf+02H
	MOVX 	@DPTR,A
;                     
;      for( i=rf_buf.buffer[8] ; i >0 ; i--){
			; SOURCE LINE # 397
	MOV  	DPTR,#rf_buf+09H
	MOVX 	A,@DPTR
	MOV  	R5,A
	MOV  	R4,#00H
;---- Variable 'i?943' assigned to Register 'R4/R5' ----
?C0014:
	SETB 	C
	MOV  	A,R5
	SUBB 	A,#00H
	MOV  	A,R4
	SUBB 	A,#00H
	JC   	?C0015
;           rf_buf.buffer[i+1] = bm0[i-1]; 
			; SOURCE LINE # 398
	MOV  	A,#LOW (bm0+0FFFFH)
	ADD  	A,R5
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (bm0+0FFFFH)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	MOV  	A,#LOW (rf_buf+02H)
	ADD  	A,R5
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (rf_buf+02H)
	MOV  	DPH,A
	MOV  	A,R6
	MOVX 	@DPTR,A
;      }    
			; SOURCE LINE # 399
	MOV  	A,R5
	DEC  	R5
	JNZ  	?C0014
	DEC  	R4
?C0024:
	SJMP 	?C0014
?C0015:
;      
;      if(delay){
			; SOURCE LINE # 401
	MOV  	A,R7
	JZ   	?C0018
;          // Delay to avoid collision //
;          /*for(i = 0;i < group_id * 100 ;i++){
;                for(j = 0;j < 140;j++)
;                      ;
;          }
;          */
;          epl_mdelay(group_id*10);
			; SOURCE LINE # 408
	MOV  	DPTR,#group_id
	MOVX 	A,@DPTR
	MOV  	B,#0AH
	MUL  	AB
	MOV  	R7,A
	MOV  	R6,B
	LCALL	_epl_mdelay
;      }
			; SOURCE LINE # 409
; 
; }
			; SOURCE LINE # 411
?C0018:
	RET  	
; END OF ret_bitmap

; 
; 
; //Cindy  - 
; void set_bitmap()

	RSEG  ?PR?set_bitmap?___LE1_LIB_MASS_MASS
set_bitmap:
	USING	0
			; SOURCE LINE # 415
; {
			; SOURCE LINE # 416
;     unsigned int i; 
;     
;     #pragma asm
; 		; Pop ret address to ret directly back to while loop
	  ; Pop ret address to ret directly back to while loop
; 		POP		B
	  POP		B
; 		POP		B
	  POP		B
; 	#pragma endasm
; 		
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 426
	CLR  	A
	MOV  	MEMCON,A
; 	
; #ifdef DEBUG	
; 	epl_uart_putchar('y'); 
			; SOURCE LINE # 429
	MOV  	R7,#079H
	LCALL	_epl_uart_putchar
; #endif
;     
;     // Initialize bitmap //
;     for(i = 0; i < rf_buf.buffer[7]; i++){
			; SOURCE LINE # 433
;---- Variable 'i?1046' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
?C0019:
	MOV  	DPTR,#rf_buf+08H
	MOVX 	A,@DPTR
	MOV  	R5,A
	CLR  	C
	MOV  	A,R7
	SUBB 	A,R5
	MOV  	A,R6
	SUBB 	A,#00H
	JNC  	?C0022
;           bm0[i] = 0;
			; SOURCE LINE # 434
	MOV  	A,#LOW (bm0)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (bm0)
	MOV  	DPH,A
	CLR  	A
	MOVX 	@DPTR,A
;     }       
			; SOURCE LINE # 435
	INC  	R7
	CJNE 	R7,#00H,?C0025
	INC  	R6
?C0025:
	SJMP 	?C0019
;     
; }
			; SOURCE LINE # 437
?C0022:
	RET  	
; END OF set_bitmap

; 
; //Cindy  - test OK 20091011
; void put_addr()

	RSEG  ?PR?put_addr?___LE1_LIB_MASS_MASS
put_addr:
	USING	0
			; SOURCE LINE # 440
; {
			; SOURCE LINE # 441
; 	/* Set xdata as data space */
; 	MEMCON = 0x00;
			; SOURCE LINE # 443
	CLR  	A
	MOV  	MEMCON,A
; #ifdef DEBUG	
;     epl_uart_putint(0);
			; SOURCE LINE # 445
	MOV  	R6,A
	MOV  	R7,A
	LCALL	_?epl_uart_putint
; #endif
;     
; 	/* Set ACK packet SRC address */
; 	rf_buf.buffer[0] = id;
			; SOURCE LINE # 449
	MOV  	DPTR,#rf_buf+01H
	MOV  	A,id
	MOVX 	@DPTR,A
; 	rf_buf.buffer[1] = EXECUTE_SUCCESS;
			; SOURCE LINE # 450
	CLR  	A
	INC  	DPTR
	MOVX 	@DPTR,A
; 	rf_buf.buffer[2] = rf_rx_addr[0];
			; SOURCE LINE # 451
	INC  	DPTR
	MOV  	A,rf_rx_addr
	MOVX 	@DPTR,A
; 	rf_buf.buffer[3] = rf_rx_addr[1];
			; SOURCE LINE # 452
	INC  	DPTR
	MOV  	A,rf_rx_addr+01H
	MOVX 	@DPTR,A
; 	rf_buf.buffer[4] = rf_rx_addr[2];
			; SOURCE LINE # 453
	INC  	DPTR
	MOV  	A,rf_rx_addr+02H
	MOVX 	@DPTR,A
; 
; 	//Cindy - 為什麼是7?
; 	rf_ack_idx = 7;
			; SOURCE LINE # 456
	MOV  	rf_ack_idx,#07H
; 
; 	/* Set xdata as code space */
; 	MEMCON = 0x01;
			; SOURCE LINE # 459
	MOV  	MEMCON,#01H
; }
			; SOURCE LINE # 460
	RET  	
; END OF put_addr

	END
