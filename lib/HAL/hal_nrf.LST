A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     1


MACRO ASSEMBLER A51 V8.01
OBJECT MODULE PLACED IN ../LE1/lib/HAL/hal_nrf.OBJ
ASSEMBLER INVOKED BY: C:\KEIL\C51\BIN\A51.exe ../LE1/lib/HAL/hal_nrf.src

LOC  OBJ            LINE     SOURCE

                       1     ; ../LE1/lib/HAL/hal_nrf.SRC generated from: ../LE1/lib/HAL/hal_nrf.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\KEIL\C51\BIN\C51.exe ../LE1/lib/HAL/hal_nrf.c INCDIR(../LE1/include) BROWSE DEB
                             UG CD SB OMF2 WL(0) PREPRINT SRC
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    ___LE1_LIB_HAL_HAL_NRF
                       8     
  009B                 9     TB80    BIT     098H.3
  00BE                10     SPISSTAT        DATA    0BEH
  00C8                11     T2I0    BIT     0C8H.0
  00C3                12     CCH1    DATA    0C3H
  0080                13     P0      DATA    080H
  00C9                14     T2I1    BIT     0C8H.1
  00DF                15     CCPDATO DATA    0DFH
  00C5                16     CCH2    DATA    0C5H
  0090                17     P1      DATA    090H
  00C7                18     CCH3    DATA    0C7H
  00A0                19     P2      DATA    0A0H
  009D                20     SM20    BIT     098H.5
  00B0                21     P3      DATA    0B0H
  00D6                22     AC      BIT     0D0H.6
  00C2                23     CCL1    DATA    0C2H
  00C4                24     CCL2    DATA    0C4H
  00DF                25     BD      BIT     0D8H.7
  00B8                26     RFSPI   BIT     0B8H.0
  00AF                27     EA      BIT     0A8H.7
  00CC                28     T2      DATA    0CCH
  00C6                29     CCL3    DATA    0C6H
  00B7                30     SPISRDSZ        DATA    0B7H
  00CB                31     T2R0    BIT     0C8H.3
  00CC                32     T2R1    BIT     0C8H.4
  00A8                33     IEN0    DATA    0A8H
  00B8                34     IEN1    DATA    0B8H
  00A5                35     WUCON   DATA    0A5H
  0085                36     DPH1    DATA    085H
  00DB                37     COMPCON DATA    0DBH
  00A3                38     CLKCTRL DATA    0A3H
  0084                39     DPL1    DATA    084H
  00CD                40     I2FR    BIT     0C8H.5
  00BB                41     WUPIN   BIT     0B8H.3
  00CE                42     I3FR    BIT     0C8H.6
  00FF                43     SPIMDAT DATA    0FFH
  00C7                44     EXF2    BIT     0C0H.7
  009C                45     REN0    BIT     098H.4
  00CA                46     T2CM    BIT     0C8H.2
  00B9                47     RF      BIT     0B8H.1
  00BD                48     WUIRQ   BIT     0B8H.5
  00E7                49     SPIRDAT DATA    0E7H
  00C1                50     CCEN    DATA    0C1H
  00E2                51     W2CON0  DATA    0E2H
  00BF                52     SPISDAT DATA    0BFH
  00D7                53     CY      BIT     0D0H.7
  00E1                54     W2CON1  DATA    0E1H
  00FB                55     FDCR    DATA    0FBH
  00E8                56     RFCE    BIT     0E8H.0
  00CB                57     CRCH    DATA    0CBH
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     2

  0081                58     SP      DATA    081H
  00D2                59     OV      BIT     0D0H.2
  00CA                60     CRCL    DATA    0CAH
  00AD                61     CLKLFCTRL       DATA    0ADH
  00B1                62     RSTREAS DATA    0B1H
  00CF                63     T2PS    BIT     0C8H.7
  00F9                64     FPCR    DATA    0F9H
  00BC                65     MISC    BIT     0B8H.4
  00A1                66     PWMDC0  DATA    0A1H
  00B4                67     RTC2CMP0        DATA    0B4H
  00A2                68     PWMDC1  DATA    0A2H
  00B5                69     RTC2CMP1        DATA    0B5H
  0080                70     P00     BIT     080H.0
  00BA                71     S0RELH  DATA    0BAH
  0090                72     P10     BIT     090H.0
  0081                73     P01     BIT     080H.1
  0087                74     PCON    DATA    087H
  00A0                75     P20     BIT     0A0H.0
  0091                76     P11     BIT     090H.1
  0082                77     P02     BIT     080H.2
  00B0                78     P30     BIT     0B0H.0
  00A1                79     P21     BIT     0A0H.1
  0092                80     P12     BIT     090H.2
  0083                81     P03     BIT     080H.3
  00C2                82     SPIF    BIT     0C0H.2
  00FA                83     RDIS    BIT     0F8H.2
  00B1                84     P31     BIT     0B0H.1
  00A2                85     P22     BIT     0A0H.2
  0093                86     P13     BIT     090H.3
  0084                87     P04     BIT     080H.4
  00AA                88     S0RELL  DATA    0AAH
  00B2                89     P32     BIT     0B0H.2
  00A3                90     P23     BIT     0A0H.3
  0094                91     P14     BIT     090H.4
  0085                92     P05     BIT     080H.5
  00D9                93     W2SADR  DATA    0D9H
  0089                94     TMOD    DATA    089H
  0088                95     TCON    DATA    088H
  00B3                96     P33     BIT     0B0H.3
  00A4                97     P24     BIT     0A0H.4
  0095                98     P15     BIT     090H.5
  0086                99     P06     BIT     080H.6
  00B4               100     P34     BIT     0B0H.4
  00A5               101     P25     BIT     0A0H.5
  0096               102     P16     BIT     090H.6
  0087               103     P07     BIT     080H.7
  00C2               104     CC1     DATA    0C2H
  00B5               105     P35     BIT     0B0H.5
  00A6               106     P26     BIT     0A0H.6
  0097               107     P17     BIT     090H.7
  00C4               108     CC2     DATA    0C4H
  00B6               109     P36     BIT     0B0H.6
  00A7               110     P27     BIT     0A0H.7
  00C6               111     CC3     DATA    0C6H
  00B7               112     P37     BIT     0B0H.7
  00EA               113     RFCKEN  BIT     0E8H.2
  00F8               114     WPEN    BIT     0F8H.0
  00DD               115     CCPDATIA        DATA    0DDH
  00DE               116     CCPDATIB        DATA    0DEH
  0089               117     IE0     BIT     088H.1
  00FC               118     RDYN    BIT     0F8H.4
  008B               119     IE1     BIT     088H.3
  00CF               120     WUOPC0  DATA    0CFH
  00F0               121     B       DATA    0F0H
  00E9               122     MD0     DATA    0E9H
  00CE               123     WUOPC1  DATA    0CEH
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     3

  00A7               124     MEMCON  DATA    0A7H
  00EA               125     MD1     DATA    0EAH
  00D7               126     RNGDAT  DATA    0D7H
  00EB               127     MD2     DATA    0EBH
  00EC               128     MD3     DATA    0ECH
  00ED               129     MD4     DATA    0EDH
  00AF               130     WDSV    DATA    0AFH
  00EE               131     MD5     DATA    0EEH
  00E0               132     ACC     DATA    0E0H
  00DC               133     POFCON  DATA    0DCH
  00AC               134     ES0     BIT     0A8H.4
  00A9               135     ET0     BIT     0A8H.1
  00A9               136     IP0     DATA    0A9H
  00AB               137     ET1     BIT     0A8H.3
  008D               138     TF0     BIT     088H.5
  00B9               139     IP1     DATA    0B9H
  00AD               140     ET2     BIT     0A8H.5
  0098               141     RI0     BIT     098H.0
  008F               142     TF1     BIT     088H.7
  00C0               143     RFSPIF  BIT     0C0H.0
  00C6               144     TF2     BIT     0C0H.6
  00FC               145     SPIMCON0        DATA    0FCH
  00D6               146     RNGCTL  DATA    0D6H
  008C               147     TH0     DATA    08CH
  00A8               148     EX0     BIT     0A8H.0
  0099               149     TI0     BIT     098H.1
  0088               150     IT0     BIT     088H.0
  00FD               151     SPIMCON1        DATA    0FDH
  008D               152     TH1     DATA    08DH
  00AA               153     EX1     BIT     0A8H.2
  008A               154     IT1     BIT     088H.2
  00CD               155     TH2     DATA    0CDH
  00AE               156     OPMCON  DATA    0AEH
  00D0               157     P       BIT     0D0H.0
  009F               158     SM0     BIT     098H.7
  008A               159     TL0     DATA    08AH
  009E               160     SM1     BIT     098H.6
  00E4               161     SPIRCON0        DATA    0E4H
  008B               162     TL1     DATA    08BH
  00E5               163     SPIRCON1        DATA    0E5H
  00CC               164     TL2     DATA    0CCH
  00BC               165     SPISCON0        DATA    0BCH
  00BD               166     SPISCON1        DATA    0BDH
  00D3               167     RS0     BIT     0D0H.3
  008C               168     TR0     BIT     088H.4
  00D4               169     RS1     BIT     0D0H.4
  00B2               170     PWMCON  DATA    0B2H
  008E               171     TR1     BIT     088H.6
  00CA               172     CRC     DATA    0CAH
  00A6               173     INTEXP  DATA    0A6H
  00C3               174     WUPINF  BIT     0C0H.3
  00FA               175     FCR     DATA    0FAH
  00D3               176     ADCCON1 DATA    0D3H
  00D2               177     ADCCON2 DATA    0D2H
  0083               178     DPH     DATA    083H
  00D1               179     ADCCON3 DATA    0D1H
  00C1               180     RFF     BIT     0C0H.1
  0093               181     P0DIR   DATA    093H
  0082               182     DPL     DATA    082H
  009E               183     P0CON   DATA    09EH
  0099               184     S0BUF   DATA    099H
  0094               185     P1DIR   DATA    094H
  009F               186     P1CON   DATA    09FH
  0095               187     P2DIR   DATA    095H
  00BF               188     EXEN2   BIT     0B8H.7
  00DA               189     W2DAT   DATA    0DAH
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     4

  0097               190     P2CON   DATA    097H
  0096               191     P3DIR   DATA    096H
  00A4               192     PWRDWN  DATA    0A4H
  0098               193     S0CON   DATA    098H
  008F               194     P3CON   DATA    08FH
  00B6               195     RTC2CPT00       DATA    0B6H
  00D8               196     ADCON   DATA    0D8H
  00AC               197     RTC2CPT10       DATA    0ACH
  00AB               198     RTC2CPT01       DATA    0ABH
  00C8               199     T2CON   DATA    0C8H
  0092               200     DPS     DATA    092H
  00FD               201     WEN     BIT     0F8H.5
  00F8               202     FSR     DATA    0F8H
  00D4               203     ADCDATH DATA    0D4H
  00C9               204     MPAGE   DATA    0C9H
  00BA               205     SPI     BIT     0B8H.2
  00F9               206     RDEND   BIT     0F8H.1
  00D5               207     ADCDATL DATA    0D5H
  00FB               208     INFEN   BIT     0F8H.3
  00FF               209     MCDIS   BIT     0F8H.7
  00C5               210     WUF     BIT     0C0H.5
  00C4               211     MISCF   BIT     0C0H.4
  00EF               212     ARCON   DATA    0EFH
  00D5               213     F0      BIT     0D0H.5
  00FE               214     STP     BIT     0F8H.6
  00FE               215     SPIMSTAT        DATA    0FEH
  00E8               216     RFCON   DATA    0E8H
  00D0               217     PSW     DATA    0D0H
  009A               218     RB80    BIT     098H.2
  00C0               219     IRCON   DATA    0C0H
  00E9               220     RFCSN   BIT     0E8H.1
  00E6               221     SPIRSTAT        DATA    0E6H
  00B3               222     RTC2CON DATA    0B3H
                     223     ?PR?_hal_nrf_set_operation_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     224     ?DT?_hal_nrf_set_operation_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     225     ?PR?_hal_nrf_set_power_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     226     ?DT?_hal_nrf_set_power_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     227     ?PR?_hal_nrf_set_crc_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     228     ?DT?_hal_nrf_set_crc_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     229     ?PR?_hal_nrf_set_irq_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     230     ?DT?_hal_nrf_set_irq_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     231     ?PR?hal_nrf_get_clear_irq_flags?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     232     ?PR?_hal_nrf_clear_irq_flag?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     233     ?PR?hal_nrf_get_irq_flags?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     234     ?PR?_hal_nrf_open_pipe?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     235     ?DT?_hal_nrf_open_pipe?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     236     ?PR?_hal_nrf_close_pipe?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     237     ?DT?_hal_nrf_close_pipe?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     238     ?PR?_hal_nrf_set_address?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     239     ?DT?_hal_nrf_set_address?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     240     ?PR?_hal_nrf_get_address?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     241     ?DT?_hal_nrf_get_address?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     242     ?PR?_hal_nrf_set_auto_retr?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     243     ?DT?_hal_nrf_set_auto_retr?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     244     ?PR?_hal_nrf_set_address_width?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     245     ?DT?_hal_nrf_set_address_width?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     246     ?PR?hal_nrf_get_address_width?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     247     ?PR?_hal_nrf_set_rx_payload_width?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     248     ?PR?_hal_nrf_get_pipe_status?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     249     ?DT?_hal_nrf_get_pipe_status?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     250     ?PR?hal_nrf_get_auto_retr_status?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     251     ?PR?hal_nrf_get_packet_lost_ctr?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     252     ?PR?_hal_nrf_get_rx_payload_width?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     253     ?DT?_hal_nrf_get_rx_payload_width?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     254     ?PR?_hal_nrf_set_rf_channel?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     255     ?DT?_hal_nrf_set_rf_channel?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     5

                     256     ?PR?_hal_nrf_set_output_power?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     257     ?DT?_hal_nrf_set_output_power?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     258     ?PR?_hal_nrf_set_datarate?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     259     ?DT?_hal_nrf_set_datarate?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     260     ?PR?hal_nrf_rx_fifo_empty?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     261     ?PR?hal_nrf_rx_fifo_full?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     262     ?PR?hal_nrf_tx_fifo_empty?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     263     ?PR?hal_nrf_tx_fifo_full?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     264     ?PR?hal_nrf_get_tx_fifo_status?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     265     ?PR?hal_nrf_get_rx_fifo_status?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     266     ?PR?hal_nrf_get_fifo_status?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     267     ?PR?hal_nrf_get_transmit_attempts?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     268     ?PR?hal_nrf_get_carrier_detect?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     269     ?PR?hal_nrf_activate_features?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     270     ?PR?_hal_nrf_setup_dynamic_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     271     ?DT?_hal_nrf_setup_dynamic_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     272     ?PR?_hal_nrf_enable_dynamic_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     273     ?DT?_hal_nrf_enable_dynamic_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     274     ?PR?_hal_nrf_enable_ack_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     275     ?DT?_hal_nrf_enable_ack_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     276     ?PR?_hal_nrf_enable_dynamic_ack?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     277     ?DT?_hal_nrf_enable_dynamic_ack?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     278     ?PR?_hal_nrf_write_tx_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     279     ?PR?_hal_nrf_write_tx_payload_noack?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     280     ?PR?_hal_nrf_write_ack_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     281     ?DT?_hal_nrf_write_ack_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     282     ?PR?hal_nrf_read_rx_payload_width?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     283     ?PR?_hal_nrf_read_rx_payload?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     284     ?PR?hal_nrf_get_rx_data_source?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     285     ?PR?hal_nrf_reuse_tx?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     286     ?PR?hal_nrf_get_reuse_tx_status?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     287     ?PR?hal_nrf_flush_rx?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     288     ?PR?hal_nrf_flush_tx?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     289     ?PR?hal_nrf_nop?___LE1_LIB_HAL_HAL_NRF   SEGMENT CODE 
                     290     ?PR?_hal_nrf_set_pll_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     291     ?DT?_hal_nrf_set_pll_mode?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     292     ?PR?hal_nrf_get_rssi?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     293     ?DT?hal_nrf_get_rssi?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     294     ?PR?_hal_nrf_enable_continious_wave?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     295     ?DT?_hal_nrf_enable_continious_wave?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     296     ?PR?_hal_nrf_read_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     297     ?PR?_hal_nrf_write_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     298     ?DT?_hal_nrf_write_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     299     ?PR?_hal_nrf_read_multibyte_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     300     ?DT?_hal_nrf_read_multibyte_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     301     ?PR?_hal_nrf_write_multibyte_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT CODE 
                     302     ?DT?_hal_nrf_write_multibyte_reg?___LE1_LIB_HAL_HAL_NRF SEGMENT DATA OVERLAYABLE
                     303             EXTRN   CODE (_hal_nrf_rw)
                     304             EXTRN   CODE (?C?CLDPTR)
                     305             EXTRN   CODE (?C?CSTPTR)
                     306             EXTRN   CODE (?C?UIDIV)
                     307             PUBLIC  ?_hal_nrf_write_multibyte_reg?BYTE
                     308             PUBLIC  _hal_nrf_write_multibyte_reg
                     309             PUBLIC  _hal_nrf_read_multibyte_reg
                     310             PUBLIC  _hal_nrf_write_reg
                     311             PUBLIC  _hal_nrf_read_reg
                     312             PUBLIC  _hal_nrf_enable_continious_wave
                     313             PUBLIC  hal_nrf_get_rssi
                     314             PUBLIC  _hal_nrf_set_pll_mode
                     315             PUBLIC  hal_nrf_nop
                     316             PUBLIC  hal_nrf_flush_tx
                     317             PUBLIC  hal_nrf_flush_rx
                     318             PUBLIC  hal_nrf_get_reuse_tx_status
                     319             PUBLIC  hal_nrf_reuse_tx
                     320             PUBLIC  hal_nrf_get_rx_data_source
                     321             PUBLIC  _hal_nrf_read_rx_payload
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     6

                     322             PUBLIC  hal_nrf_read_rx_payload_width
                     323             PUBLIC  ?_hal_nrf_write_ack_payload?BYTE
                     324             PUBLIC  _hal_nrf_write_ack_payload
                     325             PUBLIC  _hal_nrf_write_tx_payload_noack
                     326             PUBLIC  _hal_nrf_write_tx_payload
                     327             PUBLIC  _hal_nrf_enable_dynamic_ack
                     328             PUBLIC  _hal_nrf_enable_ack_payload
                     329             PUBLIC  _hal_nrf_enable_dynamic_payload
                     330             PUBLIC  _hal_nrf_setup_dynamic_payload
                     331             PUBLIC  hal_nrf_activate_features
                     332             PUBLIC  hal_nrf_get_carrier_detect
                     333             PUBLIC  hal_nrf_get_transmit_attempts
                     334             PUBLIC  hal_nrf_get_fifo_status
                     335             PUBLIC  hal_nrf_get_rx_fifo_status
                     336             PUBLIC  hal_nrf_get_tx_fifo_status
                     337             PUBLIC  hal_nrf_tx_fifo_full
                     338             PUBLIC  hal_nrf_tx_fifo_empty
                     339             PUBLIC  hal_nrf_rx_fifo_full
                     340             PUBLIC  hal_nrf_rx_fifo_empty
                     341             PUBLIC  _hal_nrf_set_datarate
                     342             PUBLIC  _hal_nrf_set_output_power
                     343             PUBLIC  _hal_nrf_set_rf_channel
                     344             PUBLIC  _hal_nrf_get_rx_payload_width
                     345             PUBLIC  hal_nrf_get_packet_lost_ctr
                     346             PUBLIC  hal_nrf_get_auto_retr_status
                     347             PUBLIC  _hal_nrf_get_pipe_status
                     348             PUBLIC  _hal_nrf_set_rx_payload_width
                     349             PUBLIC  hal_nrf_get_address_width
                     350             PUBLIC  _hal_nrf_set_address_width
                     351             PUBLIC  _hal_nrf_set_auto_retr
                     352             PUBLIC  _hal_nrf_get_address
                     353             PUBLIC  _hal_nrf_set_address
                     354             PUBLIC  _hal_nrf_close_pipe
                     355             PUBLIC  _hal_nrf_open_pipe
                     356             PUBLIC  hal_nrf_get_irq_flags
                     357             PUBLIC  _hal_nrf_clear_irq_flag
                     358             PUBLIC  hal_nrf_get_clear_irq_flags
                     359             PUBLIC  _hal_nrf_set_irq_mode
                     360             PUBLIC  _hal_nrf_set_crc_mode
                     361             PUBLIC  _hal_nrf_set_power_mode
                     362             PUBLIC  _hal_nrf_set_operation_mode
                     363     
----                 364             RSEG  ?DT?_hal_nrf_set_rf_channel?___LE1_LIB_HAL_HAL_NRF
0000                 365     ?_hal_nrf_set_rf_channel?BYTE:
0000                 366          rf_ch?1977:   DS   1
                     367     
----                 368             RSEG  ?DT?_hal_nrf_open_pipe?___LE1_LIB_HAL_HAL_NRF
0000                 369     ?_hal_nrf_open_pipe?BYTE:
0000                 370        pipe_num?751:   DS   1
0001                 371             ORG  1
0001                 372        auto_ack?752:   DS   1
0002                 373             ORG  2
0002                 374       en_rxaddr?753:   DS   1
0003                 375             ORG  3
0003                 376           en_aa?754:   DS   1
                     377     
----                 378             RSEG  ?DT?_hal_nrf_enable_dynamic_ack?___LE1_LIB_HAL_HAL_NRF
0000                 379     ?_hal_nrf_enable_dynamic_ack?BYTE:
0000                 380         enable?3588:   DS   1
0001                 381             ORG  1
0001                 382        feature?3589:   DS   1
                     383     
----                 384             RSEG  ?DT?_hal_nrf_enable_ack_payload?___LE1_LIB_HAL_HAL_NRF
0000                 385     ?_hal_nrf_enable_ack_payload?BYTE:
0000                 386         enable?3486:   DS   1
0001                 387             ORG  1
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     7

0001                 388        feature?3487:   DS   1
                     389     
----                 390             RSEG  ?DT?_hal_nrf_write_reg?___LE1_LIB_HAL_HAL_NRF
0000                 391     ?_hal_nrf_write_reg?BYTE:
0000                 392         value?51108:   DS   1
0001                 393             ORG  1
0001                 394        retval?51109:   DS   1
                     395     
----                 396             RSEG  ?DT?_hal_nrf_setup_dynamic_payload?___LE1_LIB_HAL_HAL_NRF
0000                 397     ?_hal_nrf_setup_dynamic_payload?BYTE:
0000                 398          dynpd?3283:   DS   1
                     399     
----                 400             RSEG  ?DT?_hal_nrf_get_pipe_status?___LE1_LIB_HAL_HAL_NRF
0000                 401     ?_hal_nrf_get_pipe_status?BYTE:
0000                 402       pipe_num?1569:   DS   1
0001                 403             ORG  1
0001                 404      en_rxaddr?1570:   DS   1
0002                 405             ORG  2
0002                 406          en_aa?1571:   DS   1
0003                 407             ORG  3
0003                 408        en_rx_r?1572:   DS   1
0004                 409             ORG  4
0004                 410        en_aa_r?1573:   DS   1
                     411     
----                 412             RSEG  ?DT?_hal_nrf_get_rx_payload_width?___LE1_LIB_HAL_HAL_NRF
0000                 413     ?_hal_nrf_get_rx_payload_width?BYTE:
0000                 414             pw?1875:   DS   1
                     415     
----                 416             RSEG  ?DT?hal_nrf_get_rssi?___LE1_LIB_HAL_HAL_NRF
0000                 417     ?hal_nrf_get_rssi?BYTE:
0000                 418     agc_config?48101:   DS   3
0003                 419             ORG  3
0003                 420         value?48102:   DS   2
                     421     
----                 422             RSEG  ?DT?_hal_nrf_set_power_mode?___LE1_LIB_HAL_HAL_NRF
0000                 423     ?_hal_nrf_set_power_mode?BYTE:
0000                 424        pwr_mode?142:   DS   1
0001                 425             ORG  1
0001                 426          config?143:   DS   1
                     427     
----                 428             RSEG  ?DT?_hal_nrf_set_crc_mode?___LE1_LIB_HAL_HAL_NRF
0000                 429     ?_hal_nrf_set_crc_mode?BYTE:
0000                 430        crc_mode?244:   DS   1
0001                 431             ORG  1
0001                 432          config?245:   DS   1
                     433     
----                 434             RSEG  ?DT?_hal_nrf_set_output_power?___LE1_LIB_HAL_HAL_NRF
0000                 435     ?_hal_nrf_set_output_power?BYTE:
0000                 436          power?2078:   DS   1
0001                 437             ORG  1
0001                 438       rf_setup?2079:   DS   1
                     439     
----                 440             RSEG  ?DT?_hal_nrf_set_datarate?___LE1_LIB_HAL_HAL_NRF
0000                 441     ?_hal_nrf_set_datarate?BYTE:
0000                 442       datarate?2180:   DS   1
0001                 443             ORG  1
0001                 444       rf_setup?2181:   DS   1
                     445     
----                 446             RSEG  ?DT?_hal_nrf_set_pll_mode?___LE1_LIB_HAL_HAL_NRF
0000                 447     ?_hal_nrf_set_pll_mode?BYTE:
0000                 448       pll_lock?4799:   DS   1
0001                 449             ORG  1
0001                 450      rf_setup?47100:   DS   1
                     451     
----                 452             RSEG  ?DT?_hal_nrf_set_irq_mode?___LE1_LIB_HAL_HAL_NRF
0000                 453     ?_hal_nrf_set_irq_mode?BYTE:
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     8

0000                 454      int_source?346:   DS   1
0001                 455             ORG  1
0001                 456       irq_state?347:   DS   1
0002                 457             ORG  2
0002                 458          config?348:   DS   1
                     459     
----                 460             RSEG  ?DT?_hal_nrf_read_multibyte_reg?___LE1_LIB_HAL_HAL_NRF
0000                 461     ?_hal_nrf_read_multibyte_reg?BYTE:
0000                 462           reg?52110:   DS   1
0001                 463             ORG  1
0001                 464          pbuf?52111:   DS   3
0004                 465             ORG  4
0004                 466           ctr?52112:   DS   1
0005                 467             ORG  5
0005                 468        length?52113:   DS   1
                     469     
----                 470             RSEG  ?DT?_hal_nrf_enable_dynamic_payload?___LE1_LIB_HAL_HAL_NRF
0000                 471     ?_hal_nrf_enable_dynamic_payload?BYTE:
0000                 472         enable?3384:   DS   1
0001                 473             ORG  1
0001                 474        feature?3385:   DS   1
                     475     
----                 476             RSEG  ?DT?_hal_nrf_set_auto_retr?___LE1_LIB_HAL_HAL_NRF
0000                 477     ?_hal_nrf_set_auto_retr?BYTE:
0000                 478     setup_retr?1164:   DS   1
                     479     
----                 480             RSEG  ?DT?_hal_nrf_get_address?___LE1_LIB_HAL_HAL_NRF
0000                 481     ?_hal_nrf_get_address?BYTE:
0000                 482        address?1060:   DS   1
0001                 483             ORG  1
0001                 484           addr?1061:   DS   3
                     485     
----                 486             RSEG  ?DT?_hal_nrf_set_operation_mode?___LE1_LIB_HAL_HAL_NRF
0000                 487     ?_hal_nrf_set_operation_mode?BYTE:
0000                 488         op_mode?040:   DS   1
0001                 489             ORG  1
0001                 490          config?041:   DS   1
                     491     
----                 492             RSEG  ?DT?_hal_nrf_write_ack_payload?___LE1_LIB_HAL_HAL_NRF
0000                 493     ?_hal_nrf_write_ack_payload?BYTE:
0000                 494           pipe?3894:   DS   1
0001                 495       tx_pload?3895:   DS   3
0004                 496             ORG  4
0004                 497         length?3896:   DS   1
                     498     
----                 499             RSEG  ?DT?_hal_nrf_write_multibyte_reg?___LE1_LIB_HAL_HAL_NRF
0000                 500     ?_hal_nrf_write_multibyte_reg?BYTE:
0000                 501           cmd?53114:   DS   1
0001                 502             ORG  1
0001                 503          pbuf?53115:   DS   3
0004                 504             ORG  4
0004                 505        length?53116:   DS   1
                     506     
----                 507             RSEG  ?DT?_hal_nrf_set_address?___LE1_LIB_HAL_HAL_NRF
0000                 508     ?_hal_nrf_set_address?BYTE:
0000                 509         address?958:   DS   1
0001                 510             ORG  1
0001                 511            addr?959:   DS   3
                     512     
----                 513             RSEG  ?DT?_hal_nrf_set_address_width?___LE1_LIB_HAL_HAL_NRF
0000                 514     ?_hal_nrf_set_address_width?BYTE:
0000                 515       setup_aw?1266:   DS   1
                     516     
----                 517             RSEG  ?DT?_hal_nrf_close_pipe?___LE1_LIB_HAL_HAL_NRF
0000                 518     ?_hal_nrf_close_pipe?BYTE:
0000                 519        pipe_num?855:   DS   1
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE     9

0001                 520             ORG  1
0001                 521       en_rxaddr?856:   DS   1
0002                 522             ORG  2
0002                 523           en_aa?857:   DS   1
                     524     
----                 525             RSEG  ?DT?_hal_nrf_enable_continious_wave?___LE1_LIB_HAL_HAL_NRF
0000                 526     ?_hal_nrf_enable_continious_wave?BYTE:
0000                 527        enable?49103:   DS   1
0001                 528             ORG  1
0001                 529      rf_setup?49104:   DS   1
                     530     ; /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
                     531     ;  *
                     532     ;  * The information contained herein is property of Nordic Semiconductor ASA.
                     533     ;  * Terms and conditions of usage are described in detail in NORDIC
                     534     ;  * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
                     535     ;  *
                     536     ;  * Licensees are granted free, non-transferable use of the information. NO
                     537     ;  * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
                     538     ;  * the file.
                     539     ;  *
                     540     ;  * $LastChangedRevision: 4386 $
                     541     ;  */ 
                     542     ; 
                     543     ;  /** @file
                     544     ;   * @brief Implementation of hal_nrf
                     545     ;  */
                     546     ; /*lint -t2 */
                     547     ; /*lint -esym( 534, hal_nrf_write_reg ) */
                     548     ; /*lint -esym( 534, hal_nrf_rw ) */
                     549     ; /*lint -e708 */
                     550     ; /*lint -e46 */
                     551     ; 
                     552     ; #include <stdint.h>
                     553     ; #include <stdbool.h>
                     554     ; 
                     555     ; #include <HAL/nordic_common.h>
                     556     ; #include <HAL/hal_nrf.h>
                     557     ; 
                     558     ; #define SET_BIT(pos) ((unsigned char) (1<<( (unsigned char) (pos) )))
                     559     ; #define UINT8(t) ((unsigned char) (t))
                     560     ; 
                     561     ; /** Basis function read_reg.
                     562     ;  * Use this function to read the contents
                     563     ;  * of one radios register.
                     564     ;  *
                     565     ;  * @param reg Register to read
                     566     ;  * @return Register contents
                     567     ; */
                     568     ; unsigned char hal_nrf_read_reg(unsigned char reg);
                     569     ; 
                     570     ; /** Basis function write_reg.
                     571     ;  * Use this function to write a new value to
                     572     ;  * a radio register.
                     573     ;  *
                     574     ;  * @param reg Register to write
                     575     ;  * @param value New value to write
                     576     ;  * @return Status register
                     577     ; */
                     578     ; unsigned char hal_nrf_write_reg(unsigned char reg, unsigned char value);
                     579     ; 
                     580     ; /** Basis function, read_multibyte register .
                     581     ;  * Use this function to read multiple bytes from
                     582     ;  * a multibyte radio-register
                     583     ;  *
                     584     ;  * @param reg Multibyte register to read from
                     585     ;  * @param *pbuf Pointer to buffer in which to store read bytes to
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    10

                     586     ;  *
                     587     ;  * @return pipe# of received data (MSB), if operation used by a hal_nrf_read_rx_pload
                     588     ;  * @return length of read data (LSB), either for hal_nrf_read_rx_pload or
                     589     ;  * for hal_nrf_get_address.
                     590     ; */
                     591     ; unsigned int hal_nrf_read_multibyte_reg(unsigned char reg, unsigned char *pbuf);
                     592     ; 
                     593     ; /** Basis function, write_multibyte register.
                     594     ;  * Use this function to write multiple bytes to
                     595     ;  * a multiple radio register.
                     596     ;  *
                     597     ;  * @param reg Register to write
                     598     ;  * @param *pbuf pointer to buffer in which data to write is
                     599     ;  * @param length \# of bytes to write
                     600     ; */
                     601     ; void hal_nrf_write_multibyte_reg(unsigned char reg, const unsigned char *pbuf, unsigned c
                             har length);
                     602     ; 
                     603     ; /**
                     604     ;  * Typedef for the CONFIG register. Contains all the bitaddressable 
                     605     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     606     ;  */
                     607     ; typedef union {
                     608     ;   unsigned char value;
                     609     ;       struct {
                     610     ;               unsigned char prim_rx : 1;
                     611     ;               unsigned char pwr_up : 1;
                     612     ;               unsigned char crc0 : 1;
                     613     ;               unsigned char en_crc : 1;
                     614     ;               unsigned char mask_max_rt : 1;
                     615     ;               unsigned char mask_tx_ds : 1;
                     616     ;               unsigned char mask_rx_dr : 1;
                     617     ;               const unsigned char : 1;
                     618     ;       } bits;
                     619     ; } config_t;
                     620     ; 
                     621     ; /**
                     622     ;  * Typedef for the EN_AA, EN_RXADDR and DYNPD registers. Contains all the 
                     623     ;  * bitaddressable settings in the bits struct and the value sent to the radio 
                     624     ;  * in the unsigned char 
                     625     ;  */
                     626     ; typedef union {
                     627     ;   unsigned char value;
                     628     ;   struct {
                     629     ;     unsigned char pipe_0 : 1;
                     630     ;     unsigned char pipe_1 : 1;
                     631     ;     unsigned char pipe_2 : 1;
                     632     ;     unsigned char pipe_3 : 1;
                     633     ;     unsigned char pipe_4 : 1;
                     634     ;     unsigned char pipe_5 : 1;
                     635     ;     const unsigned char : 2;
                     636     ;   } bits;
                     637     ; } en_pipes_t;
                     638     ; 
                     639     ; /**
                     640     ;  * Typedef for the SETUP_AW register. Contains all the bitaddressable 
                     641     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     642     ;  */
                     643     ; typedef union {
                     644     ;   unsigned char value;
                     645     ;       struct {
                     646     ;               unsigned char aw : 2;
                     647     ;               const unsigned char : 6;                
                     648     ;       } bits;
                     649     ; } setup_aw_t;
                     650     ; 
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    11

                     651     ; /**
                     652     ;  * Typedef for the SETUP_RETR register. Contains all the bitaddressable 
                     653     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     654     ;  */
                     655     ; typedef union {
                     656     ;   unsigned char value;
                     657     ;       struct {
                     658     ;               unsigned char arc : 4;
                     659     ;               unsigned char ard : 4;
                     660     ;       } bits;
                     661     ; } setup_retr_t;
                     662     ; 
                     663     ; /**
                     664     ;  * Typedef for the RF_CH register. Contains all the bitaddressable 
                     665     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     666     ;  */
                     667     ; typedef union {
                     668     ;   unsigned char value;
                     669     ;       struct {
                     670     ;               unsigned char rf_ch : 7;
                     671     ;               const unsigned char : 1;
                     672     ;       } bits;
                     673     ; } rf_ch_t;
                     674     ; 
                     675     ; /**
                     676     ;  * Typedef for the RF_SETUP register. Contains all the bitaddressable 
                     677     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     678     ;  */
                     679     ; typedef union {
                     680     ;   unsigned char value;
                     681     ;       struct {
                     682     ;               const unsigned char : 1;
                     683     ;               unsigned char rf_pwr : 2;
                     684     ;               unsigned char rf_dr_high : 1;
                     685     ;               unsigned char pll_lock : 1;
                     686     ;               unsigned char rf_dr_low : 1;
                     687     ;     const unsigned char : 1;
                     688     ;     unsigned char cont_wave : 1;
                     689     ;       } bits;
                     690     ; } rf_setup_t;
                     691     ; 
                     692     ; /**
                     693     ;  * Typedef for the RX_PW_Px registers. Contains all the bitaddressable 
                     694     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     695     ;  */
                     696     ; typedef union {
                     697     ;   unsigned char value;
                     698     ;       struct {
                     699     ;               unsigned char rx_pw : 6;
                     700     ;               const unsigned char : 2;
                     701     ;       } bits;
                     702     ; } rx_pw_t;
                     703     ; 
                     704     ; /**
                     705     ;  * Typedef for the FEATURE register. Contains all the bitaddressable 
                     706     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     707     ;  */
                     708     ; typedef union {
                     709     ;   unsigned char value;
                     710     ;       struct {
                     711     ;               unsigned char en_dyn_ack : 1;
                     712     ;               unsigned char en_ack_pay : 1;
                     713     ;               unsigned char en_dpl : 1;
                     714     ;               const unsigned char : 5;
                     715     ;       } bits;
                     716     ; } feature_t;
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    12

                     717     ; 
                     718     ; /**
                     719     ;  * Typedef for the AGC_CONFIG register. Contains all the bitaddressable 
                     720     ;  * settings in the bits struct and the value sent to the radio in the unsigned char
                     721     ;  */
                     722     ; typedef union {
                     723     ;   unsigned int value;
                     724     ;   struct {
                     725     ;     unsigned char lnb_out : 3;
                     726     ;     unsigned char lnb_in : 3;
                     727     ;     unsigned char agc_en : 1;
                     728     ;     unsigned char agc_th1mbit : 3;
                     729     ;     unsigned char agc_th2mbit : 3;
                     730     ;     unsigned char cd_th : 3;
                     731     ;   } bits;
                     732     ; } agc_config_t;
                     733     ; 
                     734     ; /** Content of the CONFIG register */
                     735     ; //static config_t config;
                     736     ; /** Content of the EN_AA register */
                     737     ; //static en_pipes_t en_aa;
                     738     ; /** Content of the EN_RXADDR register */
                     739     ; //static en_pipes_t en_rxaddr;
                     740     ; /** Content of the SETUP_AW register */
                     741     ; //static setup_aw_t setup_aw;
                     742     ; /** Content of the SETUP_RETR register */
                     743     ; //static setup_retr_t setup_retr;
                     744     ; /** Content of the RF_CH register */
                     745     ; //static rf_ch_t rf_ch;
                     746     ; /** Content of the RF_SETUP register */
                     747     ; //static rf_setup_t rf_setup;
                     748     ; /** Content of the RX_PW_P0 register */
                     749     ; //static rx_pw_t rx_pw_px;
                     750     ; /** Content of the DYNPD register */
                     751     ; //static en_pipes_t dynpd;
                     752     ; /** Content of the FEATURE register */
                     753     ; //static feature_t feature;
                     754     ; /** Content of the AGC_CONFIG register */
                     755     ; //static agc_config_t agc_config;
                     756     ; 
                     757     ; void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
                     758     
----                 759             RSEG  ?PR?_hal_nrf_set_operation_mode?___LE1_LIB_HAL_HAL_NRF
0000                 760     _hal_nrf_set_operation_mode:
                     761             USING   0
                     762                             ; SOURCE LINE # 228
0000 8F00     F      763             MOV     op_mode?040,R7
                     764     ; {
                     765                             ; SOURCE LINE # 229
                     766     ;   config_t config;
                     767     ;   config.value = hal_nrf_read_reg (CONFIG);
                     768                             ; SOURCE LINE # 231
0002 E4              769             CLR     A
0003 FF              770             MOV     R7,A
0004 120000   F      771             LCALL   _hal_nrf_read_reg
0007 8F00     F      772             MOV     config?041,R7
                     773     ; 
                     774     ;   if(op_mode == HAL_NRF_PRX)
                     775                             ; SOURCE LINE # 233
0009 E500     F      776             MOV     A,op_mode?040
000B AF00     F      777             MOV     R7,config?041
000D B40107          778             CJNE    A,#01H,?C0001
                     779     ;   {
                     780                             ; SOURCE LINE # 234
                     781     ;     config.bits.prim_rx = 1;
                     782                             ; SOURCE LINE # 235
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    13

0010 EF              783             MOV     A,R7
0011 4401            784             ORL     A,#01H
0013 F500     F      785             MOV     config?041,A
                     786     ;   }
                     787                             ; SOURCE LINE # 236
0015 8005            788             SJMP    ?C0002
0017                 789     ?C0001:
                     790     ;   else
                     791     ;   {
                     792                             ; SOURCE LINE # 238
                     793     ;     config.bits.prim_rx = 0;
                     794                             ; SOURCE LINE # 239
0017 EF              795             MOV     A,R7
0018 54FE            796             ANL     A,#0FEH
001A F500     F      797             MOV     config?041,A
                     798     ;   }
                     799                             ; SOURCE LINE # 240
001C                 800     ?C0002:
                     801     ; 
                     802     ;   hal_nrf_write_reg (CONFIG, config.value);
                     803                             ; SOURCE LINE # 242
001C AD00     F      804             MOV     R5,config?041
001E E4              805             CLR     A
001F FF              806             MOV     R7,A
0020 020000   F      807             LJMP    _hal_nrf_write_reg
                     808     ; END OF _hal_nrf_set_operation_mode
                     809     
                     810     ; }
                     811     ; 
                     812     ; void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
                     813     
----                 814             RSEG  ?PR?_hal_nrf_set_power_mode?___LE1_LIB_HAL_HAL_NRF
0000                 815     _hal_nrf_set_power_mode:
                     816             USING   0
                     817                             ; SOURCE LINE # 245
0000 8F00     F      818             MOV     pwr_mode?142,R7
                     819     ; {
                     820                             ; SOURCE LINE # 246
                     821     ;   config_t config;
                     822     ;   config.value = hal_nrf_read_reg (CONFIG);
                     823                             ; SOURCE LINE # 248
0002 E4              824             CLR     A
0003 FF              825             MOV     R7,A
0004 120000   F      826             LCALL   _hal_nrf_read_reg
0007 8F00     F      827             MOV     config?143,R7
                     828     ; 
                     829     ;   if(pwr_mode == HAL_NRF_PWR_UP)
                     830                             ; SOURCE LINE # 250
0009 E500     F      831             MOV     A,pwr_mode?142
000B AF00     F      832             MOV     R7,config?143
000D B40107          833             CJNE    A,#01H,?C0004
                     834     ;   {
                     835                             ; SOURCE LINE # 251
                     836     ;     config.bits.pwr_up = 1;
                     837                             ; SOURCE LINE # 252
0010 EF              838             MOV     A,R7
0011 4402            839             ORL     A,#02H
0013 F500     F      840             MOV     config?143,A
                     841     ;   }
                     842                             ; SOURCE LINE # 253
0015 8005            843             SJMP    ?C0005
0017                 844     ?C0004:
                     845     ;   else
                     846     ;   {
                     847                             ; SOURCE LINE # 255
                     848     ;     config.bits.pwr_up = 0;
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    14

                     849                             ; SOURCE LINE # 256
0017 EF              850             MOV     A,R7
0018 54FD            851             ANL     A,#0FDH
001A F500     F      852             MOV     config?143,A
                     853     ;   }
                     854                             ; SOURCE LINE # 257
001C                 855     ?C0005:
                     856     ;   
                     857     ;   hal_nrf_write_reg (CONFIG, config.value);
                     858                             ; SOURCE LINE # 259
001C AD00     F      859             MOV     R5,config?143
001E E4              860             CLR     A
001F FF              861             MOV     R7,A
0020 020000   F      862             LJMP    _hal_nrf_write_reg
                     863     ; END OF _hal_nrf_set_power_mode
                     864     
                     865     ; }
                     866     ; 
                     867     ; void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
                     868     
----                 869             RSEG  ?PR?_hal_nrf_set_crc_mode?___LE1_LIB_HAL_HAL_NRF
0000                 870     _hal_nrf_set_crc_mode:
                     871             USING   0
                     872                             ; SOURCE LINE # 262
0000 8F00     F      873             MOV     crc_mode?244,R7
                     874     ; {
                     875                             ; SOURCE LINE # 263
                     876     ;   config_t config;
                     877     ;   config.value = hal_nrf_read_reg (CONFIG);
                     878                             ; SOURCE LINE # 265
0002 E4              879             CLR     A
0003 FF              880             MOV     R7,A
0004 120000   F      881             LCALL   _hal_nrf_read_reg
0007 8F00     F      882             MOV     config?245,R7
                     883     ; 
                     884     ;       switch (crc_mode)
                     885                             ; SOURCE LINE # 267
0009 E500     F      886             MOV     A,crc_mode?244
000B 14              887             DEC     A
000C 6010            888             JZ      ?C0009
000E 14              889             DEC     A
000F 601D            890             JZ      ?C0010
0011 2402            891             ADD     A,#02H
0013 7027            892             JNZ     ?C0007
                     893     ;       {
                     894                             ; SOURCE LINE # 268
                     895     ;               case HAL_NRF_CRC_OFF:
                     896                             ; SOURCE LINE # 269
0015                 897     ?C0008:
                     898     ;                       config.bits.en_crc = 0;
                     899                             ; SOURCE LINE # 270
0015 AF00     F      900             MOV     R7,config?245
0017 EF              901             MOV     A,R7
0018 54F7            902             ANL     A,#0F7H
001A F500     F      903             MOV     config?245,A
                     904     ;                       break;
                     905                             ; SOURCE LINE # 271
001C 801E            906             SJMP    ?C0007
                     907     ;               case HAL_NRF_CRC_8BIT:
                     908                             ; SOURCE LINE # 272
001E                 909     ?C0009:
                     910     ;                       config.bits.en_crc = 1;
                     911                             ; SOURCE LINE # 273
001E AF00     F      912             MOV     R7,config?245
0020 EF              913             MOV     A,R7
0021 4408            914             ORL     A,#08H
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    15

0023 F500     F      915             MOV     config?245,A
                     916     ;                       config.bits.crc0 = 0;
                     917                             ; SOURCE LINE # 274
0025 AF00     F      918             MOV     R7,config?245
0027 EF              919             MOV     A,R7
0028 54FB            920             ANL     A,#0FBH
002A F500     F      921             MOV     config?245,A
                     922     ;                       break;
                     923                             ; SOURCE LINE # 275
002C 800E            924             SJMP    ?C0007
                     925     ;               case HAL_NRF_CRC_16BIT:
                     926                             ; SOURCE LINE # 276
002E                 927     ?C0010:
                     928     ;                       config.bits.en_crc = 1;
                     929                             ; SOURCE LINE # 277
002E AF00     F      930             MOV     R7,config?245
0030 EF              931             MOV     A,R7
0031 4408            932             ORL     A,#08H
0033 F500     F      933             MOV     config?245,A
                     934     ;                       config.bits.crc0 = 1;
                     935                             ; SOURCE LINE # 278
0035 AF00     F      936             MOV     R7,config?245
0037 EF              937             MOV     A,R7
0038 4404            938             ORL     A,#04H
003A F500     F      939             MOV     config?245,A
                     940     ;                       break;
                     941                             ; SOURCE LINE # 279
                     942     ;               default:
                     943                             ; SOURCE LINE # 280
                     944     ;                       break;
                     945                             ; SOURCE LINE # 281
                     946     ;       } 
                     947                             ; SOURCE LINE # 282
003C                 948     ?C0007:
                     949     ; 
                     950     ;   hal_nrf_write_reg (CONFIG, config.value);
                     951                             ; SOURCE LINE # 284
003C AD00     F      952             MOV     R5,config?245
003E E4              953             CLR     A
003F FF              954             MOV     R7,A
0040 020000   F      955             LJMP    _hal_nrf_write_reg
                     956     ; END OF _hal_nrf_set_crc_mode
                     957     
                     958     ; }
                     959     ; 
                     960     ; void hal_nrf_set_irq_mode(hal_nrf_irq_source_t int_source, unsigned char irq_state)
                     961     
----                 962             RSEG  ?PR?_hal_nrf_set_irq_mode?___LE1_LIB_HAL_HAL_NRF
0000                 963     _hal_nrf_set_irq_mode:
                     964             USING   0
                     965                             ; SOURCE LINE # 287
0000 8F00     F      966             MOV     int_source?346,R7
0002 8D00     F      967             MOV     irq_state?347,R5
                     968     ; {
                     969                             ; SOURCE LINE # 288
                     970     ;   config_t config;
                     971     ;   config.value = hal_nrf_read_reg (CONFIG);
                     972                             ; SOURCE LINE # 290
0004 E4              973             CLR     A
0005 FF              974             MOV     R7,A
0006 120000   F      975             LCALL   _hal_nrf_read_reg
0009 8F00     F      976             MOV     config?348,R7
                     977     ; 
                     978     ;       switch (int_source)
                     979                             ; SOURCE LINE # 292
000B E500     F      980             MOV     A,int_source?346
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    16

000D 24FB            981             ADD     A,#0FBH
000F 601D            982             JZ      ?C0017
0011 14              983             DEC     A
0012 6031            984             JZ      ?C0020
0014 2402            985             ADD     A,#02H
0016 7046            986             JNZ     ?C0013
                     987     ;       {
                     988                             ; SOURCE LINE # 293
                     989     ;               case HAL_NRF_MAX_RT:
                     990                             ; SOURCE LINE # 294
0018                 991     ?C0014:
                     992     ;                       config.bits.mask_max_rt = irq_state ? 0 : 1;
                     993                             ; SOURCE LINE # 295
0018 E500     F      994             MOV     A,irq_state?347
001A 7F01            995             MOV     R7,#01H
001C 6002            996             JZ      ?C0015
001E 7F00            997             MOV     R7,#00H
0020                 998     ?C0015:
0020                 999     ?C0016:
0020 EF             1000             MOV     A,R7
0021 5401           1001             ANL     A,#01H
0023 C4             1002             SWAP    A
0024 54F0           1003             ANL     A,#0F0H
0026 FF             1004             MOV     R7,A
0027 AE00     F     1005             MOV     R6,config?348
0029 EE             1006             MOV     A,R6
002A 54EF           1007             ANL     A,#0EFH
                    1008     ;       break;
                    1009                             ; SOURCE LINE # 296
002C 802D           1010             SJMP    ?C0219
                    1011     ;     case HAL_NRF_TX_DS:
                    1012                             ; SOURCE LINE # 297
002E                1013     ?C0017:
                    1014     ;       config.bits.mask_tx_ds = irq_state ? 0 : 1;
                    1015                             ; SOURCE LINE # 298
002E E500     F     1016             MOV     A,irq_state?347
0030 7F01           1017             MOV     R7,#01H
0032 6002           1018             JZ      ?C0018
0034 7F00           1019             MOV     R7,#00H
0036                1020     ?C0018:
0036                1021     ?C0019:
0036 EF             1022             MOV     A,R7
0037 5401           1023             ANL     A,#01H
0039 C4             1024             SWAP    A
003A 33             1025             RLC     A
003B 54E0           1026             ANL     A,#0E0H
003D FF             1027             MOV     R7,A
003E AE00     F     1028             MOV     R6,config?348
0040 EE             1029             MOV     A,R6
0041 54DF           1030             ANL     A,#0DFH
0043                1031     ?C0218:
                    1032     ;       break;
                    1033                             ; SOURCE LINE # 299
0043 8016           1034             SJMP    ?C0219
                    1035     ;     case HAL_NRF_RX_DR:
                    1036                             ; SOURCE LINE # 300
0045                1037     ?C0020:
                    1038     ;       config.bits.mask_rx_dr = irq_state ? 0 : 1;
                    1039                             ; SOURCE LINE # 301
0045 E500     F     1040             MOV     A,irq_state?347
0047 7F01           1041             MOV     R7,#01H
0049 6002           1042             JZ      ?C0021
004B 7F00           1043             MOV     R7,#00H
004D                1044     ?C0021:
004D                1045     ?C0022:
004D EF             1046             MOV     A,R7
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    17

004E 5401           1047             ANL     A,#01H
0050 C4             1048             SWAP    A
0051 33             1049             RLC     A
0052 33             1050             RLC     A
0053 54C0           1051             ANL     A,#0C0H
0055 FF             1052             MOV     R7,A
0056 AE00     F     1053             MOV     R6,config?348
0058 EE             1054             MOV     A,R6
0059 54BF           1055             ANL     A,#0BFH
005B                1056     ?C0219:
005B 4F             1057             ORL     A,R7
005C F500     F     1058             MOV     config?348,A
                    1059     ;       break;
                    1060                             ; SOURCE LINE # 302
                    1061     ;   }
                    1062                             ; SOURCE LINE # 303
005E                1063     ?C0013:
                    1064     ;   
                    1065     ;   hal_nrf_write_reg (CONFIG, config.value);
                    1066                             ; SOURCE LINE # 305
005E AD00     F     1067             MOV     R5,config?348
0060 E4             1068             CLR     A
0061 FF             1069             MOV     R7,A
0062 020000   F     1070             LJMP    _hal_nrf_write_reg
                    1071     ; END OF _hal_nrf_set_irq_mode
                    1072     
                    1073     ; }
                    1074     ; 
                    1075     ; unsigned char hal_nrf_get_clear_irq_flags(void)
                    1076     
----                1077             RSEG  ?PR?hal_nrf_get_clear_irq_flags?___LE1_LIB_HAL_HAL_NRF
0000                1078     hal_nrf_get_clear_irq_flags:
                    1079             USING   0
                    1080                             ; SOURCE LINE # 308
                    1081     ; {
                    1082                             ; SOURCE LINE # 309
                    1083     ;   unsigned char retval;
                    1084     ;   
                    1085     ;   retval = hal_nrf_write_reg (STATUS, (BIT_6|BIT_5|BIT_4));
                    1086                             ; SOURCE LINE # 312
0000 7D70           1087             MOV     R5,#070H
0002 7F07           1088             MOV     R7,#07H
0004 120000   F     1089             LCALL   _hal_nrf_write_reg
                    1090     ;---- Variable 'retval?449' assigned to Register 'R7' ----
                    1091     ; 
                    1092     ;   return (retval & (BIT_6|BIT_5|BIT_4));
                    1093                             ; SOURCE LINE # 314
0007 EF             1094             MOV     A,R7
0008 5470           1095             ANL     A,#070H
000A FF             1096             MOV     R7,A
                    1097     ; }
                    1098                             ; SOURCE LINE # 315
000B                1099     ?C0024:
000B 22             1100             RET     
                    1101     ; END OF hal_nrf_get_clear_irq_flags
                    1102     
                    1103     ; 
                    1104     ; void hal_nrf_clear_irq_flag(hal_nrf_irq_source_t int_source)
                    1105     
----                1106             RSEG  ?PR?_hal_nrf_clear_irq_flag?___LE1_LIB_HAL_HAL_NRF
0000                1107     _hal_nrf_clear_irq_flag:
                    1108             USING   0
                    1109                             ; SOURCE LINE # 317
                    1110     ;---- Variable 'int_source?550' assigned to Register 'R7' ----
                    1111     ; {
                    1112                             ; SOURCE LINE # 318
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    18

                    1113     ;   hal_nrf_write_reg (STATUS, SET_BIT(int_source));
                    1114                             ; SOURCE LINE # 319
0000 7401           1115             MOV     A,#01H
0002 A807           1116             MOV     R0,AR7
0004 08             1117             INC     R0
0005 8002           1118             SJMP    ?C0211
0007                1119     ?C0210:
0007 C3             1120             CLR     C
0008 33             1121             RLC     A
0009                1122     ?C0211:
0009 D8FC           1123             DJNZ    R0,?C0210
000B FD             1124             MOV     R5,A
000C 7F07           1125             MOV     R7,#07H
000E 020000   F     1126             LJMP    _hal_nrf_write_reg
                    1127     ; END OF _hal_nrf_clear_irq_flag
                    1128     
                    1129     ; }
                    1130     ; 
                    1131     ; unsigned char hal_nrf_get_irq_flags(void)
                    1132     
----                1133             RSEG  ?PR?hal_nrf_get_irq_flags?___LE1_LIB_HAL_HAL_NRF
0000                1134     hal_nrf_get_irq_flags:
                    1135             USING   0
                    1136                             ; SOURCE LINE # 322
                    1137     ; {
                    1138                             ; SOURCE LINE # 323
                    1139     ;   return hal_nrf_nop() & (BIT_6|BIT_5|BIT_4);
                    1140                             ; SOURCE LINE # 324
0000 120000   F     1141             LCALL   hal_nrf_nop
0003 EF             1142             MOV     A,R7
0004 5470           1143             ANL     A,#070H
0006 FF             1144             MOV     R7,A
                    1145     ; }
                    1146                             ; SOURCE LINE # 325
0007                1147     ?C0026:
0007 22             1148             RET     
                    1149     ; END OF hal_nrf_get_irq_flags
                    1150     
                    1151     ; 
                    1152     ; void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, unsigned char auto_ack)
                    1153     
----                1154             RSEG  ?PR?_hal_nrf_open_pipe?___LE1_LIB_HAL_HAL_NRF
0000                1155     _hal_nrf_open_pipe:
                    1156             USING   0
                    1157                             ; SOURCE LINE # 327
0000 8F00     F     1158             MOV     pipe_num?751,R7
0002 8D00     F     1159             MOV     auto_ack?752,R5
                    1160     ; {
                    1161                             ; SOURCE LINE # 328
                    1162     ;   en_pipes_t en_rxaddr;
                    1163     ;   en_pipes_t en_aa;
                    1164     ;   en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
                    1165                             ; SOURCE LINE # 331
0004 7F02           1166             MOV     R7,#02H
0006 120000   F     1167             LCALL   _hal_nrf_read_reg
0009 8F00     F     1168             MOV     en_rxaddr?753,R7
                    1169     ;   en_aa.value = hal_nrf_read_reg (EN_AA);
                    1170                             ; SOURCE LINE # 332
000B 7F01           1171             MOV     R7,#01H
000D 120000   F     1172             LCALL   _hal_nrf_read_reg
0010 8F00     F     1173             MOV     en_aa?754,R7
                    1174     ; 
                    1175     ;   switch(pipe_num)
                    1176                             ; SOURCE LINE # 334
0012 E500     F     1177             MOV     A,pipe_num?751
0014 24FA           1178             ADD     A,#0FAH
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    19

0016 5006           1179             JNC     ?C0033
0018 2407           1180             ADD     A,#07H
001A 6021           1181             JZ      ?C0036
001C 802E           1182             SJMP    ?C0027
                    1183     ;   {
                    1184                             ; SOURCE LINE # 335
                    1185     ;     case HAL_NRF_PIPE0:
                    1186                             ; SOURCE LINE # 336
                    1187     ;     case HAL_NRF_PIPE1:
                    1188                             ; SOURCE LINE # 337
                    1189     ;     case HAL_NRF_PIPE2:
                    1190                             ; SOURCE LINE # 338
                    1191     ;     case HAL_NRF_PIPE3:
                    1192                             ; SOURCE LINE # 339
                    1193     ;     case HAL_NRF_PIPE4:
                    1194                             ; SOURCE LINE # 340
                    1195     ;     case HAL_NRF_PIPE5:
                    1196                             ; SOURCE LINE # 341
001E                1197     ?C0033:
                    1198     ;       en_rxaddr.value = en_rxaddr.value | SET_BIT(pipe_num);
                    1199                             ; SOURCE LINE # 342
001E AF00     F     1200             MOV     R7,pipe_num?751
0020 7401           1201             MOV     A,#01H
0022 A807           1202             MOV     R0,AR7
0024 08             1203             INC     R0
0025 8002           1204             SJMP    ?C0213
0027                1205     ?C0212:
0027 C3             1206             CLR     C
0028 33             1207             RLC     A
0029                1208     ?C0213:
0029 D8FC           1209             DJNZ    R0,?C0212
002B FF             1210             MOV     R7,A
002C 4200     F     1211             ORL     en_rxaddr?753,A
                    1212     ; 
                    1213     ;       if(auto_ack)
                    1214                             ; SOURCE LINE # 344
002E E500     F     1215             MOV     A,auto_ack?752
0030 6005           1216             JZ      ?C0034
                    1217     ;       {
                    1218                             ; SOURCE LINE # 345
                    1219     ;         en_aa.value = en_aa.value | SET_BIT(pipe_num);
                    1220                             ; SOURCE LINE # 346
0032 EF             1221             MOV     A,R7
0033 4200     F     1222             ORL     en_aa?754,A
                    1223     ;       }
                    1224                             ; SOURCE LINE # 347
0035 8015           1225             SJMP    ?C0027
0037                1226     ?C0034:
                    1227     ;       else
                    1228     ;       {
                    1229                             ; SOURCE LINE # 349
                    1230     ;         en_aa.value = en_aa.value & ~SET_BIT(pipe_num);
                    1231                             ; SOURCE LINE # 350
0037 EF             1232             MOV     A,R7
0038 F4             1233             CPL     A
0039 5200     F     1234             ANL     en_aa?754,A
                    1235     ;       }
                    1236                             ; SOURCE LINE # 351
                    1237     ;       break;
                    1238                             ; SOURCE LINE # 352
003B 800F           1239             SJMP    ?C0027
                    1240     ; 
                    1241     ;     case HAL_NRF_ALL:
                    1242                             ; SOURCE LINE # 354
003D                1243     ?C0036:
                    1244     ;       en_rxaddr.value = ~(BIT_6|BIT_7);
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    20

                    1245                             ; SOURCE LINE # 355
003D 75003F   F     1246             MOV     en_rxaddr?753,#03FH
                    1247     ;       
                    1248     ;       if(auto_ack)
                    1249                             ; SOURCE LINE # 357
0040 E500     F     1250             MOV     A,auto_ack?752
0042 6005           1251             JZ      ?C0037
                    1252     ;       {
                    1253                             ; SOURCE LINE # 358
                    1254     ;         en_aa.value = ~(BIT_6|BIT_7);
                    1255                             ; SOURCE LINE # 359
0044 75003F   F     1256             MOV     en_aa?754,#03FH
                    1257     ;       }
                    1258                             ; SOURCE LINE # 360
0047 8003           1259             SJMP    ?C0027
0049                1260     ?C0037:
                    1261     ;       else
                    1262     ;       {
                    1263                             ; SOURCE LINE # 362
                    1264     ;         en_aa.value = 0;
                    1265                             ; SOURCE LINE # 363
0049 E4             1266             CLR     A
004A F500     F     1267             MOV     en_aa?754,A
                    1268     ;       }
                    1269                             ; SOURCE LINE # 364
                    1270     ;       break;
                    1271                             ; SOURCE LINE # 365
                    1272     ;       
                    1273     ;     default:
                    1274                             ; SOURCE LINE # 367
                    1275     ;       break;
                    1276                             ; SOURCE LINE # 368
                    1277     ;   }
                    1278                             ; SOURCE LINE # 369
004C                1279     ?C0027:
                    1280     ; 
                    1281     ;   hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
                    1282                             ; SOURCE LINE # 371
004C AD00     F     1283             MOV     R5,en_rxaddr?753
004E 7F02           1284             MOV     R7,#02H
0050 120000   F     1285             LCALL   _hal_nrf_write_reg
                    1286     ;   hal_nrf_write_reg (EN_AA, en_aa.value);
                    1287                             ; SOURCE LINE # 372
0053 AD00     F     1288             MOV     R5,en_aa?754
0055 7F01           1289             MOV     R7,#01H
0057 020000   F     1290             LJMP    _hal_nrf_write_reg
                    1291     ; END OF _hal_nrf_open_pipe
                    1292     
                    1293     ; }
                    1294     ; 
                    1295     ; void hal_nrf_close_pipe(hal_nrf_address_t pipe_num)
                    1296     
----                1297             RSEG  ?PR?_hal_nrf_close_pipe?___LE1_LIB_HAL_HAL_NRF
0000                1298     _hal_nrf_close_pipe:
                    1299             USING   0
                    1300                             ; SOURCE LINE # 375
0000 8F00     F     1301             MOV     pipe_num?855,R7
                    1302     ; {
                    1303                             ; SOURCE LINE # 376
                    1304     ;   en_pipes_t en_rxaddr;
                    1305     ;   en_pipes_t en_aa;
                    1306     ;   en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
                    1307                             ; SOURCE LINE # 379
0002 7F02           1308             MOV     R7,#02H
0004 120000   F     1309             LCALL   _hal_nrf_read_reg
0007 8F00     F     1310             MOV     en_rxaddr?856,R7
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    21

                    1311     ;   en_aa.value = hal_nrf_read_reg (EN_AA);
                    1312                             ; SOURCE LINE # 380
0009 7F01           1313             MOV     R7,#01H
000B 120000   F     1314             LCALL   _hal_nrf_read_reg
000E 8F00     F     1315             MOV     en_aa?857,R7
                    1316     ; 
                    1317     ;   switch(pipe_num)
                    1318                             ; SOURCE LINE # 382
0010 E500     F     1319             MOV     A,pipe_num?855
0012 24FA           1320             ADD     A,#0FAH
0014 5006           1321             JNC     ?C0047
0016 2407           1322             ADD     A,#07H
0018 6016           1323             JZ      ?C0048
001A 8019           1324             SJMP    ?C0041
                    1325     ;   {
                    1326                             ; SOURCE LINE # 383
                    1327     ;     case HAL_NRF_PIPE0:
                    1328                             ; SOURCE LINE # 384
                    1329     ;     case HAL_NRF_PIPE1:
                    1330                             ; SOURCE LINE # 385
                    1331     ;     case HAL_NRF_PIPE2:
                    1332                             ; SOURCE LINE # 386
                    1333     ;     case HAL_NRF_PIPE3:
                    1334                             ; SOURCE LINE # 387
                    1335     ;     case HAL_NRF_PIPE4:
                    1336                             ; SOURCE LINE # 388
                    1337     ;     case HAL_NRF_PIPE5:
                    1338                             ; SOURCE LINE # 389
001C                1339     ?C0047:
                    1340     ;       en_rxaddr.value = en_rxaddr.value & ~SET_BIT(pipe_num);
                    1341                             ; SOURCE LINE # 390
001C AF00     F     1342             MOV     R7,pipe_num?855
001E 7401           1343             MOV     A,#01H
0020 A807           1344             MOV     R0,AR7
0022 08             1345             INC     R0
0023 8002           1346             SJMP    ?C0215
0025                1347     ?C0214:
0025 C3             1348             CLR     C
0026 33             1349             RLC     A
0027                1350     ?C0215:
0027 D8FC           1351             DJNZ    R0,?C0214
0029 F4             1352             CPL     A
002A 5200     F     1353             ANL     en_rxaddr?856,A
                    1354     ;       en_aa.value = en_aa.value & ~SET_BIT(pipe_num);
                    1355                             ; SOURCE LINE # 391
002C 5200     F     1356             ANL     en_aa?857,A
                    1357     ;       break;
                    1358                             ; SOURCE LINE # 392
002E 8005           1359             SJMP    ?C0041
                    1360     ;     
                    1361     ;     case HAL_NRF_ALL:
                    1362                             ; SOURCE LINE # 394
0030                1363     ?C0048:
                    1364     ;       en_rxaddr.value = 0;
                    1365                             ; SOURCE LINE # 395
0030 E4             1366             CLR     A
0031 F500     F     1367             MOV     en_rxaddr?856,A
                    1368     ;       en_aa.value = 0;
                    1369                             ; SOURCE LINE # 396
0033 F500     F     1370             MOV     en_aa?857,A
                    1371     ;       break;
                    1372                             ; SOURCE LINE # 397
                    1373     ;       
                    1374     ;     default:
                    1375                             ; SOURCE LINE # 399
                    1376     ;       break;
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    22

                    1377                             ; SOURCE LINE # 400
                    1378     ;   }
                    1379                             ; SOURCE LINE # 401
0035                1380     ?C0041:
                    1381     ; 
                    1382     ;   hal_nrf_write_reg (EN_RXADDR, en_rxaddr.value);
                    1383                             ; SOURCE LINE # 403
0035 AD00     F     1384             MOV     R5,en_rxaddr?856
0037 7F02           1385             MOV     R7,#02H
0039 120000   F     1386             LCALL   _hal_nrf_write_reg
                    1387     ;   hal_nrf_write_reg (EN_AA, en_aa.value);
                    1388                             ; SOURCE LINE # 404
003C AD00     F     1389             MOV     R5,en_aa?857
003E 7F01           1390             MOV     R7,#01H
0040 020000   F     1391             LJMP    _hal_nrf_write_reg
                    1392     ; END OF _hal_nrf_close_pipe
                    1393     
                    1394     ; }
                    1395     ; 
                    1396     ; void hal_nrf_set_address(const hal_nrf_address_t address, const unsigned char *addr)
                    1397     
----                1398             RSEG  ?PR?_hal_nrf_set_address?___LE1_LIB_HAL_HAL_NRF
0000                1399     _hal_nrf_set_address:
                    1400             USING   0
                    1401                             ; SOURCE LINE # 407
0000 8F00     F     1402             MOV     address?958,R7
0002 8B00     F     1403             MOV     addr?959,R3
0004 8A00     F     1404             MOV     addr?959+01H,R2
0006 8900     F     1405             MOV     addr?959+02H,R1
                    1406     ; {
                    1407                             ; SOURCE LINE # 408
                    1408     ;   switch(address)
                    1409                             ; SOURCE LINE # 409
0008 E500     F     1410             MOV     A,address?958
000A 14             1411             DEC     A
000B 600A           1412             JZ      ?C0054
000D 24FB           1413             ADD     A,#0FBH
000F 5019           1414             JNC     ?C0058
0011 6004           1415             JZ      ?C0054
0013 2406           1416             ADD     A,#06H
0015 7025           1417             JNZ     ?C0060
                    1418     ;   {
                    1419                             ; SOURCE LINE # 410
                    1420     ;     case HAL_NRF_TX:
                    1421                             ; SOURCE LINE # 411
                    1422     ;     case HAL_NRF_PIPE0:
                    1423                             ; SOURCE LINE # 412
                    1424     ;     case HAL_NRF_PIPE1:
                    1425                             ; SOURCE LINE # 413
0017                1426     ?C0054:
                    1427     ;       hal_nrf_write_multibyte_reg(W_REGISTER + RX_ADDR_P0 + (unsigned char) address, addr
                             , hal_nrf_get_address_width());
                    1428                             ; SOURCE LINE # 414
0017 120000   F     1429             LCALL   hal_nrf_get_address_width
001A 8F00     F     1430             MOV     ?_hal_nrf_write_multibyte_reg?BYTE+04H,R7
001C E500     F     1431             MOV     A,address?958
001E 242A           1432             ADD     A,#02AH
0020 FF             1433             MOV     R7,A
0021 AB00     F     1434             MOV     R3,addr?959
0023 AA00     F     1435             MOV     R2,addr?959+01H
0025 A900     F     1436             MOV     R1,addr?959+02H
0027 020000   F     1437             LJMP    _hal_nrf_write_multibyte_reg
                    1438     ;       break;
                    1439                             ; SOURCE LINE # 415
                    1440     ;     case HAL_NRF_PIPE2:
                    1441                             ; SOURCE LINE # 416
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    23

                    1442     ;     case HAL_NRF_PIPE3:
                    1443                             ; SOURCE LINE # 417
                    1444     ;     case HAL_NRF_PIPE4:
                    1445                             ; SOURCE LINE # 418
                    1446     ;     case HAL_NRF_PIPE5:
                    1447                             ; SOURCE LINE # 419
002A                1448     ?C0058:
                    1449     ;       hal_nrf_write_reg (RX_ADDR_P0 + (unsigned char) address, *addr);
                    1450                             ; SOURCE LINE # 420
002A E500     F     1451             MOV     A,address?958
002C 240A           1452             ADD     A,#0AH
002E FF             1453             MOV     R7,A
002F AB00     F     1454             MOV     R3,addr?959
0031 AA00     F     1455             MOV     R2,addr?959+01H
0033 A900     F     1456             MOV     R1,addr?959+02H
0035 120000   F     1457             LCALL   ?C?CLDPTR
0038 FD             1458             MOV     R5,A
0039 120000   F     1459             LCALL   _hal_nrf_write_reg
                    1460     ;       break;
                    1461                             ; SOURCE LINE # 421
                    1462     ; 
                    1463     ;     default:
                    1464                             ; SOURCE LINE # 423
                    1465     ;       break;
                    1466                             ; SOURCE LINE # 424
                    1467     ;   }
                    1468                             ; SOURCE LINE # 425
                    1469     ; }
                    1470                             ; SOURCE LINE # 426
003C                1471     ?C0060:
003C 22             1472             RET     
                    1473     ; END OF _hal_nrf_set_address
                    1474     
                    1475     ; 
                    1476     ; unsigned char hal_nrf_get_address(unsigned char address, unsigned char *addr)
                    1477     
----                1478             RSEG  ?PR?_hal_nrf_get_address?___LE1_LIB_HAL_HAL_NRF
0000                1479     _hal_nrf_get_address:
                    1480             USING   0
                    1481                             ; SOURCE LINE # 428
0000 8F00     F     1482             MOV     address?1060,R7
0002 8B00     F     1483             MOV     addr?1061,R3
0004 8A00     F     1484             MOV     addr?1061+01H,R2
0006 8900     F     1485             MOV     addr?1061+02H,R1
                    1486     ; {
                    1487                             ; SOURCE LINE # 429
                    1488     ;   switch (address)
                    1489                             ; SOURCE LINE # 430
0008 E500     F     1490             MOV     A,address?1060
000A 14             1491             DEC     A
000B 6008           1492             JZ      ?C0064
000D 24FB           1493             ADD     A,#0FBH
000F 6004           1494             JZ      ?C0064
0011 2406           1495             ADD     A,#06H
0013 700B           1496             JNZ     ?C0066
                    1497     ;   {
                    1498                             ; SOURCE LINE # 431
                    1499     ;     case HAL_NRF_PIPE0:
                    1500                             ; SOURCE LINE # 432
                    1501     ;     case HAL_NRF_PIPE1:
                    1502                             ; SOURCE LINE # 433
                    1503     ;     case HAL_NRF_TX:
                    1504                             ; SOURCE LINE # 434
0015                1505     ?C0064:
                    1506     ;       return hal_nrf_read_multibyte_reg (address, addr);
                    1507                             ; SOURCE LINE # 435
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    24

0015 AB00     F     1508             MOV     R3,addr?1061
0017 AA00     F     1509             MOV     R2,addr?1061+01H
0019 A900     F     1510             MOV     R1,addr?1061+02H
001B AF00     F     1511             MOV     R7,address?1060
001D 020000   F     1512             LJMP    _hal_nrf_read_multibyte_reg
                    1513     ;     default:
                    1514                             ; SOURCE LINE # 436
0020                1515     ?C0066:
                    1516     ;       *addr = hal_nrf_read_reg(RX_ADDR_P0 + address);
                    1517                             ; SOURCE LINE # 437
0020 E500     F     1518             MOV     A,address?1060
0022 240A           1519             ADD     A,#0AH
0024 FF             1520             MOV     R7,A
0025 120000   F     1521             LCALL   _hal_nrf_read_reg
0028 AB00     F     1522             MOV     R3,addr?1061
002A AA00     F     1523             MOV     R2,addr?1061+01H
002C A900     F     1524             MOV     R1,addr?1061+02H
002E EF             1525             MOV     A,R7
002F 120000   F     1526             LCALL   ?C?CSTPTR
                    1527     ;       return 1;
                    1528                             ; SOURCE LINE # 438
0032 7F01           1529             MOV     R7,#01H
                    1530     ;   }
                    1531                             ; SOURCE LINE # 439
                    1532     ; }
                    1533                             ; SOURCE LINE # 440
0034                1534     ?C0065:
0034 22             1535             RET     
                    1536     ; END OF _hal_nrf_get_address
                    1537     
                    1538     ; 
                    1539     ; void hal_nrf_set_auto_retr(unsigned char retr, unsigned int delay)
                    1540     
----                1541             RSEG  ?PR?_hal_nrf_set_auto_retr?___LE1_LIB_HAL_HAL_NRF
0000                1542     _hal_nrf_set_auto_retr:
                    1543             USING   0
                    1544                             ; SOURCE LINE # 442
                    1545     ;---- Variable 'delay?1163' assigned to Register 'R4/R5' ----
                    1546     ;---- Variable 'retr?1162' assigned to Register 'R3' ----
0000 AB07           1547             MOV     R3,AR7
                    1548     ; {
                    1549                             ; SOURCE LINE # 443
                    1550     ;   setup_retr_t setup_retr;
                    1551     ;   setup_retr.bits.ard = (delay / 250) - 1;
                    1552                             ; SOURCE LINE # 445
0002 AE04           1553             MOV     R6,AR4
0004 AF05           1554             MOV     R7,AR5
0006 7C00           1555             MOV     R4,#00H
0008 7DFA           1556             MOV     R5,#0FAH
000A 120000   F     1557             LCALL   ?C?UIDIV
000D EF             1558             MOV     A,R7
000E 14             1559             DEC     A
000F 540F           1560             ANL     A,#0FH
0011 C4             1561             SWAP    A
0012 54F0           1562             ANL     A,#0F0H
0014 FF             1563             MOV     R7,A
0015 AE00     F     1564             MOV     R6,setup_retr?1164
0017 EE             1565             MOV     A,R6
0018 540F           1566             ANL     A,#0FH
001A 4F             1567             ORL     A,R7
001B F500     F     1568             MOV     setup_retr?1164,A
                    1569     ;   setup_retr.bits.arc = retr;
                    1570                             ; SOURCE LINE # 446
001D EB             1571             MOV     A,R3
001E 540F           1572             ANL     A,#0FH
0020 FF             1573             MOV     R7,A
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    25

0021 AE00     F     1574             MOV     R6,setup_retr?1164
0023 EE             1575             MOV     A,R6
0024 54F0           1576             ANL     A,#0F0H
0026 4F             1577             ORL     A,R7
0027 F500     F     1578             MOV     setup_retr?1164,A
                    1579     ; 
                    1580     ;   hal_nrf_write_reg (SETUP_RETR, setup_retr.value);
                    1581                             ; SOURCE LINE # 448
0029 AD00     F     1582             MOV     R5,setup_retr?1164
002B 7F04           1583             MOV     R7,#04H
002D 020000   F     1584             LJMP    _hal_nrf_write_reg
                    1585     ; END OF _hal_nrf_set_auto_retr
                    1586     
                    1587     ; }
                    1588     ; 
                    1589     ; void hal_nrf_set_address_width(hal_nrf_address_width_t aw)
                    1590     
----                1591             RSEG  ?PR?_hal_nrf_set_address_width?___LE1_LIB_HAL_HAL_NRF
0000                1592     _hal_nrf_set_address_width:
                    1593             USING   0
                    1594                             ; SOURCE LINE # 451
                    1595     ;---- Variable 'aw?1265' assigned to Register 'R7' ----
                    1596     ; {
                    1597                             ; SOURCE LINE # 452
                    1598     ;   setup_aw_t setup_aw;
                    1599     ;   setup_aw.bits.aw = (unsigned char)aw - 2;
                    1600                             ; SOURCE LINE # 454
0000 EF             1601             MOV     A,R7
0001 24FE           1602             ADD     A,#0FEH
0003 5403           1603             ANL     A,#03H
0005 FF             1604             MOV     R7,A
0006 AE00     F     1605             MOV     R6,setup_aw?1266
0008 EE             1606             MOV     A,R6
0009 54FC           1607             ANL     A,#0FCH
000B 4F             1608             ORL     A,R7
000C F500     F     1609             MOV     setup_aw?1266,A
                    1610     ; 
                    1611     ;   hal_nrf_write_reg (SETUP_AW, setup_aw.value);
                    1612                             ; SOURCE LINE # 456
000E AD00     F     1613             MOV     R5,setup_aw?1266
0010 7F03           1614             MOV     R7,#03H
0012 020000   F     1615             LJMP    _hal_nrf_write_reg
                    1616     ; END OF _hal_nrf_set_address_width
                    1617     
                    1618     ; }
                    1619     ; 
                    1620     ; unsigned char hal_nrf_get_address_width (void)
                    1621     
----                1622             RSEG  ?PR?hal_nrf_get_address_width?___LE1_LIB_HAL_HAL_NRF
0000                1623     hal_nrf_get_address_width:
                    1624             USING   0
                    1625                             ; SOURCE LINE # 459
                    1626     ; {
                    1627                             ; SOURCE LINE # 460
                    1628     ;   return hal_nrf_read_reg (SETUP_AW) + 2;
                    1629                             ; SOURCE LINE # 461
0000 7F03           1630             MOV     R7,#03H
0002 120000   F     1631             LCALL   _hal_nrf_read_reg
0005 EF             1632             MOV     A,R7
0006 2402           1633             ADD     A,#02H
0008 FF             1634             MOV     R7,A
                    1635     ; }
                    1636                             ; SOURCE LINE # 462
0009                1637     ?C0069:
0009 22             1638             RET     
                    1639     ; END OF hal_nrf_get_address_width
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    26

                    1640     
                    1641     ; 
                    1642     ; void hal_nrf_set_rx_payload_width(unsigned char pipe_num, unsigned char pload_width)
                    1643     
----                1644             RSEG  ?PR?_hal_nrf_set_rx_payload_width?___LE1_LIB_HAL_HAL_NRF
0000                1645     _hal_nrf_set_rx_payload_width:
                    1646             USING   0
                    1647                             ; SOURCE LINE # 464
                    1648     ;---- Variable 'pload_width?1468' assigned to Register 'R5' ----
                    1649     ;---- Variable 'pipe_num?1467' assigned to Register 'R7' ----
                    1650     ; {
                    1651                             ; SOURCE LINE # 465
                    1652     ;   hal_nrf_write_reg (RX_PW_P0 + pipe_num, pload_width);
                    1653                             ; SOURCE LINE # 466
0000 EF             1654             MOV     A,R7
0001 2411           1655             ADD     A,#011H
0003 FF             1656             MOV     R7,A
0004 020000   F     1657             LJMP    _hal_nrf_write_reg
                    1658     ; END OF _hal_nrf_set_rx_payload_width
                    1659     
                    1660     ; }
                    1661     ; 
                    1662     ; unsigned char hal_nrf_get_pipe_status(unsigned char pipe_num)
                    1663     
----                1664             RSEG  ?PR?_hal_nrf_get_pipe_status?___LE1_LIB_HAL_HAL_NRF
0000                1665     _hal_nrf_get_pipe_status:
                    1666             USING   0
                    1667                             ; SOURCE LINE # 469
0000 8F00     F     1668             MOV     pipe_num?1569,R7
                    1669     ; {
                    1670                             ; SOURCE LINE # 470
                    1671     ;   en_pipes_t en_rxaddr;
                    1672     ;   en_pipes_t en_aa;
                    1673     ;   unsigned char en_rx_r, en_aa_r;
                    1674     ;   
                    1675     ;   en_rxaddr.value = hal_nrf_read_reg (EN_RXADDR);
                    1676                             ; SOURCE LINE # 475
0002 7F02           1677             MOV     R7,#02H
0004 120000   F     1678             LCALL   _hal_nrf_read_reg
0007 8F00     F     1679             MOV     en_rxaddr?1570,R7
                    1680     ;   en_aa.value = hal_nrf_read_reg (EN_AA);
                    1681                             ; SOURCE LINE # 476
0009 7F01           1682             MOV     R7,#01H
000B 120000   F     1683             LCALL   _hal_nrf_read_reg
000E 8F00     F     1684             MOV     en_aa?1571,R7
                    1685     ; 
                    1686     ;   switch (pipe_num)
                    1687                             ; SOURCE LINE # 478
0010 E500     F     1688             MOV     A,pipe_num?1569
0012 14             1689             DEC     A
0013 601C           1690             JZ      ?C0073
0015 14             1691             DEC     A
0016 6029           1692             JZ      ?C0074
0018 14             1693             DEC     A
0019 6036           1694             JZ      ?C0075
001B 14             1695             DEC     A
001C 6045           1696             JZ      ?C0076
001E 14             1697             DEC     A
001F 6050           1698             JZ      ?C0077
0021 2405           1699             ADD     A,#05H
0023 7060           1700             JNZ     ?C0078
                    1701     ;   {
                    1702                             ; SOURCE LINE # 479
                    1703     ;     case 0:
                    1704                             ; SOURCE LINE # 480
0025                1705     ?C0072:
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    27

                    1706     ;       en_rx_r = en_rxaddr.bits.pipe_0;
                    1707                             ; SOURCE LINE # 481
0025 AF00     F     1708             MOV     R7,en_rxaddr?1570
0027 EF             1709             MOV     A,R7
0028 5401           1710             ANL     A,#01H
002A F500     F     1711             MOV     en_rx_r?1572,A
                    1712     ;       en_aa_r = en_aa.bits.pipe_0;
                    1713                             ; SOURCE LINE # 482
002C AF00     F     1714             MOV     R7,en_aa?1571
002E EF             1715             MOV     A,R7
                    1716     ;       break;
                    1717                             ; SOURCE LINE # 483
002F 804E           1718             SJMP    ?C0224
                    1719     ;     case 1:
                    1720                             ; SOURCE LINE # 484
0031                1721     ?C0073:
                    1722     ;       en_rx_r = en_rxaddr.bits.pipe_1;
                    1723                             ; SOURCE LINE # 485
0031 AF00     F     1724             MOV     R7,en_rxaddr?1570
0033 EF             1725             MOV     A,R7
0034 C3             1726             CLR     C
0035 13             1727             RRC     A
0036 5401           1728             ANL     A,#01H
0038 F500     F     1729             MOV     en_rx_r?1572,A
                    1730     ;       en_aa_r = en_aa.bits.pipe_1;
                    1731                             ; SOURCE LINE # 486
003A AF00     F     1732             MOV     R7,en_aa?1571
003C EF             1733             MOV     A,R7
003D C3             1734             CLR     C
003E 13             1735             RRC     A
003F                1736     ?C0220:
                    1737     ;       break;
                    1738                             ; SOURCE LINE # 487
003F 803E           1739             SJMP    ?C0224
                    1740     ;     case 2:
                    1741                             ; SOURCE LINE # 488
0041                1742     ?C0074:
                    1743     ;       en_rx_r = en_rxaddr.bits.pipe_2;
                    1744                             ; SOURCE LINE # 489
0041 AF00     F     1745             MOV     R7,en_rxaddr?1570
0043 EF             1746             MOV     A,R7
0044 13             1747             RRC     A
0045 13             1748             RRC     A
0046 5401           1749             ANL     A,#01H
0048 F500     F     1750             MOV     en_rx_r?1572,A
                    1751     ;       en_aa_r = en_aa.bits.pipe_2;
                    1752                             ; SOURCE LINE # 490
004A AF00     F     1753             MOV     R7,en_aa?1571
004C EF             1754             MOV     A,R7
004D 13             1755             RRC     A
004E 13             1756             RRC     A
004F                1757     ?C0221:
                    1758     ;       break;
                    1759                             ; SOURCE LINE # 491
004F 802E           1760             SJMP    ?C0224
                    1761     ;     case 3:
                    1762                             ; SOURCE LINE # 492
0051                1763     ?C0075:
                    1764     ;       en_rx_r = en_rxaddr.bits.pipe_3;
                    1765                             ; SOURCE LINE # 493
0051 AF00     F     1766             MOV     R7,en_rxaddr?1570
0053 EF             1767             MOV     A,R7
0054 13             1768             RRC     A
0055 13             1769             RRC     A
0056 13             1770             RRC     A
0057 5401           1771             ANL     A,#01H
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    28

0059 F500     F     1772             MOV     en_rx_r?1572,A
                    1773     ;       en_aa_r = en_aa.bits.pipe_3;
                    1774                             ; SOURCE LINE # 494
005B AF00     F     1775             MOV     R7,en_aa?1571
005D EF             1776             MOV     A,R7
005E 13             1777             RRC     A
005F 13             1778             RRC     A
0060 13             1779             RRC     A
0061                1780     ?C0222:
                    1781     ;       break;
                    1782                             ; SOURCE LINE # 495
0061 801C           1783             SJMP    ?C0224
                    1784     ;     case 4:
                    1785                             ; SOURCE LINE # 496
0063                1786     ?C0076:
                    1787     ;       en_rx_r = en_rxaddr.bits.pipe_4;
                    1788                             ; SOURCE LINE # 497
0063 AF00     F     1789             MOV     R7,en_rxaddr?1570
0065 EF             1790             MOV     A,R7
0066 C4             1791             SWAP    A
0067 5401           1792             ANL     A,#01H
0069 F500     F     1793             MOV     en_rx_r?1572,A
                    1794     ;       en_aa_r = en_aa.bits.pipe_4;
                    1795                             ; SOURCE LINE # 498
006B AF00     F     1796             MOV     R7,en_aa?1571
006D EF             1797             MOV     A,R7
006E C4             1798             SWAP    A
006F                1799     ?C0223:
                    1800     ;       break;
                    1801                             ; SOURCE LINE # 499
006F 800E           1802             SJMP    ?C0224
                    1803     ;     case 5:
                    1804                             ; SOURCE LINE # 500
0071                1805     ?C0077:
                    1806     ;       en_rx_r = en_rxaddr.bits.pipe_5;
                    1807                             ; SOURCE LINE # 501
0071 AF00     F     1808             MOV     R7,en_rxaddr?1570
0073 EF             1809             MOV     A,R7
0074 C4             1810             SWAP    A
0075 13             1811             RRC     A
0076 5401           1812             ANL     A,#01H
0078 F500     F     1813             MOV     en_rx_r?1572,A
                    1814     ;       en_aa_r = en_aa.bits.pipe_5;
                    1815                             ; SOURCE LINE # 502
007A AF00     F     1816             MOV     R7,en_aa?1571
007C EF             1817             MOV     A,R7
007D C4             1818             SWAP    A
007E 13             1819             RRC     A
007F                1820     ?C0224:
007F 5401           1821             ANL     A,#01H
0081 F500     F     1822             MOV     en_aa_r?1573,A
                    1823     ;       break;
                    1824                             ; SOURCE LINE # 503
0083 8005           1825             SJMP    ?C0071
                    1826     ;     default:
                    1827                             ; SOURCE LINE # 504
0085                1828     ?C0078:
                    1829     ;       en_rx_r = 0;
                    1830                             ; SOURCE LINE # 505
0085 E4             1831             CLR     A
0086 F500     F     1832             MOV     en_rx_r?1572,A
                    1833     ;       en_aa_r = 0;
                    1834                             ; SOURCE LINE # 506
0088 F500     F     1835             MOV     en_aa_r?1573,A
                    1836     ;       break;
                    1837                             ; SOURCE LINE # 507
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    29

                    1838     ;   }
                    1839                             ; SOURCE LINE # 508
008A                1840     ?C0071:
                    1841     ;   
                    1842     ;   return (unsigned char)(en_aa_r << 1) + en_rx_r;
                    1843                             ; SOURCE LINE # 510
008A E500     F     1844             MOV     A,en_aa_r?1573
008C 25E0           1845             ADD     A,ACC
008E 2500     F     1846             ADD     A,en_rx_r?1572
0090 FF             1847             MOV     R7,A
                    1848     ; }
                    1849                             ; SOURCE LINE # 511
0091                1850     ?C0079:
0091 22             1851             RET     
                    1852     ; END OF _hal_nrf_get_pipe_status
                    1853     
                    1854     ; 
                    1855     ; 
                    1856     ; unsigned char hal_nrf_get_auto_retr_status(void)
                    1857     
----                1858             RSEG  ?PR?hal_nrf_get_auto_retr_status?___LE1_LIB_HAL_HAL_NRF
0000                1859     hal_nrf_get_auto_retr_status:
                    1860             USING   0
                    1861                             ; SOURCE LINE # 514
                    1862     ; {
                    1863                             ; SOURCE LINE # 515
                    1864     ;   return hal_nrf_read_reg(OBSERVE_TX);
                    1865                             ; SOURCE LINE # 516
0000 7F08           1866             MOV     R7,#08H
0002 120000   F     1867             LCALL   _hal_nrf_read_reg
                    1868     ; }
                    1869                             ; SOURCE LINE # 517
0005                1870     ?C0080:
0005 22             1871             RET     
                    1872     ; END OF hal_nrf_get_auto_retr_status
                    1873     
                    1874     ; 
                    1875     ; unsigned char hal_nrf_get_packet_lost_ctr(void)
                    1876     
----                1877             RSEG  ?PR?hal_nrf_get_packet_lost_ctr?___LE1_LIB_HAL_HAL_NRF
0000                1878     hal_nrf_get_packet_lost_ctr:
                    1879             USING   0
                    1880                             ; SOURCE LINE # 519
                    1881     ; {
                    1882                             ; SOURCE LINE # 520
                    1883     ;   return ((hal_nrf_read_reg(OBSERVE_TX) & (BIT_7|BIT_6|BIT_5|BIT_4)) >> 4);
                    1884                             ; SOURCE LINE # 521
0000 7F08           1885             MOV     R7,#08H
0002 120000   F     1886             LCALL   _hal_nrf_read_reg
0005 EF             1887             MOV     A,R7
0006 54F0           1888             ANL     A,#0F0H
0008 C4             1889             SWAP    A
0009 540F           1890             ANL     A,#0FH
000B FF             1891             MOV     R7,A
                    1892     ; }
                    1893                             ; SOURCE LINE # 522
000C                1894     ?C0081:
000C 22             1895             RET     
                    1896     ; END OF hal_nrf_get_packet_lost_ctr
                    1897     
                    1898     ; 
                    1899     ; unsigned char hal_nrf_get_rx_payload_width(unsigned char pipe_num)
                    1900     
----                1901             RSEG  ?PR?_hal_nrf_get_rx_payload_width?___LE1_LIB_HAL_HAL_NRF
0000                1902     _hal_nrf_get_rx_payload_width:
                    1903             USING   0
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    30

                    1904                             ; SOURCE LINE # 524
                    1905     ;---- Variable 'pipe_num?1874' assigned to Register 'R7' ----
                    1906     ; {
                    1907                             ; SOURCE LINE # 525
                    1908     ;   unsigned char pw;
                    1909     ; 
                    1910     ;   switch (pipe_num)
                    1911                             ; SOURCE LINE # 528
0000 EF             1912             MOV     A,R7
0001 14             1913             DEC     A
0002 6014           1914             JZ      ?C0084
0004 14             1915             DEC     A
0005 6015           1916             JZ      ?C0085
0007 14             1917             DEC     A
0008 6016           1918             JZ      ?C0086
000A 14             1919             DEC     A
000B 6017           1920             JZ      ?C0087
000D 14             1921             DEC     A
000E 6018           1922             JZ      ?C0088
0010 2405           1923             ADD     A,#05H
0012 701D           1924             JNZ     ?C0089
                    1925     ;   {
                    1926                             ; SOURCE LINE # 529
                    1927     ;     case 0:
                    1928                             ; SOURCE LINE # 530
0014                1929     ?C0083:
                    1930     ;       pw = hal_nrf_read_reg (RX_PW_P0);
                    1931                             ; SOURCE LINE # 531
0014 7F11           1932             MOV     R7,#011H
                    1933     ;       break;      
                    1934                             ; SOURCE LINE # 532
0016 8012           1935             SJMP    ?C0229
                    1936     ;     case 1:
                    1937                             ; SOURCE LINE # 533
0018                1938     ?C0084:
                    1939     ;       pw = hal_nrf_read_reg (RX_PW_P1);
                    1940                             ; SOURCE LINE # 534
0018 7F12           1941             MOV     R7,#012H
001A                1942     ?C0225:
                    1943     ;       break;
                    1944                             ; SOURCE LINE # 535
001A 800E           1945             SJMP    ?C0229
                    1946     ;     case 2:
                    1947                             ; SOURCE LINE # 536
001C                1948     ?C0085:
                    1949     ;       pw = hal_nrf_read_reg (RX_PW_P2);
                    1950                             ; SOURCE LINE # 537
001C 7F13           1951             MOV     R7,#013H
001E                1952     ?C0226:
                    1953     ;       break;
                    1954                             ; SOURCE LINE # 538
001E 800A           1955             SJMP    ?C0229
                    1956     ;     case 3:
                    1957                             ; SOURCE LINE # 539
0020                1958     ?C0086:
                    1959     ;       pw = hal_nrf_read_reg (RX_PW_P3);
                    1960                             ; SOURCE LINE # 540
0020 7F14           1961             MOV     R7,#014H
0022                1962     ?C0227:
                    1963     ;       break;
                    1964                             ; SOURCE LINE # 541
0022 8006           1965             SJMP    ?C0229
                    1966     ;     case 4:
                    1967                             ; SOURCE LINE # 542
0024                1968     ?C0087:
                    1969     ;       pw = hal_nrf_read_reg (RX_PW_P4);
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    31

                    1970                             ; SOURCE LINE # 543
0024 7F15           1971             MOV     R7,#015H
0026                1972     ?C0228:
                    1973     ;       break;
                    1974                             ; SOURCE LINE # 544
0026 8002           1975             SJMP    ?C0229
                    1976     ;     case 5:
                    1977                             ; SOURCE LINE # 545
0028                1978     ?C0088:
                    1979     ;       pw = hal_nrf_read_reg (RX_PW_P5);
                    1980                             ; SOURCE LINE # 546
0028 7F16           1981             MOV     R7,#016H
002A                1982     ?C0229:
002A 120000   F     1983             LCALL   _hal_nrf_read_reg
002D 8F00     F     1984             MOV     pw?1875,R7
                    1985     ;       break;
                    1986                             ; SOURCE LINE # 547
002F 8003           1987             SJMP    ?C0082
                    1988     ;     default:
                    1989                             ; SOURCE LINE # 548
0031                1990     ?C0089:
                    1991     ;       pw = 0;
                    1992                             ; SOURCE LINE # 549
0031 E4             1993             CLR     A
0032 F500     F     1994             MOV     pw?1875,A
                    1995     ;       break;
                    1996                             ; SOURCE LINE # 550
                    1997     ;   }
                    1998                             ; SOURCE LINE # 551
0034                1999     ?C0082:
                    2000     ; 
                    2001     ;   return pw;
                    2002                             ; SOURCE LINE # 553
0034 AF00     F     2003             MOV     R7,pw?1875
                    2004     ; }
                    2005                             ; SOURCE LINE # 554
0036                2006     ?C0090:
0036 22             2007             RET     
                    2008     ; END OF _hal_nrf_get_rx_payload_width
                    2009     
                    2010     ; 
                    2011     ; void hal_nrf_set_rf_channel(unsigned char channel)
                    2012     
----                2013             RSEG  ?PR?_hal_nrf_set_rf_channel?___LE1_LIB_HAL_HAL_NRF
0000                2014     _hal_nrf_set_rf_channel:
                    2015             USING   0
                    2016                             ; SOURCE LINE # 556
                    2017     ;---- Variable 'channel?1976' assigned to Register 'R7' ----
                    2018     ; {
                    2019                             ; SOURCE LINE # 557
                    2020     ;   rf_ch_t rf_ch;
                    2021     ;   rf_ch.bits.rf_ch = channel;
                    2022                             ; SOURCE LINE # 559
0000 EF             2023             MOV     A,R7
0001 547F           2024             ANL     A,#07FH
0003 FF             2025             MOV     R7,A
0004 AE00     F     2026             MOV     R6,rf_ch?1977
0006 EE             2027             MOV     A,R6
0007 5480           2028             ANL     A,#080H
0009 4F             2029             ORL     A,R7
000A F500     F     2030             MOV     rf_ch?1977,A
                    2031     ;   
                    2032     ;   hal_nrf_write_reg (RF_CH, rf_ch.value);
                    2033                             ; SOURCE LINE # 561
000C AD00     F     2034             MOV     R5,rf_ch?1977
000E 7F05           2035             MOV     R7,#05H
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    32

0010 020000   F     2036             LJMP    _hal_nrf_write_reg
                    2037     ; END OF _hal_nrf_set_rf_channel
                    2038     
                    2039     ; }
                    2040     ; 
                    2041     ; void hal_nrf_set_output_power(hal_nrf_output_power_t power)
                    2042     
----                2043             RSEG  ?PR?_hal_nrf_set_output_power?___LE1_LIB_HAL_HAL_NRF
0000                2044     _hal_nrf_set_output_power:
                    2045             USING   0
                    2046                             ; SOURCE LINE # 564
0000 8F00     F     2047             MOV     power?2078,R7
                    2048     ; {
                    2049                             ; SOURCE LINE # 565
                    2050     ;   rf_setup_t rf_setup;
                    2051     ;   rf_setup.value = hal_nrf_read_reg (RF_SETUP);
                    2052                             ; SOURCE LINE # 567
0002 7F06           2053             MOV     R7,#06H
0004 120000   F     2054             LCALL   _hal_nrf_read_reg
0007 8F00     F     2055             MOV     rf_setup?2079,R7
                    2056     ; 
                    2057     ;   rf_setup.bits.rf_pwr = (unsigned char)power;
                    2058                             ; SOURCE LINE # 569
0009 E500     F     2059             MOV     A,power?2078
000B 5403           2060             ANL     A,#03H
000D 25E0           2061             ADD     A,ACC
000F FF             2062             MOV     R7,A
0010 AE00     F     2063             MOV     R6,rf_setup?2079
0012 EE             2064             MOV     A,R6
0013 54F9           2065             ANL     A,#0F9H
0015 4F             2066             ORL     A,R7
0016 F500     F     2067             MOV     rf_setup?2079,A
                    2068     ;   
                    2069     ;   hal_nrf_write_reg (RF_SETUP, rf_setup.value);
                    2070                             ; SOURCE LINE # 571
0018 AD00     F     2071             MOV     R5,rf_setup?2079
001A 7F06           2072             MOV     R7,#06H
001C 020000   F     2073             LJMP    _hal_nrf_write_reg
                    2074     ; END OF _hal_nrf_set_output_power
                    2075     
                    2076     ; }
                    2077     ; 
                    2078     ; void hal_nrf_set_datarate(hal_nrf_datarate_t datarate)
                    2079     
----                2080             RSEG  ?PR?_hal_nrf_set_datarate?___LE1_LIB_HAL_HAL_NRF
0000                2081     _hal_nrf_set_datarate:
                    2082             USING   0
                    2083                             ; SOURCE LINE # 574
0000 8F00     F     2084             MOV     datarate?2180,R7
                    2085     ; {
                    2086                             ; SOURCE LINE # 575
                    2087     ;   rf_setup_t rf_setup;
                    2088     ;   rf_setup.value = hal_nrf_read_reg (RF_SETUP);
                    2089                             ; SOURCE LINE # 577
0002 7F06           2090             MOV     R7,#06H
0004 120000   F     2091             LCALL   _hal_nrf_read_reg
0007 8F00     F     2092             MOV     rf_setup?2181,R7
                    2093     ;   
                    2094     ;   switch (datarate)
                    2095                             ; SOURCE LINE # 579
0009 E500     F     2096             MOV     A,datarate?2180
000B 600B           2097             JZ      ?C0095
000D 24FE           2098             ADD     A,#0FEH
000F 7017           2099             JNZ     ?C0097
                    2100     ;   {
                    2101                             ; SOURCE LINE # 580
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    33

                    2102     ;     case HAL_NRF_250KBPS:
                    2103                             ; SOURCE LINE # 581
0011                2104     ?C0094:
                    2105     ;       rf_setup.bits.rf_dr_low = 1;
                    2106                             ; SOURCE LINE # 582
0011 AF00     F     2107             MOV     R7,rf_setup?2181
0013 EF             2108             MOV     A,R7
0014 4420           2109             ORL     A,#020H
                    2110     ;       rf_setup.bits.rf_dr_high = 0;
                    2111                             ; SOURCE LINE # 583
                    2112     ;       break;
                    2113                             ; SOURCE LINE # 584
0016 8005           2114             SJMP    ?C0230
                    2115     ;     case HAL_NRF_1MBPS:
                    2116                             ; SOURCE LINE # 585
0018                2117     ?C0095:
                    2118     ;       rf_setup.bits.rf_dr_low = 0;
                    2119                             ; SOURCE LINE # 586
0018 AF00     F     2120             MOV     R7,rf_setup?2181
001A EF             2121             MOV     A,R7
001B 54DF           2122             ANL     A,#0DFH
001D                2123     ?C0230:
001D F500     F     2124             MOV     rf_setup?2181,A
                    2125     ;       rf_setup.bits.rf_dr_high = 0;
                    2126                             ; SOURCE LINE # 587
001F AF00     F     2127             MOV     R7,rf_setup?2181
0021 EF             2128             MOV     A,R7
0022 54F7           2129             ANL     A,#0F7H
0024 F500     F     2130             MOV     rf_setup?2181,A
                    2131     ;       break;
                    2132                             ; SOURCE LINE # 588
0026 800E           2133             SJMP    ?C0093
                    2134     ;     case HAL_NRF_2MBPS:
                    2135                             ; SOURCE LINE # 589
                    2136     ;     default:
                    2137                             ; SOURCE LINE # 590
0028                2138     ?C0097:
                    2139     ;       rf_setup.bits.rf_dr_low = 0;
                    2140                             ; SOURCE LINE # 591
0028 AF00     F     2141             MOV     R7,rf_setup?2181
002A EF             2142             MOV     A,R7
002B 54DF           2143             ANL     A,#0DFH
002D F500     F     2144             MOV     rf_setup?2181,A
                    2145     ;       rf_setup.bits.rf_dr_high = 1;
                    2146                             ; SOURCE LINE # 592
002F AF00     F     2147             MOV     R7,rf_setup?2181
0031 EF             2148             MOV     A,R7
0032 4408           2149             ORL     A,#08H
0034 F500     F     2150             MOV     rf_setup?2181,A
                    2151     ;       break;
                    2152                             ; SOURCE LINE # 593
                    2153     ;   }
                    2154                             ; SOURCE LINE # 594
0036                2155     ?C0093:
                    2156     ;   
                    2157     ;   hal_nrf_write_reg (RF_SETUP, rf_setup.value);
                    2158                             ; SOURCE LINE # 596
0036 AD00     F     2159             MOV     R5,rf_setup?2181
0038 7F06           2160             MOV     R7,#06H
003A 020000   F     2161             LJMP    _hal_nrf_write_reg
                    2162     ; END OF _hal_nrf_set_datarate
                    2163     
                    2164     ; }
                    2165     ; 
                    2166     ; unsigned char hal_nrf_rx_fifo_empty(void)
                    2167     
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    34

----                2168             RSEG  ?PR?hal_nrf_rx_fifo_empty?___LE1_LIB_HAL_HAL_NRF
0000                2169     hal_nrf_rx_fifo_empty:
                    2170             USING   0
                    2171                             ; SOURCE LINE # 599
                    2172     ; {
                    2173                             ; SOURCE LINE # 600
                    2174     ;   if(hal_nrf_get_rx_data_source()==7)
                    2175                             ; SOURCE LINE # 601
0000 120000   F     2176             LCALL   hal_nrf_get_rx_data_source
0003 BF0703         2177             CJNE    R7,#07H,?C0099
                    2178     ;   {
                    2179                             ; SOURCE LINE # 602
                    2180     ;     return true;
                    2181                             ; SOURCE LINE # 603
0006 7F01           2182             MOV     R7,#01H
0008 22             2183             RET     
                    2184     ;   }
                    2185                             ; SOURCE LINE # 604
0009                2186     ?C0099:
                    2187     ;   else
                    2188     ;   {
                    2189                             ; SOURCE LINE # 606
                    2190     ;     return false;
                    2191                             ; SOURCE LINE # 607
0009 7F00           2192             MOV     R7,#00H
                    2193     ;   }
                    2194                             ; SOURCE LINE # 608
                    2195     ; }
                    2196                             ; SOURCE LINE # 609
000B                2197     ?C0100:
000B 22             2198             RET     
                    2199     ; END OF hal_nrf_rx_fifo_empty
                    2200     
                    2201     ; 
                    2202     ; unsigned char hal_nrf_rx_fifo_full(void)
                    2203     
----                2204             RSEG  ?PR?hal_nrf_rx_fifo_full?___LE1_LIB_HAL_HAL_NRF
0000                2205     hal_nrf_rx_fifo_full:
                    2206             USING   0
                    2207                             ; SOURCE LINE # 611
                    2208     ; {
                    2209                             ; SOURCE LINE # 612
                    2210     ;   return (unsigned char)((hal_nrf_read_reg(FIFO_STATUS)>> RX_EMPTY) & 1);
                    2211                             ; SOURCE LINE # 613
0000 7F17           2212             MOV     R7,#017H
0002 120000   F     2213             LCALL   _hal_nrf_read_reg
0005 EF             2214             MOV     A,R7
0006 5401           2215             ANL     A,#01H
0008 FF             2216             MOV     R7,A
                    2217     ; }
                    2218                             ; SOURCE LINE # 614
0009                2219     ?C0102:
0009 22             2220             RET     
                    2221     ; END OF hal_nrf_rx_fifo_full
                    2222     
                    2223     ; 
                    2224     ; unsigned char hal_nrf_tx_fifo_empty(void)
                    2225     
----                2226             RSEG  ?PR?hal_nrf_tx_fifo_empty?___LE1_LIB_HAL_HAL_NRF
0000                2227     hal_nrf_tx_fifo_empty:
                    2228             USING   0
                    2229                             ; SOURCE LINE # 616
                    2230     ; {
                    2231                             ; SOURCE LINE # 617
                    2232     ;   return (unsigned char)((hal_nrf_read_reg(FIFO_STATUS) >> TX_EMPTY) & 1);
                    2233                             ; SOURCE LINE # 618
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    35

0000 7F17           2234             MOV     R7,#017H
0002 120000   F     2235             LCALL   _hal_nrf_read_reg
0005 EF             2236             MOV     A,R7
0006 C4             2237             SWAP    A
0007 5401           2238             ANL     A,#01H
0009 FF             2239             MOV     R7,A
                    2240     ; }
                    2241                             ; SOURCE LINE # 619
000A                2242     ?C0103:
000A 22             2243             RET     
                    2244     ; END OF hal_nrf_tx_fifo_empty
                    2245     
                    2246     ; 
                    2247     ; unsigned char hal_nrf_tx_fifo_full(void)
                    2248     
----                2249             RSEG  ?PR?hal_nrf_tx_fifo_full?___LE1_LIB_HAL_HAL_NRF
0000                2250     hal_nrf_tx_fifo_full:
                    2251             USING   0
                    2252                             ; SOURCE LINE # 621
                    2253     ; {
                    2254                             ; SOURCE LINE # 622
                    2255     ;   return (unsigned char)((hal_nrf_read_reg(FIFO_STATUS) >> TX_FIFO_FULL) & 1);
                    2256                             ; SOURCE LINE # 623
0000 7F17           2257             MOV     R7,#017H
0002 120000   F     2258             LCALL   _hal_nrf_read_reg
0005 EF             2259             MOV     A,R7
0006 C4             2260             SWAP    A
0007 13             2261             RRC     A
0008 5401           2262             ANL     A,#01H
000A FF             2263             MOV     R7,A
                    2264     ; }
                    2265                             ; SOURCE LINE # 624
000B                2266     ?C0104:
000B 22             2267             RET     
                    2268     ; END OF hal_nrf_tx_fifo_full
                    2269     
                    2270     ; 
                    2271     ; unsigned char hal_nrf_get_tx_fifo_status(void)
                    2272     
----                2273             RSEG  ?PR?hal_nrf_get_tx_fifo_status?___LE1_LIB_HAL_HAL_NRF
0000                2274     hal_nrf_get_tx_fifo_status:
                    2275             USING   0
                    2276                             ; SOURCE LINE # 626
                    2277     ; {
                    2278                             ; SOURCE LINE # 627
                    2279     ;   return ((hal_nrf_read_reg(FIFO_STATUS) & ((1<<TX_FIFO_FULL)|(1<<TX_EMPTY))) >> 4);
                    2280                             ; SOURCE LINE # 628
0000 7F17           2281             MOV     R7,#017H
0002 120000   F     2282             LCALL   _hal_nrf_read_reg
0005 EF             2283             MOV     A,R7
0006 5430           2284             ANL     A,#030H
0008 C4             2285             SWAP    A
0009 540F           2286             ANL     A,#0FH
000B FF             2287             MOV     R7,A
                    2288     ; }
                    2289                             ; SOURCE LINE # 629
000C                2290     ?C0105:
000C 22             2291             RET     
                    2292     ; END OF hal_nrf_get_tx_fifo_status
                    2293     
                    2294     ; 
                    2295     ; unsigned char hal_nrf_get_rx_fifo_status(void)
                    2296     
----                2297             RSEG  ?PR?hal_nrf_get_rx_fifo_status?___LE1_LIB_HAL_HAL_NRF
0000                2298     hal_nrf_get_rx_fifo_status:
                    2299             USING   0
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    36

                    2300                             ; SOURCE LINE # 631
                    2301     ; {
                    2302                             ; SOURCE LINE # 632
                    2303     ;   return (hal_nrf_read_reg(FIFO_STATUS) & ((1<<RX_FULL)|(1<<RX_EMPTY)));
                    2304                             ; SOURCE LINE # 633
0000 7F17           2305             MOV     R7,#017H
0002 120000   F     2306             LCALL   _hal_nrf_read_reg
0005 EF             2307             MOV     A,R7
0006 5403           2308             ANL     A,#03H
0008 FF             2309             MOV     R7,A
                    2310     ; }
                    2311                             ; SOURCE LINE # 634
0009                2312     ?C0106:
0009 22             2313             RET     
                    2314     ; END OF hal_nrf_get_rx_fifo_status
                    2315     
                    2316     ; 
                    2317     ; unsigned char hal_nrf_get_fifo_status(void)
                    2318     
----                2319             RSEG  ?PR?hal_nrf_get_fifo_status?___LE1_LIB_HAL_HAL_NRF
0000                2320     hal_nrf_get_fifo_status:
                    2321             USING   0
                    2322                             ; SOURCE LINE # 636
                    2323     ; {
                    2324                             ; SOURCE LINE # 637
                    2325     ;   return hal_nrf_read_reg(FIFO_STATUS);
                    2326                             ; SOURCE LINE # 638
0000 7F17           2327             MOV     R7,#017H
0002 120000   F     2328             LCALL   _hal_nrf_read_reg
                    2329     ; }
                    2330                             ; SOURCE LINE # 639
0005                2331     ?C0107:
0005 22             2332             RET     
                    2333     ; END OF hal_nrf_get_fifo_status
                    2334     
                    2335     ; 
                    2336     ; unsigned char hal_nrf_get_transmit_attempts(void)
                    2337     
----                2338             RSEG  ?PR?hal_nrf_get_transmit_attempts?___LE1_LIB_HAL_HAL_NRF
0000                2339     hal_nrf_get_transmit_attempts:
                    2340             USING   0
                    2341                             ; SOURCE LINE # 641
                    2342     ; {
                    2343                             ; SOURCE LINE # 642
                    2344     ;   return (hal_nrf_read_reg(OBSERVE_TX) & (BIT_3|BIT_2|BIT_1|BIT_0));
                    2345                             ; SOURCE LINE # 643
0000 7F08           2346             MOV     R7,#08H
0002 120000   F     2347             LCALL   _hal_nrf_read_reg
0005 EF             2348             MOV     A,R7
0006 540F           2349             ANL     A,#0FH
0008 FF             2350             MOV     R7,A
                    2351     ; }
                    2352                             ; SOURCE LINE # 644
0009                2353     ?C0108:
0009 22             2354             RET     
                    2355     ; END OF hal_nrf_get_transmit_attempts
                    2356     
                    2357     ; 
                    2358     ; unsigned char hal_nrf_get_carrier_detect(void)
                    2359     
----                2360             RSEG  ?PR?hal_nrf_get_carrier_detect?___LE1_LIB_HAL_HAL_NRF
0000                2361     hal_nrf_get_carrier_detect:
                    2362             USING   0
                    2363                             ; SOURCE LINE # 646
                    2364     ; {
                    2365                             ; SOURCE LINE # 647
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    37

                    2366     ;   return hal_nrf_read_reg(CD) & 1;
                    2367                             ; SOURCE LINE # 648
0000 7F09           2368             MOV     R7,#09H
0002 120000   F     2369             LCALL   _hal_nrf_read_reg
0005 EF             2370             MOV     A,R7
0006 5401           2371             ANL     A,#01H
0008 FF             2372             MOV     R7,A
                    2373     ; }
                    2374                             ; SOURCE LINE # 649
0009                2375     ?C0109:
0009 22             2376             RET     
                    2377     ; END OF hal_nrf_get_carrier_detect
                    2378     
                    2379     ; 
                    2380     ; void hal_nrf_activate_features(void)
                    2381     
----                2382             RSEG  ?PR?hal_nrf_activate_features?___LE1_LIB_HAL_HAL_NRF
0000                2383     hal_nrf_activate_features:
                    2384             USING   0
                    2385                             ; SOURCE LINE # 651
                    2386     ; {return;}
                    2387                             ; SOURCE LINE # 652
0000                2388     ?C0110:
0000 22             2389             RET     
                    2390     ; END OF hal_nrf_activate_features
                    2391     
                    2392     ; 
                    2393     ; void hal_nrf_setup_dynamic_payload (unsigned char setup)
                    2394     
----                2395             RSEG  ?PR?_hal_nrf_setup_dynamic_payload?___LE1_LIB_HAL_HAL_NRF
0000                2396     _hal_nrf_setup_dynamic_payload:
                    2397             USING   0
                    2398                             ; SOURCE LINE # 654
                    2399     ;---- Variable 'setup?3282' assigned to Register 'R7' ----
                    2400     ; {
                    2401                             ; SOURCE LINE # 655
                    2402     ;   en_pipes_t dynpd;
                    2403     ;   dynpd.value = setup & ~0xC0;
                    2404                             ; SOURCE LINE # 657
0000 EF             2405             MOV     A,R7
0001 543F           2406             ANL     A,#03FH
0003 F500     F     2407             MOV     dynpd?3283,A
                    2408     ; 
                    2409     ;   hal_nrf_write_reg (DYNPD, dynpd.value);
                    2410                             ; SOURCE LINE # 659
0005 AD00     F     2411             MOV     R5,dynpd?3283
0007 7F1C           2412             MOV     R7,#01CH
0009 020000   F     2413             LJMP    _hal_nrf_write_reg
                    2414     ; END OF _hal_nrf_setup_dynamic_payload
                    2415     
                    2416     ; }
                    2417     ; 
                    2418     ; void hal_nrf_enable_dynamic_payload(unsigned char enable)
                    2419     
----                2420             RSEG  ?PR?_hal_nrf_enable_dynamic_payload?___LE1_LIB_HAL_HAL_NRF
0000                2421     _hal_nrf_enable_dynamic_payload:
                    2422             USING   0
                    2423                             ; SOURCE LINE # 662
0000 8F00     F     2424             MOV     enable?3384,R7
                    2425     ; {
                    2426                             ; SOURCE LINE # 663
                    2427     ;   feature_t feature;
                    2428     ;   feature.value = hal_nrf_read_reg (FEATURE);
                    2429                             ; SOURCE LINE # 665
0002 7F1D           2430             MOV     R7,#01DH
0004 120000   F     2431             LCALL   _hal_nrf_read_reg
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    38

0007 8F00     F     2432             MOV     feature?3385,R7
                    2433     ;   feature.bits.en_dpl = (enable) ? 1 : 0;
                    2434                             ; SOURCE LINE # 666
0009 E500     F     2435             MOV     A,enable?3384
000B 7F00           2436             MOV     R7,#00H
000D 6002           2437             JZ      ?C0112
000F 7F01           2438             MOV     R7,#01H
0011                2439     ?C0112:
0011                2440     ?C0113:
0011 EF             2441             MOV     A,R7
0012 5401           2442             ANL     A,#01H
0014 25E0           2443             ADD     A,ACC
0016 25E0           2444             ADD     A,ACC
0018 FF             2445             MOV     R7,A
0019 AE00     F     2446             MOV     R6,feature?3385
001B EE             2447             MOV     A,R6
001C 54FB           2448             ANL     A,#0FBH
001E 4F             2449             ORL     A,R7
001F F500     F     2450             MOV     feature?3385,A
                    2451     ; 
                    2452     ;   hal_nrf_write_reg (FEATURE, feature.value);
                    2453                             ; SOURCE LINE # 668
0021 AD00     F     2454             MOV     R5,feature?3385
0023 7F1D           2455             MOV     R7,#01DH
0025 020000   F     2456             LJMP    _hal_nrf_write_reg
                    2457     ; END OF _hal_nrf_enable_dynamic_payload
                    2458     
                    2459     ; }
                    2460     ; 
                    2461     ; void hal_nrf_enable_ack_payload(unsigned char enable)
                    2462     
----                2463             RSEG  ?PR?_hal_nrf_enable_ack_payload?___LE1_LIB_HAL_HAL_NRF
0000                2464     _hal_nrf_enable_ack_payload:
                    2465             USING   0
                    2466                             ; SOURCE LINE # 671
0000 8F00     F     2467             MOV     enable?3486,R7
                    2468     ; {
                    2469                             ; SOURCE LINE # 672
                    2470     ;   feature_t feature;
                    2471     ;   feature.value = hal_nrf_read_reg (FEATURE);
                    2472                             ; SOURCE LINE # 674
0002 7F1D           2473             MOV     R7,#01DH
0004 120000   F     2474             LCALL   _hal_nrf_read_reg
0007 8F00     F     2475             MOV     feature?3487,R7
                    2476     ;   feature.bits.en_ack_pay = (enable) ? 1 : 0;
                    2477                             ; SOURCE LINE # 675
0009 E500     F     2478             MOV     A,enable?3486
000B 7F00           2479             MOV     R7,#00H
000D 6002           2480             JZ      ?C0115
000F 7F01           2481             MOV     R7,#01H
0011                2482     ?C0115:
0011                2483     ?C0116:
0011 EF             2484             MOV     A,R7
0012 5401           2485             ANL     A,#01H
0014 25E0           2486             ADD     A,ACC
0016 FF             2487             MOV     R7,A
0017 AE00     F     2488             MOV     R6,feature?3487
0019 EE             2489             MOV     A,R6
001A 54FD           2490             ANL     A,#0FDH
001C 4F             2491             ORL     A,R7
001D F500     F     2492             MOV     feature?3487,A
                    2493     ; 
                    2494     ;   hal_nrf_write_reg (FEATURE, feature.value);
                    2495                             ; SOURCE LINE # 677
001F AD00     F     2496             MOV     R5,feature?3487
0021 7F1D           2497             MOV     R7,#01DH
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    39

0023 020000   F     2498             LJMP    _hal_nrf_write_reg
                    2499     ; END OF _hal_nrf_enable_ack_payload
                    2500     
                    2501     ; }
                    2502     ; 
                    2503     ; void hal_nrf_enable_dynamic_ack(unsigned char enable)
                    2504     
----                2505             RSEG  ?PR?_hal_nrf_enable_dynamic_ack?___LE1_LIB_HAL_HAL_NRF
0000                2506     _hal_nrf_enable_dynamic_ack:
                    2507             USING   0
                    2508                             ; SOURCE LINE # 680
0000 8F00     F     2509             MOV     enable?3588,R7
                    2510     ; {
                    2511                             ; SOURCE LINE # 681
                    2512     ;   feature_t feature;
                    2513     ;   feature.value = hal_nrf_read_reg (FEATURE);
                    2514                             ; SOURCE LINE # 683
0002 7F1D           2515             MOV     R7,#01DH
0004 120000   F     2516             LCALL   _hal_nrf_read_reg
0007 8F00     F     2517             MOV     feature?3589,R7
                    2518     ;   feature.bits.en_dyn_ack = (enable) ? 1 : 0;
                    2519                             ; SOURCE LINE # 684
0009 E500     F     2520             MOV     A,enable?3588
000B 7F00           2521             MOV     R7,#00H
000D 6002           2522             JZ      ?C0118
000F 7F01           2523             MOV     R7,#01H
0011                2524     ?C0118:
0011                2525     ?C0119:
0011 EF             2526             MOV     A,R7
0012 5401           2527             ANL     A,#01H
0014 FF             2528             MOV     R7,A
0015 AE00     F     2529             MOV     R6,feature?3589
0017 EE             2530             MOV     A,R6
0018 54FE           2531             ANL     A,#0FEH
001A 4F             2532             ORL     A,R7
001B F500     F     2533             MOV     feature?3589,A
                    2534     ; 
                    2535     ;   hal_nrf_write_reg (FEATURE, feature.value);
                    2536                             ; SOURCE LINE # 686
001D AD00     F     2537             MOV     R5,feature?3589
001F 7F1D           2538             MOV     R7,#01DH
0021 020000   F     2539             LJMP    _hal_nrf_write_reg
                    2540     ; END OF _hal_nrf_enable_dynamic_ack
                    2541     
                    2542     ; }
                    2543     ; 
                    2544     ; void hal_nrf_write_tx_payload(const unsigned char *tx_pload, unsigned char length)
                    2545     
----                2546             RSEG  ?PR?_hal_nrf_write_tx_payload?___LE1_LIB_HAL_HAL_NRF
0000                2547     _hal_nrf_write_tx_payload:
                    2548             USING   0
                    2549                             ; SOURCE LINE # 689
                    2550     ;---- Variable 'length?3691' assigned to Register 'R5' ----
                    2551     ;---- Variable 'tx_pload?3690' assigned to Register 'R1/R2/R3' ----
                    2552     ; {
                    2553                             ; SOURCE LINE # 690
                    2554     ;   hal_nrf_write_multibyte_reg(W_TX_PAYLOAD, tx_pload, length);
                    2555                             ; SOURCE LINE # 691
0000 8D00     F     2556             MOV     ?_hal_nrf_write_multibyte_reg?BYTE+04H,R5
0002 7FA0           2557             MOV     R7,#0A0H
0004 020000   F     2558             LJMP    _hal_nrf_write_multibyte_reg
                    2559     ; END OF _hal_nrf_write_tx_payload
                    2560     
                    2561     ; }
                    2562     ; 
                    2563     ; void hal_nrf_write_tx_payload_noack(const unsigned char *tx_pload, unsigned char length)
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    40

                    2564     
----                2565             RSEG  ?PR?_hal_nrf_write_tx_payload_noack?___LE1_LIB_HAL_HAL_NRF
0000                2566     _hal_nrf_write_tx_payload_noack:
                    2567             USING   0
                    2568                             ; SOURCE LINE # 694
                    2569     ;---- Variable 'length?3793' assigned to Register 'R5' ----
                    2570     ;---- Variable 'tx_pload?3792' assigned to Register 'R1/R2/R3' ----
                    2571     ; {
                    2572                             ; SOURCE LINE # 695
                    2573     ;   hal_nrf_write_multibyte_reg(W_TX_PAYLOAD_NOACK, tx_pload, length);
                    2574                             ; SOURCE LINE # 696
0000 8D00     F     2575             MOV     ?_hal_nrf_write_multibyte_reg?BYTE+04H,R5
0002 7FB0           2576             MOV     R7,#0B0H
0004 020000   F     2577             LJMP    _hal_nrf_write_multibyte_reg
                    2578     ; END OF _hal_nrf_write_tx_payload_noack
                    2579     
                    2580     ; }
                    2581     ; 
                    2582     ; void hal_nrf_write_ack_payload(unsigned char pipe, const unsigned char *tx_pload, unsigne
                             d char length)
                    2583     
----                2584             RSEG  ?PR?_hal_nrf_write_ack_payload?___LE1_LIB_HAL_HAL_NRF
0000                2585     _hal_nrf_write_ack_payload:
                    2586             USING   0
                    2587                             ; SOURCE LINE # 699
                    2588     ;---- Variable 'tx_pload?3895' assigned to Register 'R1/R2/R3' ----
                    2589     ;---- Variable 'pipe?3894' assigned to Register 'R7' ----
                    2590     ; {
                    2591                             ; SOURCE LINE # 700
                    2592     ;   hal_nrf_write_multibyte_reg(W_ACK_PAYLOAD | pipe, tx_pload, length);
                    2593                             ; SOURCE LINE # 701
0000 EF             2594             MOV     A,R7
0001 44A8           2595             ORL     A,#0A8H
0003 FF             2596             MOV     R7,A
0004 850000   F     2597             MOV     ?_hal_nrf_write_multibyte_reg?BYTE+04H,length?3896
0007 020000   F     2598             LJMP    _hal_nrf_write_multibyte_reg
                    2599     ; END OF _hal_nrf_write_ack_payload
                    2600     
                    2601     ; }
                    2602     ; 
                    2603     ; unsigned char hal_nrf_read_rx_payload_width()
                    2604     
----                2605             RSEG  ?PR?hal_nrf_read_rx_payload_width?___LE1_LIB_HAL_HAL_NRF
0000                2606     hal_nrf_read_rx_payload_width:
                    2607             USING   0
                    2608                             ; SOURCE LINE # 704
                    2609     ; {
                    2610                             ; SOURCE LINE # 705
                    2611     ;   return hal_nrf_read_reg(R_RX_PL_WID);
                    2612                             ; SOURCE LINE # 706
0000 7F60           2613             MOV     R7,#060H
0002 120000   F     2614             LCALL   _hal_nrf_read_reg
                    2615     ; }
                    2616                             ; SOURCE LINE # 707
0005                2617     ?C0124:
0005 22             2618             RET     
                    2619     ; END OF hal_nrf_read_rx_payload_width
                    2620     
                    2621     ; 
                    2622     ; unsigned int hal_nrf_read_rx_payload(unsigned char *rx_pload)
                    2623     
----                2624             RSEG  ?PR?_hal_nrf_read_rx_payload?___LE1_LIB_HAL_HAL_NRF
0000                2625     _hal_nrf_read_rx_payload:
                    2626             USING   0
                    2627                             ; SOURCE LINE # 709
                    2628     ;---- Variable 'rx_pload?4097' assigned to Register 'R1/R2/R3' ----
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    41

                    2629     ; {
                    2630                             ; SOURCE LINE # 710
                    2631     ;   return hal_nrf_read_multibyte_reg(UINT8(HAL_NRF_RX_PLOAD), rx_pload);
                    2632                             ; SOURCE LINE # 711
0000 7F08           2633             MOV     R7,#08H
0002 120000   F     2634             LCALL   _hal_nrf_read_multibyte_reg
                    2635     ; }
                    2636                             ; SOURCE LINE # 712
0005                2637     ?C0125:
0005 22             2638             RET     
                    2639     ; END OF _hal_nrf_read_rx_payload
                    2640     
                    2641     ; 
                    2642     ; unsigned char hal_nrf_get_rx_data_source(void)
                    2643     
----                2644             RSEG  ?PR?hal_nrf_get_rx_data_source?___LE1_LIB_HAL_HAL_NRF
0000                2645     hal_nrf_get_rx_data_source:
                    2646             USING   0
                    2647                             ; SOURCE LINE # 714
                    2648     ; {
                    2649                             ; SOURCE LINE # 715
                    2650     ;   return ((hal_nrf_nop() & (BIT_3|BIT_2|BIT_1)) >> 1);
                    2651                             ; SOURCE LINE # 716
0000 120000   F     2652             LCALL   hal_nrf_nop
0003 EF             2653             MOV     A,R7
0004 540E           2654             ANL     A,#0EH
0006 C3             2655             CLR     C
0007 13             2656             RRC     A
0008 FF             2657             MOV     R7,A
                    2658     ; }
                    2659                             ; SOURCE LINE # 717
0009                2660     ?C0126:
0009 22             2661             RET     
                    2662     ; END OF hal_nrf_get_rx_data_source
                    2663     
                    2664     ; 
                    2665     ; void hal_nrf_reuse_tx(void)
                    2666     
----                2667             RSEG  ?PR?hal_nrf_reuse_tx?___LE1_LIB_HAL_HAL_NRF
0000                2668     hal_nrf_reuse_tx:
                    2669             USING   0
                    2670                             ; SOURCE LINE # 719
                    2671     ; {
                    2672                             ; SOURCE LINE # 720
                    2673     ;   CSN_LOW();
                    2674                             ; SOURCE LINE # 721
0000 C2E9           2675             CLR     RFCSN
                    2676     ;   hal_nrf_rw(REUSE_TX_PL);
                    2677                             ; SOURCE LINE # 722
0002 7FE3           2678             MOV     R7,#0E3H
0004 120000   F     2679             LCALL   _hal_nrf_rw
                    2680     ;   CSN_HIGH();
                    2681                             ; SOURCE LINE # 723
0007 D2E9           2682             SETB    RFCSN
                    2683     ; }
                    2684                             ; SOURCE LINE # 724
0009 22             2685             RET     
                    2686     ; END OF hal_nrf_reuse_tx
                    2687     
                    2688     ; 
                    2689     ; unsigned char hal_nrf_get_reuse_tx_status(void)
                    2690     
----                2691             RSEG  ?PR?hal_nrf_get_reuse_tx_status?___LE1_LIB_HAL_HAL_NRF
0000                2692     hal_nrf_get_reuse_tx_status:
                    2693             USING   0
                    2694                             ; SOURCE LINE # 726
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    42

                    2695     ; {
                    2696                             ; SOURCE LINE # 727
                    2697     ;   return (unsigned char)((hal_nrf_get_fifo_status() & (1<<TX_REUSE)) >> TX_REUSE);
                    2698                             ; SOURCE LINE # 728
0000 120000   F     2699             LCALL   hal_nrf_get_fifo_status
0003 EF             2700             MOV     A,R7
0004 5440           2701             ANL     A,#040H
0006 C4             2702             SWAP    A
0007 13             2703             RRC     A
0008 13             2704             RRC     A
0009 5403           2705             ANL     A,#03H
000B FF             2706             MOV     R7,A
                    2707     ; }
                    2708                             ; SOURCE LINE # 729
000C                2709     ?C0134:
000C 22             2710             RET     
                    2711     ; END OF hal_nrf_get_reuse_tx_status
                    2712     
                    2713     ; 
                    2714     ; void hal_nrf_flush_rx(void)
                    2715     
----                2716             RSEG  ?PR?hal_nrf_flush_rx?___LE1_LIB_HAL_HAL_NRF
0000                2717     hal_nrf_flush_rx:
                    2718             USING   0
                    2719                             ; SOURCE LINE # 731
                    2720     ; {
                    2721                             ; SOURCE LINE # 732
                    2722     ;   CSN_LOW();
                    2723                             ; SOURCE LINE # 733
0000 C2E9           2724             CLR     RFCSN
                    2725     ;   hal_nrf_rw(FLUSH_RX);
                    2726                             ; SOURCE LINE # 734
0002 7FE2           2727             MOV     R7,#0E2H
0004 120000   F     2728             LCALL   _hal_nrf_rw
                    2729     ;   CSN_HIGH();
                    2730                             ; SOURCE LINE # 735
0007 D2E9           2731             SETB    RFCSN
                    2732     ; }
                    2733                             ; SOURCE LINE # 736
0009 22             2734             RET     
                    2735     ; END OF hal_nrf_flush_rx
                    2736     
                    2737     ; 
                    2738     ; void hal_nrf_flush_tx(void)
                    2739     
----                2740             RSEG  ?PR?hal_nrf_flush_tx?___LE1_LIB_HAL_HAL_NRF
0000                2741     hal_nrf_flush_tx:
                    2742             USING   0
                    2743                             ; SOURCE LINE # 738
                    2744     ; {
                    2745                             ; SOURCE LINE # 739
                    2746     ;   CSN_LOW();
                    2747                             ; SOURCE LINE # 740
0000 C2E9           2748             CLR     RFCSN
                    2749     ;   hal_nrf_rw(FLUSH_TX);
                    2750                             ; SOURCE LINE # 741
0002 7FE1           2751             MOV     R7,#0E1H
0004 120000   F     2752             LCALL   _hal_nrf_rw
                    2753     ;   CSN_HIGH();
                    2754                             ; SOURCE LINE # 742
0007 D2E9           2755             SETB    RFCSN
                    2756     ; }
                    2757                             ; SOURCE LINE # 743
0009 22             2758             RET     
                    2759     ; END OF hal_nrf_flush_tx
                    2760     
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    43

                    2761     ; 
                    2762     ; unsigned char hal_nrf_nop(void)
                    2763     
----                2764             RSEG  ?PR?hal_nrf_nop?___LE1_LIB_HAL_HAL_NRF
0000                2765     hal_nrf_nop:
                    2766             USING   0
                    2767                             ; SOURCE LINE # 745
                    2768     ; {
                    2769                             ; SOURCE LINE # 746
                    2770     ;   unsigned char retval;
                    2771     ; 
                    2772     ;   CSN_LOW();
                    2773                             ; SOURCE LINE # 749
0000 C2E9           2774             CLR     RFCSN
                    2775     ;   retval = hal_nrf_rw(NOP);
                    2776                             ; SOURCE LINE # 750
0002 7FFF           2777             MOV     R7,#0FFH
0004 120000   F     2778             LCALL   _hal_nrf_rw
                    2779     ;---- Variable 'retval?4698' assigned to Register 'R7' ----
                    2780     ;   CSN_HIGH();
                    2781                             ; SOURCE LINE # 751
0007 D2E9           2782             SETB    RFCSN
                    2783     ; 
                    2784     ;   return retval;
                    2785                             ; SOURCE LINE # 753
                    2786     ; }
                    2787                             ; SOURCE LINE # 754
0009                2788     ?C0155:
0009 22             2789             RET     
                    2790     ; END OF hal_nrf_nop
                    2791     
                    2792     ; 
                    2793     ; void hal_nrf_set_pll_mode(unsigned char pll_lock)
                    2794     
----                2795             RSEG  ?PR?_hal_nrf_set_pll_mode?___LE1_LIB_HAL_HAL_NRF
0000                2796     _hal_nrf_set_pll_mode:
                    2797             USING   0
                    2798                             ; SOURCE LINE # 756
0000 8F00     F     2799             MOV     pll_lock?4799,R7
                    2800     ; {
                    2801                             ; SOURCE LINE # 757
                    2802     ;   rf_setup_t rf_setup;
                    2803     ;   rf_setup.value = hal_nrf_read_reg (RF_SETUP);
                    2804                             ; SOURCE LINE # 759
0002 7F06           2805             MOV     R7,#06H
0004 120000   F     2806             LCALL   _hal_nrf_read_reg
0007 8F00     F     2807             MOV     rf_setup?47100,R7
                    2808     ;   rf_setup.bits.pll_lock = (pll_lock) ? 1 : 0;
                    2809                             ; SOURCE LINE # 760
0009 E500     F     2810             MOV     A,pll_lock?4799
000B 7F00           2811             MOV     R7,#00H
000D 6002           2812             JZ      ?C0156
000F 7F01           2813             MOV     R7,#01H
0011                2814     ?C0156:
0011                2815     ?C0157:
0011 EF             2816             MOV     A,R7
0012 5401           2817             ANL     A,#01H
0014 C4             2818             SWAP    A
0015 54F0           2819             ANL     A,#0F0H
0017 FF             2820             MOV     R7,A
0018 AE00     F     2821             MOV     R6,rf_setup?47100
001A EE             2822             MOV     A,R6
001B 54EF           2823             ANL     A,#0EFH
001D 4F             2824             ORL     A,R7
001E F500     F     2825             MOV     rf_setup?47100,A
                    2826     ; 
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    44

                    2827     ;   hal_nrf_write_reg(RF_SETUP, rf_setup.value);
                    2828                             ; SOURCE LINE # 762
0020 AD00     F     2829             MOV     R5,rf_setup?47100
0022 7F06           2830             MOV     R7,#06H
0024 020000   F     2831             LJMP    _hal_nrf_write_reg
                    2832     ; END OF _hal_nrf_set_pll_mode
                    2833     
                    2834     ; }
                    2835     ; 
                    2836     ; unsigned char hal_nrf_get_rssi(void)
                    2837     
----                2838             RSEG  ?PR?hal_nrf_get_rssi?___LE1_LIB_HAL_HAL_NRF
0000                2839     hal_nrf_get_rssi:
                    2840             USING   0
                    2841                             ; SOURCE LINE # 765
                    2842     ; {
                    2843                             ; SOURCE LINE # 766
                    2844     ;   agc_config_t agc_config;
                    2845     ;   unsigned char value[2];
                    2846     ;   hal_nrf_read_multibyte_reg(AGC_CONFIG, value);
                    2847                             ; SOURCE LINE # 769
0000 7B00           2848             MOV     R3,#00H
0002 7A00     F     2849             MOV     R2,#HIGH (value?48102)
0004 7900     F     2850             MOV     R1,#LOW (value?48102)
0006 7F1E           2851             MOV     R7,#01EH
0008 120000   F     2852             LCALL   _hal_nrf_read_multibyte_reg
                    2853     ;   agc_config.value = ((value[1]) | (value[0] << 8));
                    2854                             ; SOURCE LINE # 770
000B E500     F     2855             MOV     A,value?48102
000D AD00     F     2856             MOV     R5,value?48102+01H
000F F500     F     2857             MOV     agc_config?48101,A
0011 ED             2858             MOV     A,R5
0012 F500     F     2859             MOV     agc_config?48101+01H,A
                    2860     ;   return UINT8(agc_config.bits.lnb_out);
                    2861                             ; SOURCE LINE # 771
0014 AF00     F     2862             MOV     R7,agc_config?48101
0016 EF             2863             MOV     A,R7
0017 5407           2864             ANL     A,#07H
0019 FF             2865             MOV     R7,A
                    2866     ; }
                    2867                             ; SOURCE LINE # 772
001A                2868     ?C0159:
001A 22             2869             RET     
                    2870     ; END OF hal_nrf_get_rssi
                    2871     
                    2872     ; 
                    2873     ; void hal_nrf_enable_continious_wave (unsigned char enable)
                    2874     
----                2875             RSEG  ?PR?_hal_nrf_enable_continious_wave?___LE1_LIB_HAL_HAL_NRF
0000                2876     _hal_nrf_enable_continious_wave:
                    2877             USING   0
                    2878                             ; SOURCE LINE # 774
0000 8F00     F     2879             MOV     enable?49103,R7
                    2880     ; {
                    2881                             ; SOURCE LINE # 775
                    2882     ;   rf_setup_t rf_setup;
                    2883     ;   rf_setup.value = hal_nrf_read_reg (RF_SETUP);
                    2884                             ; SOURCE LINE # 777
0002 7F06           2885             MOV     R7,#06H
0004 120000   F     2886             LCALL   _hal_nrf_read_reg
0007 8F00     F     2887             MOV     rf_setup?49104,R7
                    2888     ;   rf_setup.bits.cont_wave = (enable ? 1 : 0);
                    2889                             ; SOURCE LINE # 778
0009 E500     F     2890             MOV     A,enable?49103
000B 7F00           2891             MOV     R7,#00H
000D 6002           2892             JZ      ?C0160
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    45

000F 7F01           2893             MOV     R7,#01H
0011                2894     ?C0160:
0011                2895     ?C0161:
0011 EF             2896             MOV     A,R7
0012 5401           2897             ANL     A,#01H
0014 C4             2898             SWAP    A
0015 33             2899             RLC     A
0016 33             2900             RLC     A
0017 33             2901             RLC     A
0018 5480           2902             ANL     A,#080H
001A FF             2903             MOV     R7,A
001B AE00     F     2904             MOV     R6,rf_setup?49104
001D EE             2905             MOV     A,R6
001E 547F           2906             ANL     A,#07FH
0020 4F             2907             ORL     A,R7
0021 F500     F     2908             MOV     rf_setup?49104,A
                    2909     ; 
                    2910     ;   hal_nrf_write_reg(RF_SETUP, rf_setup.value);
                    2911                             ; SOURCE LINE # 780
0023 AD00     F     2912             MOV     R5,rf_setup?49104
0025 7F06           2913             MOV     R7,#06H
0027 020000   F     2914             LJMP    _hal_nrf_write_reg
                    2915     ; END OF _hal_nrf_enable_continious_wave
                    2916     
                    2917     ; }
                    2918     ; 
                    2919     ; unsigned char hal_nrf_read_reg(unsigned char reg)
                    2920     
----                2921             RSEG  ?PR?_hal_nrf_read_reg?___LE1_LIB_HAL_HAL_NRF
0000                2922     _hal_nrf_read_reg:
                    2923             USING   0
                    2924                             ; SOURCE LINE # 783
                    2925     ;---- Variable 'reg?50105' assigned to Register 'R7' ----
                    2926     ; {
                    2927                             ; SOURCE LINE # 784
                    2928     ;   unsigned char temp;
                    2929     ; 
                    2930     ;   CSN_LOW();
                    2931                             ; SOURCE LINE # 787
0000 C2E9           2932             CLR     RFCSN
                    2933     ;   hal_nrf_rw(reg);
                    2934                             ; SOURCE LINE # 788
0002 120000   F     2935             LCALL   _hal_nrf_rw
                    2936     ;   temp = hal_nrf_rw(0);
                    2937                             ; SOURCE LINE # 789
0005 E4             2938             CLR     A
0006 FF             2939             MOV     R7,A
0007 120000   F     2940             LCALL   _hal_nrf_rw
                    2941     ;---- Variable 'temp?50106' assigned to Register 'R7' ----
                    2942     ;   CSN_HIGH();
                    2943                             ; SOURCE LINE # 790
000A D2E9           2944             SETB    RFCSN
                    2945     ; 
                    2946     ;   return temp;
                    2947                             ; SOURCE LINE # 792
                    2948     ; }
                    2949                             ; SOURCE LINE # 793
000C                2950     ?C0169:
000C 22             2951             RET     
                    2952     ; END OF _hal_nrf_read_reg
                    2953     
                    2954     ; 
                    2955     ; unsigned char hal_nrf_write_reg(unsigned char reg, unsigned char value)
                    2956     
----                2957             RSEG  ?PR?_hal_nrf_write_reg?___LE1_LIB_HAL_HAL_NRF
0000                2958     _hal_nrf_write_reg:
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    46

                    2959             USING   0
                    2960                             ; SOURCE LINE # 795
0000 8D00     F     2961             MOV     value?51108,R5
                    2962     ;---- Variable 'reg?51107' assigned to Register 'R7' ----
                    2963     ; {
                    2964                             ; SOURCE LINE # 796
                    2965     ;   unsigned char retval;
                    2966     ;   
                    2967     ;   CSN_LOW();
                    2968                             ; SOURCE LINE # 799
0002 C2E9           2969             CLR     RFCSN
                    2970     ;   retval = hal_nrf_rw(W_REGISTER + reg);
                    2971                             ; SOURCE LINE # 800
0004 EF             2972             MOV     A,R7
0005 2420           2973             ADD     A,#020H
0007 FF             2974             MOV     R7,A
0008 120000   F     2975             LCALL   _hal_nrf_rw
000B 8F00     F     2976             MOV     retval?51109,R7
                    2977     ;   hal_nrf_rw(value);
                    2978                             ; SOURCE LINE # 801
000D AF00     F     2979             MOV     R7,value?51108
000F 120000   F     2980             LCALL   _hal_nrf_rw
                    2981     ;   CSN_HIGH();
                    2982                             ; SOURCE LINE # 802
0012 D2E9           2983             SETB    RFCSN
                    2984     ; 
                    2985     ;   return retval;
                    2986                             ; SOURCE LINE # 804
0014 AF00     F     2987             MOV     R7,retval?51109
                    2988     ; }
                    2989                             ; SOURCE LINE # 805
0016                2990     ?C0176:
0016 22             2991             RET     
                    2992     ; END OF _hal_nrf_write_reg
                    2993     
                    2994     ; 
                    2995     ; unsigned int hal_nrf_read_multibyte_reg(unsigned char reg, unsigned char *pbuf)
                    2996     
----                2997             RSEG  ?PR?_hal_nrf_read_multibyte_reg?___LE1_LIB_HAL_HAL_NRF
0000                2998     _hal_nrf_read_multibyte_reg:
                    2999             USING   0
                    3000                             ; SOURCE LINE # 807
0000 8F00     F     3001             MOV     reg?52110,R7
0002 8B00     F     3002             MOV     pbuf?52111,R3
0004 8A00     F     3003             MOV     pbuf?52111+01H,R2
0006 8900     F     3004             MOV     pbuf?52111+02H,R1
                    3005     ; {
                    3006                             ; SOURCE LINE # 808
                    3007     ;   unsigned char ctr, length;
                    3008     ;   switch(reg)
                    3009                             ; SOURCE LINE # 810
0008 E500     F     3010             MOV     A,reg?52110
000A 14             3011             DEC     A
000B 6010           3012             JZ      ?C0180
000D 24FB           3013             ADD     A,#0FBH
000F 600C           3014             JZ      ?C0180
0011 24FE           3015             ADD     A,#0FEH
0013 6018           3016             JZ      ?C0184
0015 24EA           3017             ADD     A,#0EAH
0017 602C           3018             JZ      ?C0190
0019 241E           3019             ADD     A,#01EH
001B 7037           3020             JNZ     ?C0194
                    3021     ;   {
                    3022                             ; SOURCE LINE # 811
                    3023     ;     case HAL_NRF_PIPE0:
                    3024                             ; SOURCE LINE # 812
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    47

                    3025     ;     case HAL_NRF_PIPE1:
                    3026                             ; SOURCE LINE # 813
                    3027     ;     case HAL_NRF_TX:
                    3028                             ; SOURCE LINE # 814
001D                3029     ?C0180:
                    3030     ;       length = ctr = hal_nrf_get_address_width();
                    3031                             ; SOURCE LINE # 815
001D 120000   F     3032             LCALL   hal_nrf_get_address_width
0020 8F00     F     3033             MOV     ctr?52112,R7
0022 8F00     F     3034             MOV     length?52113,R7
                    3035     ;       CSN_LOW();
                    3036                             ; SOURCE LINE # 816
0024 C2E9           3037             CLR     RFCSN
                    3038     ;       hal_nrf_rw(RX_ADDR_P0 + reg);
                    3039                             ; SOURCE LINE # 817
0026 E500     F     3040             MOV     A,reg?52110
0028 240A           3041             ADD     A,#0AH
002A FF             3042             MOV     R7,A
                    3043     ;       break;
                    3044                             ; SOURCE LINE # 818
002B 8022           3045             SJMP    ?C0232
                    3046     ;       
                    3047     ;     case HAL_NRF_RX_PLOAD:
                    3048                             ; SOURCE LINE # 820
002D                3049     ?C0184:
                    3050     ;       if( (reg = hal_nrf_get_rx_data_source()) < 7)
                    3051                             ; SOURCE LINE # 821
002D 120000   F     3052             LCALL   hal_nrf_get_rx_data_source
0030 8F00     F     3053             MOV     reg?52110,R7
0032 EF             3054             MOV     A,R7
0033 C3             3055             CLR     C
0034 9407           3056             SUBB    A,#07H
0036 501C           3057             JNC     ?C0233
                    3058     ;       {
                    3059                             ; SOURCE LINE # 822
                    3060     ;         length = ctr = hal_nrf_read_rx_payload_width();
                    3061                             ; SOURCE LINE # 823
0038 120000   F     3062             LCALL   hal_nrf_read_rx_payload_width
003B 8F00     F     3063             MOV     ctr?52112,R7
003D 8F00     F     3064             MOV     length?52113,R7
                    3065     ; 
                    3066     ;         CSN_LOW();
                    3067                             ; SOURCE LINE # 825
003F C2E9           3068             CLR     RFCSN
                    3069     ;         hal_nrf_rw(R_RX_PAYLOAD);
                    3070                             ; SOURCE LINE # 826
0041 7F61           3071             MOV     R7,#061H
0043                3072     ?C0231:
                    3073     ;       }
                    3074                             ; SOURCE LINE # 827
0043 800A           3075             SJMP    ?C0232
                    3076     ;       else
                    3077     ;       {
                    3078     ;        ctr = length = 0;
                    3079     ;       }
                    3080     ;       break;
                    3081     ; 
                    3082     ;     case AGC_CONFIG:
                    3083                             ; SOURCE LINE # 834
0045                3084     ?C0190:
                    3085     ;       ctr = length = 2;
                    3086                             ; SOURCE LINE # 835
0045 750002   F     3087             MOV     length?52113,#02H
0048 750002   F     3088             MOV     ctr?52112,#02H
                    3089     ;       CSN_LOW();
                    3090                             ; SOURCE LINE # 836
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    48

004B C2E9           3091             CLR     RFCSN
                    3092     ;       hal_nrf_rw (AGC_CONFIG);
                    3093                             ; SOURCE LINE # 837
004D 7F1E           3094             MOV     R7,#01EH
004F                3095     ?C0232:
004F 120000   F     3096             LCALL   _hal_nrf_rw
                    3097     ;       break;
                    3098                             ; SOURCE LINE # 838
0052 8005           3099             SJMP    ?C0195
                    3100     ; 
                    3101     ;     default:
                    3102                             ; SOURCE LINE # 840
0054                3103     ?C0194:
                    3104     ;       ctr = length = 0;
                    3105                             ; SOURCE LINE # 841
0054                3106     ?C0233:
0054 E4             3107             CLR     A
0055 F500     F     3108             MOV     length?52113,A
0057 F500     F     3109             MOV     ctr?52112,A
                    3110     ;       break;
                    3111                             ; SOURCE LINE # 842
                    3112     ;   }
                    3113                             ; SOURCE LINE # 843
0059                3114     ?C0195:
                    3115     ; 
                    3116     ;   while(ctr--)
                    3117                             ; SOURCE LINE # 845
0059 AF00     F     3118             MOV     R7,ctr?52112
005B 1500     F     3119             DEC     ctr?52112
005D EF             3120             MOV     A,R7
005E 6019           3121             JZ      ?C0199
                    3122     ;   {
                    3123                             ; SOURCE LINE # 846
                    3124     ;     *pbuf++ = hal_nrf_rw(0);
                    3125                             ; SOURCE LINE # 847
0060 E4             3126             CLR     A
0061 FF             3127             MOV     R7,A
0062 120000   F     3128             LCALL   _hal_nrf_rw
0065 AB00     F     3129             MOV     R3,pbuf?52111
0067 0500     F     3130             INC     pbuf?52111+02H
0069 E500     F     3131             MOV     A,pbuf?52111+02H
006B AA00     F     3132             MOV     R2,pbuf?52111+01H
006D 7002           3133             JNZ     ?C0216
006F 0500     F     3134             INC     pbuf?52111+01H
0071                3135     ?C0216:
0071 14             3136             DEC     A
0072 F9             3137             MOV     R1,A
0073 EF             3138             MOV     A,R7
0074 120000   F     3139             LCALL   ?C?CSTPTR
                    3140     ;   }
                    3141                             ; SOURCE LINE # 848
0077 80E0           3142             SJMP    ?C0195
0079                3143     ?C0199:
                    3144     ; 
                    3145     ;   CSN_HIGH();
                    3146                             ; SOURCE LINE # 850
0079 D2E9           3147             SETB    RFCSN
                    3148     ; 
                    3149     ;   return (((unsigned int) reg << 8) | length);
                    3150                             ; SOURCE LINE # 852
007B E500     F     3151             MOV     A,reg?52110
007D FE             3152             MOV     R6,A
007E E500     F     3153             MOV     A,length?52113
0080 FF             3154             MOV     R7,A
                    3155     ; }
                    3156                             ; SOURCE LINE # 853
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    49

0081                3157     ?C0200:
0081 22             3158             RET     
                    3159     ; END OF _hal_nrf_read_multibyte_reg
                    3160     
                    3161     ; 
                    3162     ; void hal_nrf_write_multibyte_reg(unsigned char cmd, const unsigned char *pbuf, unsigned c
                             har length)
                    3163     
----                3164             RSEG  ?PR?_hal_nrf_write_multibyte_reg?___LE1_LIB_HAL_HAL_NRF
0000                3165     _hal_nrf_write_multibyte_reg:
                    3166             USING   0
                    3167                             ; SOURCE LINE # 855
0000 8B00     F     3168             MOV     pbuf?53115,R3
0002 8A00     F     3169             MOV     pbuf?53115+01H,R2
0004 8900     F     3170             MOV     pbuf?53115+02H,R1
                    3171     ;---- Variable 'cmd?53114' assigned to Register 'R7' ----
                    3172     ; {
                    3173                             ; SOURCE LINE # 856
                    3174     ;   CSN_LOW();
                    3175                             ; SOURCE LINE # 857
0006 C2E9           3176             CLR     RFCSN
                    3177     ; 
                    3178     ;   hal_nrf_rw(cmd);
                    3179                             ; SOURCE LINE # 859
0008 8019           3180             SJMP    ?C0234
000A                3181     ?C0204:
                    3182     ; 
                    3183     ;   while(length--)
                    3184                             ; SOURCE LINE # 861
000A AF00     F     3185             MOV     R7,length?53116
000C 1500     F     3186             DEC     length?53116
000E EF             3187             MOV     A,R7
000F 6017           3188             JZ      ?C0208
                    3189     ;   {
                    3190                             ; SOURCE LINE # 862
                    3191     ;     hal_nrf_rw(*pbuf++);
                    3192                             ; SOURCE LINE # 863
0011 AB00     F     3193             MOV     R3,pbuf?53115
0013 0500     F     3194             INC     pbuf?53115+02H
0015 E500     F     3195             MOV     A,pbuf?53115+02H
0017 AA00     F     3196             MOV     R2,pbuf?53115+01H
0019 7002           3197             JNZ     ?C0217
001B 0500     F     3198             INC     pbuf?53115+01H
001D                3199     ?C0217:
001D 14             3200             DEC     A
001E F9             3201             MOV     R1,A
001F 120000   F     3202             LCALL   ?C?CLDPTR
0022 FF             3203             MOV     R7,A
0023                3204     ?C0234:
0023 120000   F     3205             LCALL   _hal_nrf_rw
                    3206     ;   }
                    3207                             ; SOURCE LINE # 864
0026 80E2           3208             SJMP    ?C0204
0028                3209     ?C0208:
                    3210     ; 
                    3211     ;   CSN_HIGH();
                    3212                             ; SOURCE LINE # 866
0028 D2E9           3213             SETB    RFCSN
                    3214     ; }
                    3215                             ; SOURCE LINE # 867
002A 22             3216             RET     
                    3217     ; END OF _hal_nrf_write_multibyte_reg
                    3218     
                    3219             END
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    50

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . . . . . .    C ADDR   0017H   R   SEG=?PR?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_HAL_HAL_N
                                    3     RF
?C0002. . . . . . . . . . . . . . . . .    C ADDR   001CH   R   SEG=?PR?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_HAL_HAL_N
                                    3     RF
?C0004. . . . . . . . . . . . . . . . .    C ADDR   0017H   R   SEG=?PR?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_HAL_NRF
?C0005. . . . . . . . . . . . . . . . .    C ADDR   001CH   R   SEG=?PR?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_HAL_NRF
?C0007. . . . . . . . . . . . . . . . .    C ADDR   003CH   R   SEG=?PR?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
?C0008. . . . . . . . . . . . . . . . .    C ADDR   0015H   R   SEG=?PR?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
?C0009. . . . . . . . . . . . . . . . .    C ADDR   001EH   R   SEG=?PR?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
?C0010. . . . . . . . . . . . . . . . .    C ADDR   002EH   R   SEG=?PR?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
?C0013. . . . . . . . . . . . . . . . .    C ADDR   005EH   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0014. . . . . . . . . . . . . . . . .    C ADDR   0018H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0015. . . . . . . . . . . . . . . . .    C ADDR   0020H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0016. . . . . . . . . . . . . . . . .    C ADDR   0020H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0017. . . . . . . . . . . . . . . . .    C ADDR   002EH   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0018. . . . . . . . . . . . . . . . .    C ADDR   0036H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0019. . . . . . . . . . . . . . . . .    C ADDR   0036H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0020. . . . . . . . . . . . . . . . .    C ADDR   0045H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0021. . . . . . . . . . . . . . . . .    C ADDR   004DH   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0022. . . . . . . . . . . . . . . . .    C ADDR   004DH   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0024. . . . . . . . . . . . . . . . .    C ADDR   000BH   R   SEG=?PR?HAL_NRF_GET_CLEAR_IRQ_FLAGS?___LE1_LIB_HAL_HAL_N
                                    3     RF
?C0026. . . . . . . . . . . . . . . . .    C ADDR   0007H   R   SEG=?PR?HAL_NRF_GET_IRQ_FLAGS?___LE1_LIB_HAL_HAL_NRF
?C0027. . . . . . . . . . . . . . . . .    C ADDR   004CH   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0033. . . . . . . . . . . . . . . . .    C ADDR   001EH   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0034. . . . . . . . . . . . . . . . .    C ADDR   0037H   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0036. . . . . . . . . . . . . . . . .    C ADDR   003DH   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0037. . . . . . . . . . . . . . . . .    C ADDR   0049H   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0041. . . . . . . . . . . . . . . . .    C ADDR   0035H   R   SEG=?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0047. . . . . . . . . . . . . . . . .    C ADDR   001CH   R   SEG=?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0048. . . . . . . . . . . . . . . . .    C ADDR   0030H   R   SEG=?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0054. . . . . . . . . . . . . . . . .    C ADDR   0017H   R   SEG=?PR?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?C0058. . . . . . . . . . . . . . . . .    C ADDR   002AH   R   SEG=?PR?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?C0060. . . . . . . . . . . . . . . . .    C ADDR   003CH   R   SEG=?PR?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?C0064. . . . . . . . . . . . . . . . .    C ADDR   0015H   R   SEG=?PR?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?C0065. . . . . . . . . . . . . . . . .    C ADDR   0034H   R   SEG=?PR?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?C0066. . . . . . . . . . . . . . . . .    C ADDR   0020H   R   SEG=?PR?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?C0069. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_GET_ADDRESS_WIDTH?___LE1_LIB_HAL_HAL_NRF
?C0071. . . . . . . . . . . . . . . . .    C ADDR   008AH   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0072. . . . . . . . . . . . . . . . .    C ADDR   0025H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0073. . . . . . . . . . . . . . . . .    C ADDR   0031H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0074. . . . . . . . . . . . . . . . .    C ADDR   0041H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0075. . . . . . . . . . . . . . . . .    C ADDR   0051H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0076. . . . . . . . . . . . . . . . .    C ADDR   0063H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0077. . . . . . . . . . . . . . . . .    C ADDR   0071H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0078. . . . . . . . . . . . . . . . .    C ADDR   0085H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0079. . . . . . . . . . . . . . . . .    C ADDR   0091H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0080. . . . . . . . . . . . . . . . .    C ADDR   0005H   R   SEG=?PR?HAL_NRF_GET_AUTO_RETR_STATUS?___LE1_LIB_HAL_HAL_
                                    3     NRF
?C0081. . . . . . . . . . . . . . . . .    C ADDR   000CH   R   SEG=?PR?HAL_NRF_GET_PACKET_LOST_CTR?___LE1_LIB_HAL_HAL_N
                                    3     RF
?C0082. . . . . . . . . . . . . . . . .    C ADDR   0034H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    3     _NRF
?C0083. . . . . . . . . . . . . . . . .    C ADDR   0014H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    3     _NRF
?C0084. . . . . . . . . . . . . . . . .    C ADDR   0018H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    3     _NRF
?C0085. . . . . . . . . . . . . . . . .    C ADDR   001CH   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    3     _NRF
?C0086. . . . . . . . . . . . . . . . .    C ADDR   0020H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    51

                                    4     _NRF
?C0087. . . . . . . . . . . . . . . . .    C ADDR   0024H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    4     _NRF
?C0088. . . . . . . . . . . . . . . . .    C ADDR   0028H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    4     _NRF
?C0089. . . . . . . . . . . . . . . . .    C ADDR   0031H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    4     _NRF
?C0090. . . . . . . . . . . . . . . . .    C ADDR   0036H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    4     _NRF
?C0093. . . . . . . . . . . . . . . . .    C ADDR   0036H   R   SEG=?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
?C0094. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
?C0095. . . . . . . . . . . . . . . . .    C ADDR   0018H   R   SEG=?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
?C0097. . . . . . . . . . . . . . . . .    C ADDR   0028H   R   SEG=?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
?C0099. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_RX_FIFO_EMPTY?___LE1_LIB_HAL_HAL_NRF
?C0100. . . . . . . . . . . . . . . . .    C ADDR   000BH   R   SEG=?PR?HAL_NRF_RX_FIFO_EMPTY?___LE1_LIB_HAL_HAL_NRF
?C0102. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_RX_FIFO_FULL?___LE1_LIB_HAL_HAL_NRF
?C0103. . . . . . . . . . . . . . . . .    C ADDR   000AH   R   SEG=?PR?HAL_NRF_TX_FIFO_EMPTY?___LE1_LIB_HAL_HAL_NRF
?C0104. . . . . . . . . . . . . . . . .    C ADDR   000BH   R   SEG=?PR?HAL_NRF_TX_FIFO_FULL?___LE1_LIB_HAL_HAL_NRF
?C0105. . . . . . . . . . . . . . . . .    C ADDR   000CH   R   SEG=?PR?HAL_NRF_GET_TX_FIFO_STATUS?___LE1_LIB_HAL_HAL_NR
                                    4     F
?C0106. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_GET_RX_FIFO_STATUS?___LE1_LIB_HAL_HAL_NR
                                    4     F
?C0107. . . . . . . . . . . . . . . . .    C ADDR   0005H   R   SEG=?PR?HAL_NRF_GET_FIFO_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0108. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_GET_TRANSMIT_ATTEMPTS?___LE1_LIB_HAL_HAL
                                    4     _NRF
?C0109. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_GET_CARRIER_DETECT?___LE1_LIB_HAL_HAL_NR
                                    4     F
?C0110. . . . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_ACTIVATE_FEATURES?___LE1_LIB_HAL_HAL_NRF
?C0112. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_H
                                    4     AL_NRF
?C0113. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_H
                                    4     AL_NRF
?C0115. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0116. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0118. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0119. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0124. . . . . . . . . . . . . . . . .    C ADDR   0005H   R   SEG=?PR?HAL_NRF_READ_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    4     _NRF
?C0125. . . . . . . . . . . . . . . . .    C ADDR   0005H   R   SEG=?PR?_HAL_NRF_READ_RX_PAYLOAD?___LE1_LIB_HAL_HAL_NRF
?C0126. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_GET_RX_DATA_SOURCE?___LE1_LIB_HAL_HAL_NR
                                    4     F
?C0134. . . . . . . . . . . . . . . . .    C ADDR   000CH   R   SEG=?PR?HAL_NRF_GET_REUSE_TX_STATUS?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0155. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?HAL_NRF_NOP?___LE1_LIB_HAL_HAL_NRF
?C0156. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAL_NRF
?C0157. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAL_NRF
?C0159. . . . . . . . . . . . . . . . .    C ADDR   001AH   R   SEG=?PR?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRF
?C0160. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_LIB_HAL_H
                                    4     AL_NRF
?C0161. . . . . . . . . . . . . . . . .    C ADDR   0011H   R   SEG=?PR?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_LIB_HAL_H
                                    4     AL_NRF
?C0169. . . . . . . . . . . . . . . . .    C ADDR   000CH   R   SEG=?PR?_HAL_NRF_READ_REG?___LE1_LIB_HAL_HAL_NRF
?C0176. . . . . . . . . . . . . . . . .    C ADDR   0016H   R   SEG=?PR?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_NRF
?C0180. . . . . . . . . . . . . . . . .    C ADDR   001DH   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0184. . . . . . . . . . . . . . . . .    C ADDR   002DH   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0190. . . . . . . . . . . . . . . . .    C ADDR   0045H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0194. . . . . . . . . . . . . . . . .    C ADDR   0054H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    4     RF
?C0195. . . . . . . . . . . . . . . . .    C ADDR   0059H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    52

                                    5     RF
?C0199. . . . . . . . . . . . . . . . .    C ADDR   0079H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    5     RF
?C0200. . . . . . . . . . . . . . . . .    C ADDR   0081H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    5     RF
?C0204. . . . . . . . . . . . . . . . .    C ADDR   000AH   R   SEG=?PR?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    5     NRF
?C0208. . . . . . . . . . . . . . . . .    C ADDR   0028H   R   SEG=?PR?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    5     NRF
?C0210. . . . . . . . . . . . . . . . .    C ADDR   0007H   R   SEG=?PR?_HAL_NRF_CLEAR_IRQ_FLAG?___LE1_LIB_HAL_HAL_NRF
?C0211. . . . . . . . . . . . . . . . .    C ADDR   0009H   R   SEG=?PR?_HAL_NRF_CLEAR_IRQ_FLAG?___LE1_LIB_HAL_HAL_NRF
?C0212. . . . . . . . . . . . . . . . .    C ADDR   0027H   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0213. . . . . . . . . . . . . . . . .    C ADDR   0029H   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0214. . . . . . . . . . . . . . . . .    C ADDR   0025H   R   SEG=?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0215. . . . . . . . . . . . . . . . .    C ADDR   0027H   R   SEG=?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
?C0216. . . . . . . . . . . . . . . . .    C ADDR   0071H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    5     RF
?C0217. . . . . . . . . . . . . . . . .    C ADDR   001DH   R   SEG=?PR?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    5     NRF
?C0218. . . . . . . . . . . . . . . . .    C ADDR   0043H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0219. . . . . . . . . . . . . . . . .    C ADDR   005BH   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?C0220. . . . . . . . . . . . . . . . .    C ADDR   003FH   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0221. . . . . . . . . . . . . . . . .    C ADDR   004FH   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0222. . . . . . . . . . . . . . . . .    C ADDR   0061H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0223. . . . . . . . . . . . . . . . .    C ADDR   006FH   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0224. . . . . . . . . . . . . . . . .    C ADDR   007FH   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?C0225. . . . . . . . . . . . . . . . .    C ADDR   001AH   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    5     _NRF
?C0226. . . . . . . . . . . . . . . . .    C ADDR   001EH   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    5     _NRF
?C0227. . . . . . . . . . . . . . . . .    C ADDR   0022H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    5     _NRF
?C0228. . . . . . . . . . . . . . . . .    C ADDR   0026H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    5     _NRF
?C0229. . . . . . . . . . . . . . . . .    C ADDR   002AH   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    5     _NRF
?C0230. . . . . . . . . . . . . . . . .    C ADDR   001DH   R   SEG=?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
?C0231. . . . . . . . . . . . . . . . .    C ADDR   0043H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    5     RF
?C0232. . . . . . . . . . . . . . . . .    C ADDR   004FH   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    5     RF
?C0233. . . . . . . . . . . . . . . . .    C ADDR   0054H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    5     RF
?C0234. . . . . . . . . . . . . . . . .    C ADDR   0023H   R   SEG=?PR?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    5     NRF
?C?CLDPTR . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?CSTPTR . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?UIDIV. . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?DT?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRFD SEG    0005H       REL=UNIT
?DT?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_D SEG    0003H       REL=UNIT
?DT?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_D SEG L_N0002H       REL=UNIT
?DT?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_D SEG L_H0002HF      REL=UNIT
?DT?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_D SEG L_N0002H       REL=UNIT
?DT?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_D SEG L_H0002HF      REL=UNIT
?DT?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HALD SEG    0004H       REL=UNIT
?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HALD SEG RF 0005H       REL=UNIT
?DT?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LID SEG HAL0001H       REL=UNIT
?DT?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_ND SEG    0004H       REL=UNIT
?DT?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_D SEG L_N0006H       REL=UNIT
?DT?_HAL_NRF_SETUP_DYNAMIC_PAYLOAD?___LE1_LD SEG _HA0001H       REL=UNIT
?DT?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HALD SEG    0004H       REL=UNIT
?DT?_HAL_NRF_SET_ADDRESS_WIDTH?___LE1_LIB_HD SEG _NR0001H       REL=UNIT
?DT?_HAL_NRF_SET_AUTO_RETR?___LE1_LIB_HAL_HD SEG    0001H       REL=UNIT
?DT?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAD SEG    0002H       REL=UNIT
?DT?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAD SEG    0002H       REL=UNIT
?DT?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAD SEG    0003H       REL=UNIT
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    53

?DT?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_D SEG L_N0002H       REL=UNIT
?DT?_HAL_NRF_SET_OUTPUT_POWER?___LE1_LIB_HAD SEG NRF0002H       REL=UNIT
?DT?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAD SEG    0002H       REL=UNIT
?DT?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_D SEG F  0002H       REL=UNIT
?DT?_HAL_NRF_SET_RF_CHANNEL?___LE1_LIB_HAL_D SEG F  0001H       REL=UNIT
?DT?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HD SEG _NR0005H       REL=UNIT
?DT?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIBD SEG AL_0005H       REL=UNIT
?DT?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_ND SEG    0002H       REL=UNIT
?HAL_NRF_GET_RSSI?BYTE. . . . . . . . .    D ADDR   0000H   R   SEG=?DT?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRF
?PR?HAL_NRF_ACTIVATE_FEATURES?___LE1_LIB_HAC SEG NRF0001H       REL=UNIT
?PR?HAL_NRF_FLUSH_RX?___LE1_LIB_HAL_HAL_NRFC SEG    000AH       REL=UNIT
?PR?HAL_NRF_FLUSH_TX?___LE1_LIB_HAL_HAL_NRFC SEG    000AH       REL=UNIT
?PR?HAL_NRF_GET_ADDRESS_WIDTH?___LE1_LIB_HAC SEG NRF000AH       REL=UNIT
?PR?HAL_NRF_GET_AUTO_RETR_STATUS?___LE1_LIBC SEG AL_0006H       REL=UNIT
?PR?HAL_NRF_GET_CARRIER_DETECT?___LE1_LIB_HC SEG _NR000AH       REL=UNIT
?PR?HAL_NRF_GET_CLEAR_IRQ_FLAGS?___LE1_LIB_C SEG L_N000CH       REL=UNIT
?PR?HAL_NRF_GET_FIFO_STATUS?___LE1_LIB_HAL_C SEG F  0006H       REL=UNIT
?PR?HAL_NRF_GET_IRQ_FLAGS?___LE1_LIB_HAL_HAC SEG    0008H       REL=UNIT
?PR?HAL_NRF_GET_PACKET_LOST_CTR?___LE1_LIB_C SEG L_N000DH       REL=UNIT
?PR?HAL_NRF_GET_REUSE_TX_STATUS?___LE1_LIB_C SEG L_N000DH       REL=UNIT
?PR?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRFC SEG    001BH       REL=UNIT
?PR?HAL_NRF_GET_RX_DATA_SOURCE?___LE1_LIB_HC SEG _NR000AH       REL=UNIT
?PR?HAL_NRF_GET_RX_FIFO_STATUS?___LE1_LIB_HC SEG _NR000AH       REL=UNIT
?PR?HAL_NRF_GET_TRANSMIT_ATTEMPTS?___LE1_LIC SEG HAL000AH       REL=UNIT
?PR?HAL_NRF_GET_TX_FIFO_STATUS?___LE1_LIB_HC SEG _NR000DH       REL=UNIT
?PR?HAL_NRF_NOP?___LE1_LIB_HAL_HAL_NRF.    C SEG    000AH       REL=UNIT
?PR?HAL_NRF_READ_RX_PAYLOAD_WIDTH?___LE1_LIC SEG HAL0006H       REL=UNIT
?PR?HAL_NRF_REUSE_TX?___LE1_LIB_HAL_HAL_NRFC SEG    000AH       REL=UNIT
?PR?HAL_NRF_RX_FIFO_EMPTY?___LE1_LIB_HAL_HAC SEG    000CH       REL=UNIT
?PR?HAL_NRF_RX_FIFO_FULL?___LE1_LIB_HAL_HALC SEG    000AH       REL=UNIT
?PR?HAL_NRF_TX_FIFO_EMPTY?___LE1_LIB_HAL_HAC SEG    000BH       REL=UNIT
?PR?HAL_NRF_TX_FIFO_FULL?___LE1_LIB_HAL_HALC SEG    000CH       REL=UNIT
?PR?_HAL_NRF_CLEAR_IRQ_FLAG?___LE1_LIB_HAL_C SEG F  0011H       REL=UNIT
?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_C SEG    0043H       REL=UNIT
?PR?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_C SEG L_N0026H       REL=UNIT
?PR?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_C SEG L_H002AHF      REL=UNIT
?PR?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_C SEG L_N0024H       REL=UNIT
?PR?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_C SEG L_H0028HF      REL=UNIT
?PR?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HALC SEG    0035H       REL=UNIT
?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HALC SEG RF 0092H       REL=UNIT
?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIC SEG HAL0037H       REL=UNIT
?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NC SEG    005AH       REL=UNIT
?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_C SEG L_N0082H       REL=UNIT
?PR?_HAL_NRF_READ_REG?___LE1_LIB_HAL_HAL_NRC SEG    000DH       REL=UNIT
?PR?_HAL_NRF_READ_RX_PAYLOAD?___LE1_LIB_HALC SEG RF 0006H       REL=UNIT
?PR?_HAL_NRF_SETUP_DYNAMIC_PAYLOAD?___LE1_LC SEG _HA000CH       REL=UNIT
?PR?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HALC SEG    003DH       REL=UNIT
?PR?_HAL_NRF_SET_ADDRESS_WIDTH?___LE1_LIB_HC SEG _NR0015H       REL=UNIT
?PR?_HAL_NRF_SET_AUTO_RETR?___LE1_LIB_HAL_HC SEG    0030H       REL=UNIT
?PR?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAC SEG    0043H       REL=UNIT
?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAC SEG    003DH       REL=UNIT
?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAC SEG    0065H       REL=UNIT
?PR?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_C SEG L_N0023H       REL=UNIT
?PR?_HAL_NRF_SET_OUTPUT_POWER?___LE1_LIB_HAC SEG NRF001FH       REL=UNIT
?PR?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAC SEG    0027H       REL=UNIT
?PR?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_C SEG F  0023H       REL=UNIT
?PR?_HAL_NRF_SET_RF_CHANNEL?___LE1_LIB_HAL_C SEG F  0013H       REL=UNIT
?PR?_HAL_NRF_SET_RX_PAYLOAD_WIDTH?___LE1_LIC SEG HAL0007H       REL=UNIT
?PR?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HC SEG _NR000AH       REL=UNIT
?PR?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIBC SEG AL_002BH       REL=UNIT
?PR?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_NC SEG    0017H       REL=UNIT
?PR?_HAL_NRF_WRITE_TX_PAYLOAD?___LE1_LIB_HAC SEG NRF0007H       REL=UNIT
?PR?_HAL_NRF_WRITE_TX_PAYLOAD_NOACK?___LE1_C SEG L_H0007HF      REL=UNIT
?_HAL_NRF_CLOSE_PIPE?BYTE . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_ENABLE_ACK_PAYLOAD?BYTE . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_N
                                    6     RF
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    54

?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?BYTE .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_LIB_HAL_H
                                    7     AL_NRF
?_HAL_NRF_ENABLE_DYNAMIC_ACK?BYTE . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_HAL_HAL_N
                                    7     RF
?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?BYTE .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_H
                                    7     AL_NRF
?_HAL_NRF_GET_ADDRESS?BYTE. . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_GET_PIPE_STATUS?BYTE. . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?BYTE . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    7     _NRF
?_HAL_NRF_OPEN_PIPE?BYTE. . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_READ_MULTIBYTE_REG?BYTE . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    7     RF
?_HAL_NRF_SETUP_DYNAMIC_PAYLOAD?BYTE. .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SETUP_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_HA
                                    7     L_NRF
?_HAL_NRF_SET_ADDRESS?BYTE. . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_ADDRESS_WIDTH?BYTE. . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_ADDRESS_WIDTH?___LE1_LIB_HAL_HAL_NR
                                    7     F
?_HAL_NRF_SET_AUTO_RETR?BYTE. . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_AUTO_RETR?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_CRC_MODE?BYTE . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_DATARATE?BYTE . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_IRQ_MODE?BYTE . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_OPERATION_MODE?BYTE . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_HAL_HAL_N
                                    7     RF
?_HAL_NRF_SET_OUTPUT_POWER?BYTE . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_OUTPUT_POWER?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_PLL_MODE?BYTE . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_POWER_MODE?BYTE . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_SET_RF_CHANNEL?BYTE . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_RF_CHANNEL?___LE1_LIB_HAL_HAL_NRF
?_HAL_NRF_WRITE_ACK_PAYLOAD?BYTE. . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_NR
                                    7     F
?_HAL_NRF_WRITE_MULTIBYTE_REG?BYTE. . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    7     NRF
?_HAL_NRF_WRITE_REG?BYTE. . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_NRF
AC. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . . . . .    D ADDR   00E0H   A   
ADCCON1 . . . . . . . . . . . . . . . .    D ADDR   00D3H   A   
ADCCON2 . . . . . . . . . . . . . . . .    D ADDR   00D2H   A   
ADCCON3 . . . . . . . . . . . . . . . .    D ADDR   00D1H   A   
ADCDATH . . . . . . . . . . . . . . . .    D ADDR   00D4H   A   
ADCDATL . . . . . . . . . . . . . . . .    D ADDR   00D5H   A   
ADCON . . . . . . . . . . . . . . . . .    D ADDR   00D8H   A   
ADDR?1061 . . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
ADDR?959. . . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
ADDRESS?1060. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
ADDRESS?958 . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
AGC_CONFIG?48101. . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRF
AR4 . . . . . . . . . . . . . . . . . .    D ADDR   0004H   A   
AR5 . . . . . . . . . . . . . . . . . .    D ADDR   0005H   A   
AR7 . . . . . . . . . . . . . . . . . .    D ADDR   0007H   A   
ARCON . . . . . . . . . . . . . . . . .    D ADDR   00EFH   A   
AUTO_ACK?752. . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
B . . . . . . . . . . . . . . . . . . .    D ADDR   00F0H   A   
BD. . . . . . . . . . . . . . . . . . .    B ADDR   00D8H.7 A   
CC1 . . . . . . . . . . . . . . . . . .    D ADDR   00C2H   A   
CC2 . . . . . . . . . . . . . . . . . .    D ADDR   00C4H   A   
CC3 . . . . . . . . . . . . . . . . . .    D ADDR   00C6H   A   
CCEN. . . . . . . . . . . . . . . . . .    D ADDR   00C1H   A   
CCH1. . . . . . . . . . . . . . . . . .    D ADDR   00C3H   A   
CCH2. . . . . . . . . . . . . . . . . .    D ADDR   00C5H   A   
CCH3. . . . . . . . . . . . . . . . . .    D ADDR   00C7H   A   
CCL1. . . . . . . . . . . . . . . . . .    D ADDR   00C2H   A   
CCL2. . . . . . . . . . . . . . . . . .    D ADDR   00C4H   A   
CCL3. . . . . . . . . . . . . . . . . .    D ADDR   00C6H   A   
CCPDATIA. . . . . . . . . . . . . . . .    D ADDR   00DDH   A   
CCPDATIB. . . . . . . . . . . . . . . .    D ADDR   00DEH   A   
CCPDATO . . . . . . . . . . . . . . . .    D ADDR   00DFH   A   
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    55

CLKCTRL . . . . . . . . . . . . . . . .    D ADDR   00A3H   A   
CLKLFCTRL . . . . . . . . . . . . . . .    D ADDR   00ADH   A   
CMD?53114 . . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    8     NRF
COMPCON . . . . . . . . . . . . . . . .    D ADDR   00DBH   A   
CONFIG?041. . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_HAL_HAL_N
                                    8     RF
CONFIG?143. . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_HAL_NRF
CONFIG?245. . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
CONFIG?348. . . . . . . . . . . . . . .    D ADDR   0002H   R   SEG=?DT?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
CRC . . . . . . . . . . . . . . . . . .    D ADDR   00CAH   A   
CRCH. . . . . . . . . . . . . . . . . .    D ADDR   00CBH   A   
CRCL. . . . . . . . . . . . . . . . . .    D ADDR   00CAH   A   
CRC_MODE?244. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
CTR?52112 . . . . . . . . . . . . . . .    D ADDR   0004H   R   SEG=?DT?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    8     RF
CY. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.7 A   
DATARATE?2180 . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
DPH . . . . . . . . . . . . . . . . . .    D ADDR   0083H   A   
DPH1. . . . . . . . . . . . . . . . . .    D ADDR   0085H   A   
DPL . . . . . . . . . . . . . . . . . .    D ADDR   0082H   A   
DPL1. . . . . . . . . . . . . . . . . .    D ADDR   0084H   A   
DPS . . . . . . . . . . . . . . . . . .    D ADDR   0092H   A   
DYNPD?3283. . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SETUP_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_HA
                                    8     L_NRF
EA. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.7 A   
ENABLE?3384 . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_H
                                    8     AL_NRF
ENABLE?3486 . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_N
                                    8     RF
ENABLE?3588 . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_HAL_HAL_N
                                    8     RF
ENABLE?49103. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_LIB_HAL_H
                                    8     AL_NRF
EN_AA?1571. . . . . . . . . . . . . . .    D ADDR   0002H   R   SEG=?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
EN_AA?754 . . . . . . . . . . . . . . .    D ADDR   0003H   R   SEG=?DT?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
EN_AA?857 . . . . . . . . . . . . . . .    D ADDR   0002H   R   SEG=?DT?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
EN_AA_R?1573. . . . . . . . . . . . . .    D ADDR   0004H   R   SEG=?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
EN_RXADDR?1570. . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
EN_RXADDR?753 . . . . . . . . . . . . .    D ADDR   0002H   R   SEG=?DT?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
EN_RXADDR?856 . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
EN_RX_R?1572. . . . . . . . . . . . . .    D ADDR   0003H   R   SEG=?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
ES0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . . . . .    B ADDR   00B8H.7 A   
EXF2. . . . . . . . . . . . . . . . . .    B ADDR   00C0H.7 A   
F0. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.5 A   
FCR . . . . . . . . . . . . . . . . . .    D ADDR   00FAH   A   
FDCR. . . . . . . . . . . . . . . . . .    D ADDR   00FBH   A   
FEATURE?3385. . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_H
                                    8     AL_NRF
FEATURE?3487. . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_N
                                    8     RF
FEATURE?3589. . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_HAL_HAL_N
                                    8     RF
FPCR. . . . . . . . . . . . . . . . . .    D ADDR   00F9H   A   
FSR . . . . . . . . . . . . . . . . . .    D ADDR   00F8H   A   
HAL_NRF_ACTIVATE_FEATURES . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_ACTIVATE_FEATURES?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_FLUSH_RX. . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_FLUSH_RX?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_FLUSH_TX. . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_FLUSH_TX?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_GET_ADDRESS_WIDTH . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_ADDRESS_WIDTH?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_GET_AUTO_RETR_STATUS. . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_AUTO_RETR_STATUS?___LE1_LIB_HAL_HAL_
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    56

                                    9     NRF
HAL_NRF_GET_CARRIER_DETECT. . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_CARRIER_DETECT?___LE1_LIB_HAL_HAL_NR
                                    9     F
HAL_NRF_GET_CLEAR_IRQ_FLAGS . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_CLEAR_IRQ_FLAGS?___LE1_LIB_HAL_HAL_N
                                    9     RF
HAL_NRF_GET_FIFO_STATUS . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_FIFO_STATUS?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_GET_IRQ_FLAGS . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_IRQ_FLAGS?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_GET_PACKET_LOST_CTR . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_PACKET_LOST_CTR?___LE1_LIB_HAL_HAL_N
                                    9     RF
HAL_NRF_GET_REUSE_TX_STATUS . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_REUSE_TX_STATUS?___LE1_LIB_HAL_HAL_N
                                    9     RF
HAL_NRF_GET_RSSI. . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_GET_RX_DATA_SOURCE. . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_RX_DATA_SOURCE?___LE1_LIB_HAL_HAL_NR
                                    9     F
HAL_NRF_GET_RX_FIFO_STATUS. . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_RX_FIFO_STATUS?___LE1_LIB_HAL_HAL_NR
                                    9     F
HAL_NRF_GET_TRANSMIT_ATTEMPTS . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_TRANSMIT_ATTEMPTS?___LE1_LIB_HAL_HAL
                                    9     _NRF
HAL_NRF_GET_TX_FIFO_STATUS. . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_GET_TX_FIFO_STATUS?___LE1_LIB_HAL_HAL_NR
                                    9     F
HAL_NRF_NOP . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_NOP?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_READ_RX_PAYLOAD_WIDTH . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_READ_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    9     _NRF
HAL_NRF_REUSE_TX. . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_REUSE_TX?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_RX_FIFO_EMPTY . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_RX_FIFO_EMPTY?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_RX_FIFO_FULL. . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_RX_FIFO_FULL?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_TX_FIFO_EMPTY . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_TX_FIFO_EMPTY?___LE1_LIB_HAL_HAL_NRF
HAL_NRF_TX_FIFO_FULL. . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?HAL_NRF_TX_FIFO_FULL?___LE1_LIB_HAL_HAL_NRF
I2FR. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.5 A   
I3FR. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.6 A   
IE0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.3 A   
IEN0. . . . . . . . . . . . . . . . . .    D ADDR   00A8H   A   
IEN1. . . . . . . . . . . . . . . . . .    D ADDR   00B8H   A   
INFEN . . . . . . . . . . . . . . . . .    B ADDR   00F8H.3 A   
INTEXP. . . . . . . . . . . . . . . . .    D ADDR   00A6H   A   
INT_SOURCE?346. . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
IP0 . . . . . . . . . . . . . . . . . .    D ADDR   00A9H   A   
IP1 . . . . . . . . . . . . . . . . . .    D ADDR   00B9H   A   
IRCON . . . . . . . . . . . . . . . . .    D ADDR   00C0H   A   
IRQ_STATE?347 . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
IT0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.2 A   
LENGTH?3896 . . . . . . . . . . . . . .    D ADDR   0004H   R   SEG=?DT?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_NR
                                    9     F
LENGTH?52113. . . . . . . . . . . . . .    D ADDR   0005H   R   SEG=?DT?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    9     RF
LENGTH?53116. . . . . . . . . . . . . .    D ADDR   0004H   R   SEG=?DT?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    9     NRF
MCDIS . . . . . . . . . . . . . . . . .    B ADDR   00F8H.7 A   
MD0 . . . . . . . . . . . . . . . . . .    D ADDR   00E9H   A   
MD1 . . . . . . . . . . . . . . . . . .    D ADDR   00EAH   A   
MD2 . . . . . . . . . . . . . . . . . .    D ADDR   00EBH   A   
MD3 . . . . . . . . . . . . . . . . . .    D ADDR   00ECH   A   
MD4 . . . . . . . . . . . . . . . . . .    D ADDR   00EDH   A   
MD5 . . . . . . . . . . . . . . . . . .    D ADDR   00EEH   A   
MEMCON. . . . . . . . . . . . . . . . .    D ADDR   00A7H   A   
MISC. . . . . . . . . . . . . . . . . .    B ADDR   00B8H.4 A   
MISCF . . . . . . . . . . . . . . . . .    B ADDR   00C0H.4 A   
MPAGE . . . . . . . . . . . . . . . . .    D ADDR   00C9H   A   
OPMCON. . . . . . . . . . . . . . . . .    D ADDR   00AEH   A   
OP_MODE?040 . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_HAL_HAL_N
                                    9     RF
OV. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . . . . .    D ADDR   0080H   A   
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    57

P00 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.0 A   
P01 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.1 A   
P02 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.2 A   
P03 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.3 A   
P04 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.4 A   
P05 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.5 A   
P06 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.6 A   
P07 . . . . . . . . . . . . . . . . . .    B ADDR   0080H.7 A   
P0CON . . . . . . . . . . . . . . . . .    D ADDR   009EH   A   
P0DIR . . . . . . . . . . . . . . . . .    D ADDR   0093H   A   
P1. . . . . . . . . . . . . . . . . . .    D ADDR   0090H   A   
P10 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.0 A   
P11 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.1 A   
P12 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.2 A   
P13 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.3 A   
P14 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.4 A   
P15 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.5 A   
P16 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.6 A   
P17 . . . . . . . . . . . . . . . . . .    B ADDR   0090H.7 A   
P1CON . . . . . . . . . . . . . . . . .    D ADDR   009FH   A   
P1DIR . . . . . . . . . . . . . . . . .    D ADDR   0094H   A   
P2. . . . . . . . . . . . . . . . . . .    D ADDR   00A0H   A   
P20 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.0 A   
P21 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.1 A   
P22 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.2 A   
P23 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.3 A   
P24 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.4 A   
P25 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.5 A   
P26 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.6 A   
P27 . . . . . . . . . . . . . . . . . .    B ADDR   00A0H.7 A   
P2CON . . . . . . . . . . . . . . . . .    D ADDR   0097H   A   
P2DIR . . . . . . . . . . . . . . . . .    D ADDR   0095H   A   
P3. . . . . . . . . . . . . . . . . . .    D ADDR   00B0H   A   
P30 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
P31 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.1 A   
P32 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.2 A   
P33 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.3 A   
P34 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.4 A   
P35 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.5 A   
P36 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.6 A   
P37 . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.7 A   
P3CON . . . . . . . . . . . . . . . . .    D ADDR   008FH   A   
P3DIR . . . . . . . . . . . . . . . . .    D ADDR   0096H   A   
PBUF?52111. . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    :     RF
PBUF?53115. . . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    :     NRF
PCON. . . . . . . . . . . . . . . . . .    D ADDR   0087H   A   
PIPE?3894 . . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_NR
                                    :     F
PIPE_NUM?1569 . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
PIPE_NUM?751. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
PIPE_NUM?855. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
PLL_LOCK?4799 . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAL_NRF
POFCON. . . . . . . . . . . . . . . . .    D ADDR   00DCH   A   
POWER?2078. . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_OUTPUT_POWER?___LE1_LIB_HAL_HAL_NRF
PSW . . . . . . . . . . . . . . . . . .    D ADDR   00D0H   A   
PW?1875 . . . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    :     _NRF
PWMCON. . . . . . . . . . . . . . . . .    D ADDR   00B2H   A   
PWMDC0. . . . . . . . . . . . . . . . .    D ADDR   00A1H   A   
PWMDC1. . . . . . . . . . . . . . . . .    D ADDR   00A2H   A   
PWRDWN. . . . . . . . . . . . . . . . .    D ADDR   00A4H   A   
PWR_MODE?142. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_HAL_NRF
RB80. . . . . . . . . . . . . . . . . .    B ADDR   0098H.2 A   
RDEND . . . . . . . . . . . . . . . . .    B ADDR   00F8H.1 A   
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    58

RDIS. . . . . . . . . . . . . . . . . .    B ADDR   00F8H.2 A   
RDYN. . . . . . . . . . . . . . . . . .    B ADDR   00F8H.4 A   
REG?52110 . . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    ;     RF
REN0. . . . . . . . . . . . . . . . . .    B ADDR   0098H.4 A   
RETVAL?51109. . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_NRF
RF. . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.1 A   
RFCE. . . . . . . . . . . . . . . . . .    B ADDR   00E8H.0 A   
RFCKEN. . . . . . . . . . . . . . . . .    B ADDR   00E8H.2 A   
RFCON . . . . . . . . . . . . . . . . .    D ADDR   00E8H   A   
RFCSN . . . . . . . . . . . . . . . . .    B ADDR   00E8H.1 A   
RFF . . . . . . . . . . . . . . . . . .    B ADDR   00C0H.1 A   
RFSPI . . . . . . . . . . . . . . . . .    B ADDR   00B8H.0 A   
RFSPIF. . . . . . . . . . . . . . . . .    B ADDR   00C0H.0 A   
RF_CH?1977. . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_RF_CHANNEL?___LE1_LIB_HAL_HAL_NRF
RF_SETUP?2079 . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_OUTPUT_POWER?___LE1_LIB_HAL_HAL_NRF
RF_SETUP?2181 . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
RF_SETUP?47100. . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAL_NRF
RF_SETUP?49104. . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_LIB_HAL_H
                                    ;     AL_NRF
RI0 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.0 A   
RNGCTL. . . . . . . . . . . . . . . . .    D ADDR   00D6H   A   
RNGDAT. . . . . . . . . . . . . . . . .    D ADDR   00D7H   A   
RS0 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.4 A   
RSTREAS . . . . . . . . . . . . . . . .    D ADDR   00B1H   A   
RTC2CMP0. . . . . . . . . . . . . . . .    D ADDR   00B4H   A   
RTC2CMP1. . . . . . . . . . . . . . . .    D ADDR   00B5H   A   
RTC2CON . . . . . . . . . . . . . . . .    D ADDR   00B3H   A   
RTC2CPT00 . . . . . . . . . . . . . . .    D ADDR   00B6H   A   
RTC2CPT01 . . . . . . . . . . . . . . .    D ADDR   00ABH   A   
RTC2CPT10 . . . . . . . . . . . . . . .    D ADDR   00ACH   A   
S0BUF . . . . . . . . . . . . . . . . .    D ADDR   0099H   A   
S0CON . . . . . . . . . . . . . . . . .    D ADDR   0098H   A   
S0RELH. . . . . . . . . . . . . . . . .    D ADDR   00BAH   A   
S0RELL. . . . . . . . . . . . . . . . .    D ADDR   00AAH   A   
SETUP_AW?1266 . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_ADDRESS_WIDTH?___LE1_LIB_HAL_HAL_NR
                                    ;     F
SETUP_RETR?1164 . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_SET_AUTO_RETR?___LE1_LIB_HAL_HAL_NRF
SM0 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.7 A   
SM1 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.6 A   
SM20. . . . . . . . . . . . . . . . . .    B ADDR   0098H.5 A   
SP. . . . . . . . . . . . . . . . . . .    D ADDR   0081H   A   
SPI . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.2 A   
SPIF. . . . . . . . . . . . . . . . . .    B ADDR   00C0H.2 A   
SPIMCON0. . . . . . . . . . . . . . . .    D ADDR   00FCH   A   
SPIMCON1. . . . . . . . . . . . . . . .    D ADDR   00FDH   A   
SPIMDAT . . . . . . . . . . . . . . . .    D ADDR   00FFH   A   
SPIMSTAT. . . . . . . . . . . . . . . .    D ADDR   00FEH   A   
SPIRCON0. . . . . . . . . . . . . . . .    D ADDR   00E4H   A   
SPIRCON1. . . . . . . . . . . . . . . .    D ADDR   00E5H   A   
SPIRDAT . . . . . . . . . . . . . . . .    D ADDR   00E7H   A   
SPIRSTAT. . . . . . . . . . . . . . . .    D ADDR   00E6H   A   
SPISCON0. . . . . . . . . . . . . . . .    D ADDR   00BCH   A   
SPISCON1. . . . . . . . . . . . . . . .    D ADDR   00BDH   A   
SPISDAT . . . . . . . . . . . . . . . .    D ADDR   00BFH   A   
SPISRDSZ. . . . . . . . . . . . . . . .    D ADDR   00B7H   A   
SPISSTAT. . . . . . . . . . . . . . . .    D ADDR   00BEH   A   
STP . . . . . . . . . . . . . . . . . .    B ADDR   00F8H.6 A   
T2. . . . . . . . . . . . . . . . . . .    D ADDR   00CCH   A   
T2CM. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.2 A   
T2CON . . . . . . . . . . . . . . . . .    D ADDR   00C8H   A   
T2I0. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.0 A   
T2I1. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.1 A   
T2PS. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.7 A   
T2R0. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.3 A   
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    59

T2R1. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.4 A   
TB80. . . . . . . . . . . . . . . . . .    B ADDR   0098H.3 A   
TCON. . . . . . . . . . . . . . . . . .    D ADDR   0088H   A   
TF0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . . . . .    B ADDR   00C0H.6 A   
TH0 . . . . . . . . . . . . . . . . . .    D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . . . . .    D ADDR   008DH   A   
TH2 . . . . . . . . . . . . . . . . . .    D ADDR   00CDH   A   
TI0 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . . . . .    D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . . . . .    D ADDR   008BH   A   
TL2 . . . . . . . . . . . . . . . . . .    D ADDR   00CCH   A   
TMOD. . . . . . . . . . . . . . . . . .    D ADDR   0089H   A   
TR0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.6 A   
TX_PLOAD?3895 . . . . . . . . . . . . .    D ADDR   0001H   R   SEG=?DT?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_NR
                                    <     F
VALUE?48102 . . . . . . . . . . . . . .    D ADDR   0003H   R   SEG=?DT?HAL_NRF_GET_RSSI?___LE1_LIB_HAL_HAL_NRF
VALUE?51108 . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_NRF
W2CON0. . . . . . . . . . . . . . . . .    D ADDR   00E2H   A   
W2CON1. . . . . . . . . . . . . . . . .    D ADDR   00E1H   A   
W2DAT . . . . . . . . . . . . . . . . .    D ADDR   00DAH   A   
W2SADR. . . . . . . . . . . . . . . . .    D ADDR   00D9H   A   
WDSV. . . . . . . . . . . . . . . . . .    D ADDR   00AFH   A   
WEN . . . . . . . . . . . . . . . . . .    B ADDR   00F8H.5 A   
WPEN. . . . . . . . . . . . . . . . . .    B ADDR   00F8H.0 A   
WUCON . . . . . . . . . . . . . . . . .    D ADDR   00A5H   A   
WUF . . . . . . . . . . . . . . . . . .    B ADDR   00C0H.5 A   
WUIRQ . . . . . . . . . . . . . . . . .    B ADDR   00B8H.5 A   
WUOPC0. . . . . . . . . . . . . . . . .    D ADDR   00CFH   A   
WUOPC1. . . . . . . . . . . . . . . . .    D ADDR   00CEH   A   
WUPIN . . . . . . . . . . . . . . . . .    B ADDR   00B8H.3 A   
WUPINF. . . . . . . . . . . . . . . . .    B ADDR   00C0H.3 A   
_HAL_NRF_CLEAR_IRQ_FLAG . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_CLEAR_IRQ_FLAG?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_CLOSE_PIPE . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_CLOSE_PIPE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_ENABLE_ACK_PAYLOAD . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_ENABLE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_N
                                    <     RF
_HAL_NRF_ENABLE_CONTINIOUS_WAVE . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_ENABLE_CONTINIOUS_WAVE?___LE1_LIB_HAL_H
                                    <     AL_NRF
_HAL_NRF_ENABLE_DYNAMIC_ACK . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_ENABLE_DYNAMIC_ACK?___LE1_LIB_HAL_HAL_N
                                    <     RF
_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_ENABLE_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_H
                                    <     AL_NRF
_HAL_NRF_GET_ADDRESS. . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_GET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_GET_PIPE_STATUS. . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_GET_PIPE_STATUS?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_GET_RX_PAYLOAD_WIDTH . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_GET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    <     _NRF
_HAL_NRF_OPEN_PIPE. . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_OPEN_PIPE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_READ_MULTIBYTE_REG . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_READ_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_N
                                    <     RF
_HAL_NRF_READ_REG . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_READ_REG?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_READ_RX_PAYLOAD. . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_READ_RX_PAYLOAD?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_RW . . . . . . . . . . . . . .    C ADDR   -----       EXT
_HAL_NRF_SETUP_DYNAMIC_PAYLOAD. . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SETUP_DYNAMIC_PAYLOAD?___LE1_LIB_HAL_HA
                                    <     L_NRF
_HAL_NRF_SET_ADDRESS. . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_ADDRESS?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_ADDRESS_WIDTH. . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_ADDRESS_WIDTH?___LE1_LIB_HAL_HAL_NR
                                    <     F
_HAL_NRF_SET_AUTO_RETR. . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_AUTO_RETR?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_CRC_MODE . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_CRC_MODE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_DATARATE . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_DATARATE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_IRQ_MODE . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_IRQ_MODE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_OPERATION_MODE . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_OPERATION_MODE?___LE1_LIB_HAL_HAL_N
                                    <     RF
_HAL_NRF_SET_OUTPUT_POWER . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_OUTPUT_POWER?___LE1_LIB_HAL_HAL_NRF
A51 MACRO ASSEMBLER  ___LE1_LIB_HAL_HAL_NRF                                               06/03/2010 14:40:48 PAGE    60

_HAL_NRF_SET_PLL_MODE . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_PLL_MODE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_POWER_MODE . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_POWER_MODE?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_RF_CHANNEL . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_RF_CHANNEL?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_SET_RX_PAYLOAD_WIDTH . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_SET_RX_PAYLOAD_WIDTH?___LE1_LIB_HAL_HAL
                                    =     _NRF
_HAL_NRF_WRITE_ACK_PAYLOAD. . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_WRITE_ACK_PAYLOAD?___LE1_LIB_HAL_HAL_NR
                                    =     F
_HAL_NRF_WRITE_MULTIBYTE_REG. . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_WRITE_MULTIBYTE_REG?___LE1_LIB_HAL_HAL_
                                    =     NRF
_HAL_NRF_WRITE_REG. . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_WRITE_REG?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_WRITE_TX_PAYLOAD . . . . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_WRITE_TX_PAYLOAD?___LE1_LIB_HAL_HAL_NRF
_HAL_NRF_WRITE_TX_PAYLOAD_NOACK . . . .    C ADDR   0000H   R   SEG=?PR?_HAL_NRF_WRITE_TX_PAYLOAD_NOACK?___LE1_LIB_HAL_H
                                    =     AL_NRF
___LE1_LIB_HAL_HAL_NRF. . . . . . . . .    N NUMB   -----       


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
